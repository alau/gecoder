/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2002
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:03:26 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3512 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Branch {

  // Select first variable
  forceinline ViewSelStatus
  ByNone::init(const Space*, IntView) {
    return VSS_COMMIT;
  }
  forceinline ViewSelStatus
  ByNone::select(const Space*, IntView) {
    GECODE_NEVER;
    return VSS_NONE;
  }

  // Select variable with smallest min
  forceinline ViewSelStatus
  ByMinMin::init(const Space*, IntView x) {
    min = x.min();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByMinMin::select(const Space*, IntView x) {
    if (x.min() < min) {
      min = x.min(); return VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with largest min
  forceinline ViewSelStatus
  ByMinMax::init(const Space*, IntView x) {
    min = x.min();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByMinMax::select(const Space*, IntView x) {
    if (x.min() > min) {
      min = x.min(); return VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with smallest max
  forceinline ViewSelStatus
  ByMaxMin::init(const Space*, IntView x) {
    max = x.max();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByMaxMin::select(const Space*, IntView x) {
    if (x.max() < max) {
      max = x.max(); return VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with largest max
  forceinline ViewSelStatus
  ByMaxMax::init(const Space*, IntView x) {
    max = x.max();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByMaxMax::select(const Space*, IntView x) {
    if (x.max() > max) {
      max = x.max(); return VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with smallest size
  forceinline ViewSelStatus
  BySizeMin::init(const Space*, IntView x) {
    size = x.size();
    return (size == 2) ? VSS_COMMIT : VSS_SELECT;
  }
  forceinline ViewSelStatus
  BySizeMin::select(const Space*, IntView x) {
    if (x.size() < size) {
      size = x.size();
      return (size == 2) ? VSS_COMMIT : VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with largest size
  forceinline ViewSelStatus
  BySizeMax::init(const Space*, IntView x) {
    size = x.size();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  BySizeMax::select(const Space*, IntView x) {
    if (x.size() > size) {
      size = x.size(); return VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with smallest degree (and smallest size in case of ties)
  forceinline ViewSelStatus
  ByDegreeMin::init(const Space*, IntView x) {
    degree = x.degree(); size = x.size();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByDegreeMin::select(const Space*, IntView x) {
    if (x.degree() < degree) {
      degree = x.degree();
      size   = x.size();
      return VSS_SELECT;
    } else if ((x.degree() == degree) && (x.size() < size)) {
      size = x.size();
      return VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with smallest degree (and smallest size in case of ties)
  forceinline ViewSelStatus
  ByDegreeMax::init(const Space*, IntView x) {
    degree = x.degree(); size = x.size();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByDegreeMax::select(const Space*, IntView x) {
    if (x.degree() > degree) {
      degree = x.degree();
      size   = x.size();
      return VSS_SELECT;
    } else if ((x.degree() == degree) && (x.size() < size)) {
      size = x.size();
      return VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with smallest min-regret
  forceinline ViewSelStatus
  ByRegretMinMin::init(const Space*, IntView x) {
    regret = x.regret_min();
    return (regret == 1) ? VSS_COMMIT : VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByRegretMinMin::select(const Space*, IntView x) {
    if (x.regret_min() < regret) {
      regret = x.regret_min();
      return (regret == 1) ? VSS_COMMIT : VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with largest min-regret
  forceinline ViewSelStatus
  ByRegretMinMax::init(const Space*, IntView x) {
    regret = x.regret_min();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByRegretMinMax::select(const Space*, IntView x) {
    if (x.regret_min() > regret) {
      regret = x.regret_min(); return VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with smallest max-regret
  forceinline ViewSelStatus
  ByRegretMaxMin::init(const Space*, IntView x) {
    regret = x.regret_max();
    return (regret == 1) ? VSS_COMMIT : VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByRegretMaxMin::select(const Space*, IntView x) {
    if (x.regret_max() < regret) {
      regret = x.regret_max();
      return (regret == 1) ? VSS_COMMIT : VSS_SELECT;
    }
    return VSS_NONE;
  }

  // Select variable with smallest min-regret
  forceinline ViewSelStatus
  ByRegretMaxMax::init(const Space*, IntView x) {
    regret = x.regret_max();
    return VSS_SELECT;
  }
  forceinline ViewSelStatus
  ByRegretMaxMax::select(const Space*, IntView x) {
    if (x.regret_max() > regret) {
      regret = x.regret_max(); return VSS_SELECT;
    }
    return VSS_NONE;
  }

}}}

// STATISTICS: int-branch

