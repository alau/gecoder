/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2002
 *
 *  Last modified:
 *     $Date: 2006-08-24 11:25:05 +0200 (Thu, 24 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3559 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode {

  namespace Int {

    /*
     * Constructors and initialization
     *
     */
    forceinline
    OffsetView::OffsetView(void) {}
    forceinline
    OffsetView::OffsetView(const IntView& x, int d)
      : DerivedViewBase<IntView>(x), c(d) {}
    forceinline void
    OffsetView::init(const IntView& x, int d) {
      view=x; c=d;
    }
    forceinline int
    OffsetView::offset(void) const {
      return c;
    }


    /*
     * Value access
     *
     */
    forceinline int
    OffsetView::min(void) const {
      return view.min()+c;
    }
    forceinline int
    OffsetView::max(void) const {
      return view.max()+c;
    }
    forceinline int
    OffsetView::med(void) const {
      return view.med()+c;
    }
    forceinline int
    OffsetView::val(void) const {
      return view.val()+c;
    }

    forceinline unsigned int
    OffsetView::width(void) const {
      return view.width();
    }
    forceinline unsigned int
    OffsetView::size(void) const {
      return view.size();
    }
    forceinline unsigned int
    OffsetView::regret_min(void) const {
      return view.regret_min();
    }
    forceinline unsigned int
    OffsetView::regret_max(void) const {
      return view.regret_max();
    }

    /*
     * Domain tests
     *
     */
    forceinline bool
    OffsetView::range(void) const {
      return view.range();
    }
    forceinline bool
    OffsetView::assigned(void) const {
      return view.assigned();
    }

    forceinline bool
    OffsetView::in(int n) const {
      return view.in(n-c);
    }
    forceinline bool
    OffsetView::in(double n) const {
      return view.in(n-c);
    }


    /*
     * Domain update by value
     *
     */
    forceinline ModEvent
    OffsetView::lq(Space* home, int n) {
      return view.lq(home,n-c);
    }
    forceinline ModEvent
    OffsetView::lq(Space* home, double n) {
      return view.lq(home,n-c);
    }
    forceinline ModEvent
    OffsetView::le(Space* home, int n) {
      return view.le(home,n-c);
    }
    forceinline ModEvent
    OffsetView::le(Space* home, double n) {
      return view.le(home,n-c);
    }
    forceinline ModEvent
    OffsetView::gq(Space* home, int n) {
      return view.gq(home,n-c);
    }
    forceinline ModEvent
    OffsetView::gq(Space* home, double n) {
      return view.gq(home,n-c);
    }
    forceinline ModEvent
    OffsetView::gr(Space* home, int n) {
      return view.gr(home,n-c);
    }
    forceinline ModEvent
    OffsetView::gr(Space* home, double n) {
      return view.gr(home,n-c);
    }
    forceinline ModEvent
    OffsetView::nq(Space* home, int n) {
      return view.nq(home,n-c);
    }
    forceinline ModEvent
    OffsetView::nq(Space* home, double n) {
      return view.nq(home,n-c);
    }
    forceinline ModEvent
    OffsetView::eq(Space* home, int n) {
      return view.eq(home,n-c);
    }
    forceinline ModEvent
    OffsetView::eq(Space* home, double n) {
      return view.eq(home,n-c);
    }



    /*
     * Domain update by range iterator
     *
     */
    template <class I>
    ModEvent
    OffsetView::narrow(Space* home, I& i) {
      Iter::Ranges::Offset<I> oi(i,-c); return view.narrow(home,oi);
    }
    template <class I>
    ModEvent
    OffsetView::inter(Space* home, I& i) {
      Iter::Ranges::Offset<I> oi(i,-c); return view.inter(home,oi);
    }
    template <class I>
    ModEvent
    OffsetView::minus(Space* home, I& i) {
      Iter::Ranges::Offset<I> oi(i,-c); return view.minus(home,oi);
    }



    /*
     * Propagator modification events
     *
     */
    forceinline ModEvent
    OffsetView::pme(const Propagator* p) {
      return IntView::pme(p);
    }
    forceinline PropModEvent
    OffsetView::pme(ModEvent me) {
      return IntView::pme(me);
    }


    /*
     * Dependencies
     *
     */
    forceinline void
    OffsetView::subscribe(Space* home, Propagator* p, PropCond pc, 
			  bool process) {
      view.subscribe(home,p,pc,process);
    }
    forceinline void
    OffsetView::cancel(Space* home, Propagator* p, PropCond pc) {
      view.cancel(home,p,pc);
    }


    /*
     * Cloning
     *
     */
    forceinline void
    OffsetView::update(Space* home, bool share, OffsetView& x) {
      c=x.c; view.update(home,share,x.view);
    }


    /**
     * \brief %Range iterator for offset integer views
     * \ingroup TaskActorIntView
     */
    template <>
    class ViewRanges<OffsetView>
      : public Iter::Ranges::Offset<ViewRanges<IntView> > {
    public:
      /// \name Constructors and initialization
      //@{
      /// Default constructor
      ViewRanges(void);
      /// Initialize with ranges for view \a x
      ViewRanges(const OffsetView& x);
      /// Initialize with ranges for view \a x
      void init(const OffsetView& x);
      //@}
    };

    forceinline
    ViewRanges<OffsetView>::ViewRanges(void) {}

    forceinline
    ViewRanges<OffsetView>::ViewRanges(const OffsetView& x) {
      ViewRanges<IntView> xi(x.base());
      Iter::Ranges::Offset<ViewRanges<IntView> >::init(xi,x.offset());
    }

    forceinline void
    ViewRanges<OffsetView>::init(const OffsetView& x) {
      ViewRanges<IntView> xi(x.base());
      Iter::Ranges::Offset<ViewRanges<IntView> >::init(xi,x.offset());
    }
  }

  /*
   * View comparison
   *
   */
  forceinline bool
  same(const Int::OffsetView& x, const Int::OffsetView& y) {
    return same(x.base(),y.base()) && (x.offset() == y.offset());
  }
  forceinline bool
  before(const Int::OffsetView& x, const Int::OffsetView& y) {
    return before(x.base(),y.base())
      || (same(x.base(),y.base()) && (x.offset() < y.offset()));
  }

}

// STATISTICS: int-var

