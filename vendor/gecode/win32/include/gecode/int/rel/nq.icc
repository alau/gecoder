/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date: 2008-01-31 18:29:16 +0100 (Thu, 31 Jan 2008) $ by $Author: tack $
 *     $Revision: 6017 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Int { namespace Rel {

  /*
   * Disequality
   *
   */
  template <class View>
  forceinline
  Nq<View>::Nq(Space* home, View x0, View x1)
    : BinaryPropagator<View,PC_INT_VAL>(home,x0,x1) {}

  template <class View>
  ExecStatus
  Nq<View>::post(Space* home, View x0, View x1){
    if (x0.assigned()) {
      GECODE_ME_CHECK(x1.nq(home,x0.val()));
    } else if (x1.assigned()) {
      GECODE_ME_CHECK(x0.nq(home,x1.val()));
    } else if (same(x0,x1)) {
      return ES_FAILED;
    } else {
      (void) new (home) Nq<View>(home,x0,x1);
    }
    return ES_OK;
  }

  template <class View>
  forceinline
  Nq<View>::Nq(Space* home, bool share, Nq<View>& p)
    : BinaryPropagator<View,PC_INT_VAL>(home,share,p) {}

  template <class View>
  Actor*
  Nq<View>::copy(Space* home, bool share) {
    return new (home) Nq<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Nq<View>::cost(ModEventDelta) const {
    return PC_UNARY_LO;
  }

  template <class View>
  inline Support::Symbol
  Nq<View>::ati(void) {
    return Reflection::mangle<View>("Gecode::Int::Rel::Nq");
  }

  template <class View>
  Reflection::ActorSpec
  Nq<View>::spec(const Space* home, Reflection::VarMap& m) const {
    return BinaryPropagator<View,PC_INT_VAL>::spec(home, m, ati());
  }

  template <class View>
  void
  Nq<View>::post(Space* home, Reflection::VarMap& vars,
  const Reflection::ActorSpec& spec) {
    spec.checkArity(2);
    View x0(home, vars, spec[0]);
    View x1(home, vars, spec[1]);
    (void) new (home) Nq<View>(home, x0, x1);
  }

  template <class View>
  ExecStatus
  Nq<View>::propagate(Space* home, ModEventDelta) {
    if (x0.assigned()) {
      GECODE_ME_CHECK(x1.nq(home,x0.val()));
      x1.cancel(home,this,PC_INT_VAL);
    } else {
      GECODE_ME_CHECK(x0.nq(home,x1.val()));
      x0.cancel(home,this,PC_INT_VAL);
    }
    return ES_SUBSUMED(this,sizeof(*this));
  }


  /*
   * Nary disequality
   *
   */
  template<class View>
  forceinline
  NaryNq<View>::NaryNq(Space* home, ViewArray<ViewTuple<View,2> >& x0)
    : BinaryPropagator<ViewTuple<View,2>,PC_INT_DOM>(home,
                                                     x0[x0.size()-2],
                                                     x0[x0.size()-1]), x(x0) {
    assert(x.size() >= 2);
    x.size(x.size()-2);
  }

  template<class View>
  forceinline
  NaryNq<View>::NaryNq(Space* home, bool share, NaryNq<View>& p)
    : BinaryPropagator<ViewTuple<View,2>,PC_INT_DOM>(home,share,p) {
    x.update(home,share,p.x);
  }

  template<class View>
  forceinline ExecStatus
  NaryNq<View>::post(Space* home, ViewArray<ViewTuple<View,2> >& x) {
    int n = x.size();
    for (int i=n; i--; )
      switch (rtest_nq_dom(x[i][0],x[i][1])) {
      case RT_FALSE: 
        x[i]=x[--n]; 
        break;
      case RT_TRUE:  
        return ES_OK;
      case RT_MAYBE: 
        break;
      default:
        GECODE_NEVER;
      }
    x.size(n);
    if (n == 0)
      return ES_FAILED;
    if (n == 1)
      return Nq<View>::post(home,x[0][0],x[0][1]);
    (void) new (home) NaryNq(home,x);
    return ES_OK;
  }

  template<class View>
  Actor*
  NaryNq<View>::copy(Space* home, bool share) {
    return new (home) NaryNq<View>(home,share,*this);
  }

  template <class View>
  inline Support::Symbol
  NaryNq<View>::ati(void) {
    return Reflection::mangle<View>("Gecode::Int::Rel::NaryNq");
  }

  template <class View>
  Reflection::ActorSpec
  NaryNq<View>::spec(const Space* home, Reflection::VarMap& m) const {
    Reflection::ActorSpec s =
      BinaryPropagator<ViewTuple<View,2>,PC_INT_DOM>::spec(home, m, ati());
    Reflection::ArrayArg* a = Reflection::Arg::newArray(x.size());
    for (int i=x.size(); i--; )
      (*a)[i] = x[i][0].spec(home, m);
    s << a;

    Reflection::ArrayArg* b = Reflection::Arg::newArray(x.size());
    for (int i=x.size(); i--; )
      (*b)[i] = x[i][1].spec(home, m);
    s << b;

    return s;
  }

  template <class View>
  void
  NaryNq<View>::post(Space* home, Reflection::VarMap& vars,
                     const Reflection::ActorSpec& spec) {
    spec.checkArity(4);
    ViewTuple<View,2> x0(home, vars, spec[0]);
    ViewTuple<View,2> x1(home, vars, spec[1]);

    Reflection::ArrayArg* x = spec[2]->toArray();
    Reflection::ArrayArg* y = spec[3]->toArray();
    
    ViewArray<ViewTuple<View,2> > xy(home, x->size()+2);
    for (int i=x->size(); i--; ) {
      xy[i][0] = View(home, vars, (*x)[i]);
      xy[i][1] = View(home, vars, (*y)[i]);
    }
    xy[x->size()]   = x0;
    xy[x->size()+1] = x1;
    (void) new (home) NaryNq<View>(home, xy);
  }

  template<class View>
  ExecStatus
  NaryNq<View>::propagate(Space* home, ModEventDelta) {
    // Eliminate equal pairs
    int n = x.size();
    for (int i=n; i--; )
      switch (rtest_nq_dom(x[i][0],x[i][1])) {
      case RT_TRUE:  
        return ES_SUBSUMED(this,home);
      case RT_FALSE: 
        x[i].cancel(home,this,PC_INT_DOM);
        x[i]=x[--n]; 
        break;
      case RT_MAYBE: 
        break;
      default:
        GECODE_NEVER;
      }
    switch (rtest_nq_dom(x0[0],x0[1])) {
    case RT_TRUE: 
      return ES_SUBSUMED(this,home);
    case RT_FALSE:
      if (n == 0)
        GECODE_REWRITE(this,(Nq<View>::post(home,x1[0],x1[1])));
      x0.cancel(home,this,PC_INT_DOM);
      x0=x[--n];
      x0.subscribe(home,this,PC_INT_DOM);
      break;
    case RT_MAYBE: 
      break;
    default:
      GECODE_NEVER;
    }
    switch (rtest_nq_dom(x1[0],x1[1])) {
    case RT_TRUE: 
      return ES_SUBSUMED(this,home);
    case RT_FALSE:
      if (n == 0)
        GECODE_REWRITE(this,(Nq<View>::post(home,x0[0],x0[1])));
      x1.cancel(home,this,PC_INT_DOM);
      x1=x[--n];
      x1.subscribe(home,this,PC_INT_DOM);
      break;
    case RT_MAYBE: 
      break;
    default:
      GECODE_NEVER;
    }
    x.size(n);
    return ES_FIX;
  }

}}}

// STATISTICS: int-prop

