/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2002
 *
 *  Last modified:
 *     $Date: 2006-07-18 15:18:31 +0200 (Tue, 18 Jul 2006) $ by $Author: schulte $
 *     $Revision: 3388 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Branch {

  /*
   * Branching descriptions for assignments with position and value
   *
   */
  forceinline
  AssignDesc::AssignDesc(const Branching* b, const int p, const int n)
    : BranchingDesc(b,1), _pos(p), _val(n) {}
  forceinline int
  AssignDesc::pos(void) const {
    return _pos;
  }
  forceinline int
  AssignDesc::val(void) const {
    return _val;
  }


  forceinline
  Assign::Assign(Space* home, bool share, Assign& b)
    : Branching(home,share,b), pos(b.pos) {
    x.update(home,share,b.x);
  }
  forceinline
  Assign::Assign(Space* home, ViewArray<IntView>& x1)
    : Branching(home), x(x1), pos(0) {}


  forceinline
  AssignMin::AssignMin(Space* home, bool share, AssignMin& b)
    : Assign(home,share,b) {}
  forceinline
  AssignMin::AssignMin(Space* home, ViewArray<IntView>& x)
    : Assign(home,x) {}

  forceinline
  AssignMed::AssignMed(Space* home, bool share, AssignMed& b)
    : Assign(home,share,b) {}
  forceinline
  AssignMed::AssignMed(Space* home, ViewArray<IntView>& x)
    : Assign(home,x) {}


  forceinline
  AssignMax::AssignMax(Space* home, bool share, AssignMax& b)
    : Assign(home,share,b) {}
  forceinline
  AssignMax::AssignMax(Space* home, ViewArray<IntView>& x)
    : Assign(home,x) {}

}}}

// STATISTICS: int-branch

