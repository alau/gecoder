/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date: 2008-01-31 18:29:16 +0100 (Thu, 31 Jan 2008) $ by $Author: tack $
 *     $Revision: 6017 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Int { namespace Dom {

  template <class View>
  forceinline
  ReIntSet<View>::ReIntSet
  (Space* home, View x, const IntSet& s, BoolView b)
    : ReUnaryPropagator<View,PC_INT_DOM,BoolView>(home,x,b), is(s) {
    Propagator::force(home);
  }

  template <class View>
  forceinline size_t
  ReIntSet<View>::dispose(Space* home) {
    Propagator::unforce(home);
    is.~IntSet();
    (void) ReUnaryPropagator<View,PC_INT_DOM,BoolView>::dispose(home);
    return sizeof(*this);
  }

  template <class View>
  ExecStatus
  ReIntSet<View>::post(Space* home, View x, const IntSet& s, BoolView b) {
    if (s.size() == 0) {
      GECODE_ME_CHECK(b.zero(home));
    } else if (s.size() == 1) {
      return ReRange<View>::post(home,x,s.min(),s.max(),b);
    } else {
      (void) new (home) ReIntSet<View>(home,x,s,b);
    }
    return ES_OK;
  }


  template <class View>
  forceinline
  ReIntSet<View>::ReIntSet(Space* home, bool share, ReIntSet& p)
    : ReUnaryPropagator<View,PC_INT_DOM,BoolView>(home,share,p) {
    is.update(home,share,p.is);
  }

  template <class View>
  Actor*
  ReIntSet<View>::copy(Space* home, bool share) {
    return new (home) ReIntSet(home,share,*this);
  }

  template <class View>
  inline Support::Symbol
  ReIntSet<View>::ati(void) {
    return Reflection::mangle<View>("Gecode::Int::Dom::ReIntSet");
  }

  template <class View>
  Reflection::ActorSpec
  ReIntSet<View>::spec(const Space* home, Reflection::VarMap& m) const {
    Reflection::ActorSpec s =
      ReUnaryPropagator<View,PC_INT_DOM,BoolView>::spec(home, m, ati());
    int count=0;
    for (IntSetRanges isr(is); isr(); ++isr)
      count++;
    Reflection::IntArrayArg* a = Reflection::Arg::newIntArray(count*2);
    count = 0;
    for (IntSetRanges isr(is); isr(); ++isr) {
      (*a)[count++] = isr.min();
      (*a)[count++] = isr.max();
    }
    return s << a;
  }

  template <class View>
  void
  ReIntSet<View>::post(Space* home, Reflection::VarMap& vars,
                       const Reflection::ActorSpec& spec) {
    spec.checkArity(3);
    View x0(home, vars, spec[0]);
    BoolView b(home, vars, spec[1]);
    Reflection::IntArrayArgRanges r(spec[2]->toIntArray());
    (void) new (home) ReIntSet<View>(home, x0, IntSet(r), b);
  }

  template <class View>
  ExecStatus
  ReIntSet<View>::propagate(Space* home, ModEventDelta) {
    IntSetRanges i_is(is);
    if (b.one()) {
      GECODE_ME_CHECK(x0.inter_r(home,i_is,false)); goto subsumed;
    }
    if (b.zero()) {
      GECODE_ME_CHECK(x0.minus_r(home,i_is,false)); goto subsumed;
    }

    {
      ViewRanges<View> i_x(x0);

      switch (Iter::Ranges::subsumes(i_is,i_x)) {
      case Iter::Ranges::SS_SUBSUMED:
        GECODE_ME_CHECK(b.one_none(home)); goto subsumed;
      case Iter::Ranges::SS_EMPTY:
        GECODE_ME_CHECK(b.zero_none(home)); goto subsumed;
      case Iter::Ranges::SS_NONE:
        break;
      default: GECODE_NEVER;
      }
    }

    return ES_FIX;
  subsumed:
    return ES_SUBSUMED(this,home);
  }

}}}

// STATISTICS: int-prop

