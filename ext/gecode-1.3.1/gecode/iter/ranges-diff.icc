/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:05:50 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3515 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Iter { namespace Ranges {

  /**
   * \brief Range iterator for computing set difference
   *
   * Requires \code #include "gecode/iter.hh" \endcode
   * \ingroup FuncIterRanges
   */

  template <class I, class J>
  class Diff : public MinMax {
  protected:
    /// Iterator from which to subtract
    I i;
    /// Iterator to be subtracted
    J j;
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    Diff(void);
    /// Initialize with iterator \a i and \a j
    Diff(I& i, J& j);
    /// Initialize with iterator \a i and \a j
    void init(I& i, J& j);
    //@}

    /// \name Iteration control
    //@{
    /// Move iterator to next range (if possible)
    void operator++(void);
    //@}
  };



  template <class I, class J>
  forceinline void
  Diff<I,J>::operator++(void) {
    // Precondition: mi <= ma
    // Task: find next mi greater than ma
  retry:
    if (!i()) goto done;
    mi = ma+1;
    ma = i.max();
    if (mi > i.max()) {
      ++i;
      if (!i()) goto done;
      mi = i.min();
      ma = i.max();
    }
    while (j() && (j.max() < mi))
      ++j;
    if (j() && (j.min() <= ma)) {
      // Now the interval [mi ... ma] must be shrunken
      // Is [mi ... ma] completely consumed?
      if ((mi >= j.min()) && (ma <= j.max()))
	goto retry;
      // Does [mi ... ma] overlap on the left?
      if (j.min() <= mi) {
	mi = j.max()+1;
	// Search for max!
	++j;
	if (j() && (j.min() <= ma))
	  ma = j.min()-1;
      } else {
	ma = j.min()-1;
      }
    }
    return;
  done:
    finish();
  }

  template <class I, class J>
  forceinline
  Diff<I,J>::Diff(void) {}

  template <class I, class J>
  forceinline
  Diff<I,J>::Diff(I& i0, J& j0)
    : i(i0), j(j0) {
    if (!i()) {
      finish();
    } else {
      mi = i.min()-1; ma = mi;
      operator++();
    }
  }

  template <class I, class J>
  forceinline void
  Diff<I,J>::init(I& i0, J& j0) {
    i = i0; j = j0;
    if (!i()) {
      finish();
    } else {
      mi = i.min()-1; ma = mi;
      operator++();
    }
  }

}}}

// STATISTICS: iter-any

