/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *     Christian Schulte <schulte@gecode.org>
 *     Gabor Szokoli <szokoli@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2004
 *     Christian Schulte, 2004
 *     Gabor Szokoli, 2004
 *
 *  Last modified:
 *     $Date: 2005-08-01 08:20:10 +0200 (Mon, 01 Aug 2005) $ by $Author: tack $
 *     $Revision: 2098 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Set { namespace Rel {

  /*
   * "No Subset" propagator
   *
   */

  template <class View0, class View1>
  forceinline
  NoSubSet<View0,View1>::NoSubSet(Space* home, View0 y0, View1 y1)
    : InhomBinaryPropagator<View0,PC_SET_CLUB,
			    View1,PC_SET_CGLB>(home,y0,y1) {}

  template <class View0, class View1>
  forceinline
  NoSubSet<View0,View1>::NoSubSet(Space* home, bool share, 
				  NoSubSet<View0,View1>& p)
    : InhomBinaryPropagator<View0,PC_SET_CLUB,
			    View1,PC_SET_CGLB>(home,share,p) {}

  template <class View0, class View1>
  ExecStatus
  NoSubSet<View0,View1>::post(Space* home, View0 x, View1 y) {
    if (me_failed(x.cardMin(home,1)))
      return ES_FAILED;
    (void) new (home) NoSubSet<View0,View1>(home,x,y);
    return ES_OK;
  }

  template <class View0, class View1>
  Actor*
  NoSubSet<View0,View1>::copy(Space* home, bool share) {
    return new (home) NoSubSet<View0,View1>(home,share,*this);
  }

  template <class View0, class View1>
  ExecStatus
  NoSubSet<View0,View1>::propagate(Space* home) {
    GlbRanges<View0> x0lb(x0);
    LubRanges<View1> x1ub(x1);
    if (!Iter::Ranges::subset(x0lb, x1ub))
      return ES_SUBSUMED;
    if (x0.cardMin()>x1.cardMax()) { return ES_SUBSUMED; }
    LubRanges<View0> x0ub(x0);
    GlbRanges<View1> x1lb(x1);
    Iter::Ranges::Diff<LubRanges<View0>,GlbRanges<View1> >
      breakers(x0ub,x1lb);
    if (!breakers()) { return ES_FAILED; }
    if (breakers.min() == breakers.max()) {
      int b1 = breakers.min();
      ++breakers;
      if (breakers()) { return ES_FIX; }
      //Only one subsetness-breaker element left:
      GECODE_ME_CHECK( x0.include(home,b1) );
      GECODE_ME_CHECK( x1.exclude(home,b1) );
      return ES_SUBSUMED;
    }
    return ES_FIX;
  }

}}}

// STATISTICS: set-prop
