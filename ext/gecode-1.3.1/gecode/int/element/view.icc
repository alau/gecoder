/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Contributing authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *     Guido Tack, 2004
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:03:26 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3512 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include <algorithm>

#include "gecode/iter.hh"

namespace Gecode { namespace Int { namespace Element {

  /**
   * \brief Class for pair of index and view
   *
   */
  template <class View>
  class IdxView {
  public:
    int idx; View view;

    static IdxView* allocate(Space*, int);
    static IdxView* init(Space*, const IntVarArgs&);
  };


  template <class View>
  forceinline IdxView<View>*
  IdxView<View>::allocate(Space* home, int n) {
      return reinterpret_cast<IdxView<View>*>
	(home->alloc(sizeof(IdxView<View>)*n));
    }

  template <class View>
  forceinline IdxView<View>*
  IdxView<View>::init(Space* home, const IntVarArgs& x) {
    IdxView<View>* iv = allocate(home,x.size());
    for (int i = x.size(); i--; ) {
      iv[i].idx = i; iv[i].view = x[i];
    }
    return iv;
  }



  /**
   * \brief Class for bounds-equality test
   *
   */
  template <class View>
  class RelTestBnd {
  public:
    RelTest operator()(View,View);
  };

  /**
   * \brief Class for domain-equality test
   *
   */
  template <class View>
  class RelTestDom {
  public:
    RelTest operator()(View,View);
  };


  template <class View>
  forceinline RelTest
  RelTestBnd<View>::operator()(View x, View y) {
    return rtest_eq_bnd(x,y);
  }

  template <class View>
  forceinline RelTest
  RelTestDom<View>::operator()(View x, View y) {
    return rtest_eq_dom(x,y);
  }




  /*
   * Base class
   *
   */

  template <class ViewA, class ViewB, PropCond pcb>
  View<ViewA,ViewB,pcb>::View(Space* home, IdxView<ViewB>* iv0, int n0,
			      ViewA y0, ViewB y1)
    : Propagator(home), x0(y0), x1(y1), n(n0), iv(iv0) {
    x0.subscribe(home,this,PC_INT_DOM);
    x1.subscribe(home,this,pcb);
    for (int i=n; i--; )
      iv[i].view.subscribe(home,this,pcb);
  }

  template <class ViewA, class ViewB, PropCond pcb>
  forceinline
  View<ViewA,ViewB,pcb>::View(Space* home, bool share, View& p)
    : Propagator(home,share,p), n(p.n) {
    x0.update(home,share,p.x0);
    x1.update(home,share,p.x1);
    iv = IdxView<ViewB>::allocate(home,n);
    for (int i=n; i--; ) {
      iv[i].idx = p.iv[i].idx;
      iv[i].view.update(home,share,p.iv[i].view);
    }
  }

  template <class ViewA, class ViewB, PropCond pcb>
  PropCost
  View<ViewA,ViewB,pcb>::cost(void) const {
    // This is required for subscribing to variables in the
    // above constructor, but this is then the only time this
    // virtual function is ever used!
    return PC_LINEAR_LO;
  }

  template <class ViewA, class ViewB, PropCond pcb>
  size_t
  View<ViewA,ViewB,pcb>::dispose(Space* home) {
    assert(!home->failed());
    x0.cancel(home,this,PC_INT_DOM);
    x1.cancel(home,this,pcb);
    for (int i=n; i--;)
      iv[i].view.cancel(home,this,pcb);
    (void) Propagator::dispose(home);
    return sizeof(*this);
  }




  /**
   * \brief Value iterator for indices in index-view map
   *
   */
  template <class View>
  class IterIdxView {
  private:
    const IdxView<View> *cur, *end;
  public:
    IterIdxView(void);
    IterIdxView(const IdxView<View>*, const IdxView<View>*);
    void init(const IdxView<View>*, const IdxView<View>*);
    bool operator()(void) const;
    void operator++(void);
    int  val(void) const;
  };

  template <class View>
  forceinline
  IterIdxView<View>::IterIdxView(void) {}
  template <class View>
  forceinline
  IterIdxView<View>::IterIdxView(const IdxView<View>* b,
				 const IdxView<View>* e)
    : cur(b), end(e) {}
  template <class View>
  forceinline void
  IterIdxView<View>::init(const IdxView<View>* b,
			  const IdxView<View>* e) {
    cur=b; end=e;
  }
  template <class View>
  forceinline bool
  IterIdxView<View>::operator()(void) const {
    return cur < end;
  }
  template <class View>
  forceinline void
  IterIdxView<View>::operator++(void) {
    cur++;
  }
  template <class View>
  forceinline int
  IterIdxView<View>::val(void) const {
    return cur->idx;
  }




  /*
   * Generic scanning: does all but computing new domain for result
   * (which is specific to bounds/domain version)
   *
   */

  template <class ViewA, class ViewB, PropCond pcb, class RelTest>
  void
  scan(Space* home, IdxView<ViewB>* iv, int& n,
       ViewA x0, ViewB x1, Propagator* p, RelTest rt) {
    assert(n > 1);
    /*
     * Prunes pairs of index, variable
     *  - checks for idx value removed
     *  - checks for disequal variables
     *
     */
    ViewValues<ViewA> vx0(x0);
    int i = 0;
    int j = 0;
    while (vx0() && (i < n)) {
      if (iv[i].idx < vx0.val()) {
	iv[i].view.cancel(home,p,pcb);
	++i;
      } else if (iv[i].idx > vx0.val()) {
	++vx0;
      } else {
	assert(iv[i].idx == vx0.val());
	switch (rt(iv[i].view,x1)) {
	case RT_FALSE:
	  iv[i].view.cancel(home,p,pcb);
	  break;
	case RT_TRUE:
	case RT_MAYBE:
	  iv[j++] = iv[i];
	  break;
	default: GECODE_NEVER;
	}
	++vx0; ++i;
      }
    }
    while (i < n)
      iv[i++].view.cancel(home,p,pcb);
    bool adjust = (j<n);
    n = j;

    if (n == 0)
      return;

    if (n == 1) {
      (void) x0.eq(home,iv[0].idx);
    } else if (adjust) {
      IterIdxView<ViewA> i(&iv[0],&iv[n]);
      Iter::Values::ToRanges<IterIdxView<ViewA> > ri(i);
      (void) x0.narrow(home,ri);
      assert(x0.size() == static_cast<unsigned int>(n));
    }
  }




  /*
   * Bounds-consistent propagator
   *
   */

  template <class ViewA, class ViewB>
  forceinline
  ViewBnd<ViewA,ViewB>::ViewBnd(Space* home,
				IdxView<ViewB>* iv, int n, ViewA x0, ViewB x1)
    : View<ViewA,ViewB,PC_INT_BND>(home,iv,n,x0,x1) {}

  template <class ViewA, class ViewB>
  ExecStatus
  ViewBnd<ViewA,ViewB>::post(Space* home,
			     IdxView<ViewB>* iv, int n, ViewA x0, ViewB x1) {
    GECODE_ME_CHECK(x0.gq(home,0));
    GECODE_ME_CHECK(x0.le(home,n));
    if (x0.assigned()) {
      return Rel::EqBnd<ViewB,ViewB>::post(home,iv[x0.val()].view,x1);
    } else {
      assert(n>1);
      (void) new (home) ViewBnd<ViewA,ViewB>(home,iv,n,x0,x1);
    }
    return ES_OK;
  }


  template <class ViewA, class ViewB>
  forceinline
  ViewBnd<ViewA,ViewB>::ViewBnd(Space* home, bool share, ViewBnd& p)
    : View<ViewA,ViewB,PC_INT_BND>(home,share,p) {}

  template <class ViewA, class ViewB>
  Actor*
  ViewBnd<ViewA,ViewB>::copy(Space* home, bool share) {
    return new (home) ViewBnd<ViewA,ViewB>(home,share,*this);
  }


  template <class ViewA, class ViewB>
  ExecStatus
  ViewBnd<ViewA,ViewB>::propagate(Space* home) {
    assert(n > 1);
    RelTestBnd<ViewB> rt;
    scan<ViewA,ViewB,PC_INT_BND,RelTestBnd<ViewB> >
      (home,iv,n,x0,x1,this,rt);
    if (n == 0)
      return ES_FAILED;
    if (n == 1) {
      GECODE_ES_CHECK((Rel::EqBnd<ViewB,ViewB>::post(home,iv[0].view,x1)));
      return ES_SUBSUMED;
    }
    assert(n > 1);
    // Compute new result
    int min = iv[n-1].view.min();
    int max = iv[n-1].view.max();
    for (int i=n-1; i--; ) {
      min = std::min(iv[i].view.min(),min);
      max = std::max(iv[i].view.max(),max);
    }
    ExecStatus es = shared(x0,x1) ? ES_NOFIX : ES_FIX;
    {
     ModEvent me = x1.lq(home,max);
     if (me_failed(me))
       return ES_FAILED;
     if (me_modified(me) && (x1.max() != max))
       es = ES_NOFIX;
    }
    {
     ModEvent me = x1.gq(home,min);
     if (me_failed(me))
       return ES_FAILED;
     if (me_modified(me) && (x1.min() != min))
       es = ES_NOFIX;
    }
    return (x1.assigned() && (min == max)) ? ES_SUBSUMED : es;
  }





  /*
   * Domain consistent propagator
   *
   */

  template <class ViewA, class ViewB>
  forceinline
  ViewDom<ViewA,ViewB>::ViewDom(Space* home,
				IdxView<ViewB>* iv, int n, ViewA x0, ViewB x1)
    : View<ViewA,ViewB,PC_INT_DOM>(home,iv,n,x0,x1) {}

  template <class ViewA, class ViewB>
  ExecStatus
  ViewDom<ViewA,ViewB>::post(Space* home,
			     IdxView<ViewB>* iv, int n, ViewA x0, ViewB x1){
    GECODE_ME_CHECK(x0.gq(home,0));
    GECODE_ME_CHECK(x0.le(home,n));
    if (x0.assigned()) {
      return Rel::EqDom<ViewB,ViewB>::post(home,iv[x0.val()].view,x1);
    } else {
      assert(n>1);
      (void) new (home) ViewDom<ViewA,ViewB>(home,iv,n,x0,x1);
    }
    return ES_OK;
  }


  template <class ViewA, class ViewB>
  forceinline
  ViewDom<ViewA,ViewB>::ViewDom(Space* home, bool share, ViewDom& p)
    : View<ViewA,ViewB,PC_INT_DOM>(home,share,p) {}

  template <class ViewA, class ViewB>
  Actor*
  ViewDom<ViewA,ViewB>::copy(Space* home, bool share) {
    return new (home) ViewDom<ViewA,ViewB>(home,share,*this);
  }


  template <class ViewA, class ViewB>
  PropCost
  ViewDom<ViewA,ViewB>::cost(void) const {
    if (ViewA::pme(this) != ME_INT_DOM)
      return PC_LINEAR_LO;
    else
      return PC_LINEAR_HI;
  }

  template <class ViewA, class ViewB>
  ExecStatus
  ViewDom<ViewA,ViewB>::propagate(Space* home) {
    assert(n > 1);
    if (ViewA::pme(this) != ME_INT_DOM) {
      RelTestBnd<ViewB> rt;
      scan<ViewA,ViewB,PC_INT_DOM,RelTestBnd<ViewB> >
	(home,iv,n,x0,x1,this,rt);
      if (n == 0)
	return ES_FAILED;
      if (n == 1) {
	GECODE_ES_CHECK((Rel::EqDom<ViewB,ViewB>::post(home,iv[0].view,x1)));
	return ES_SUBSUMED;
      }
      // Compute new result
      int min = iv[n-1].view.min();
      int max = iv[n-1].view.max();
      for (int i=n-1; i--; ) {
	min = std::min(iv[i].view.min(),min);
	max = std::max(iv[i].view.max(),max);
      }
      GECODE_ME_CHECK(x1.lq(home,max));
      GECODE_ME_CHECK(x1.gq(home,min));
      return (x1.assigned() && (min == max)) ?
	ES_SUBSUMED :
	this->ES_NOFIX_PARTIAL(ViewA::pme(ME_INT_DOM));
    }
    RelTestDom<ViewB> rt;
    scan<ViewA,ViewB,PC_INT_DOM,RelTestDom<ViewB> >
      (home,iv,n,x0,x1,this,rt);
    if (n == 0)
      return ES_FAILED;
    if (n == 1) {
      GECODE_ES_CHECK((Rel::EqDom<ViewB,ViewB>::post(home,iv[0].view,x1)));
      return ES_SUBSUMED;
    }
    assert(n > 1);
    GECODE_AUTOARRAY(ViewRanges<ViewB>,i_view,n);
    for (int i = n; i--; )
      i_view[i].init(iv[i].view);
    Iter::Ranges::NaryUnion<ViewRanges<ViewB> > i_val(i_view, n);
    GECODE_ME_CHECK(x1.inter(home,i_val));
    return x1.modified() ? ES_NOFIX : ES_FIX;
  }

}}}

// STATISTICS: int-prop

