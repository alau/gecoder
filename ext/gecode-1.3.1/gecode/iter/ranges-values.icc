/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:05:50 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3515 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Iter { namespace Ranges {

  /**
   * \brief Value iterator from range iterator
   *
   * Requires \code #include "gecode/iter.hh" \endcode
   * \ingroup FuncIterValues
   */
  template <class I>
  class ToValues {
  protected:
    /// Range iterator used
    I i;
    /// Current value
    int cur;
    /// End of current range
    int max;
    /// Initialize iterator
    void start(void);
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    ToValues(void);
    /// Initialize with values from range iterator \a i
    ToValues(I& i);
    /// Initialize with values from range iterator \a i
    void init(I& i);
    //@}

    /// \name Iteration control
    //@{
    /// Test whether iterator is still at a value or done
    bool operator()(void) const;
    /// Move iterator to next value (if possible)
    void operator++(void);
    //@}

    /// \name Value access
    //@{
    /// Return current value
    int  val(void) const;
    //@}
  };



  template <class I>
  forceinline
  ToValues<I>::ToValues(void) {}

  template <class I>
  forceinline void
  ToValues<I>::start(void) {
    if (i()) {
      cur = i.min(); max = i.max();
    } else {
      cur = 1;       max = 0;
    }
  }

  template <class I>
  forceinline
  ToValues<I>::ToValues(I& i0)
    : i(i0) {
    start();
  }

  template <class I>
  forceinline void
  ToValues<I>::init(I& i0) {
    i = i0;
    start();
  }


  template <class I>
  forceinline bool
  ToValues<I>::operator()(void) const {
    return (cur <= max);
  }

  template <class I>
  forceinline void
  ToValues<I>::operator++(void) {
    ++cur;
    if (cur > max) {
      ++i;
      if (i()) {
	cur = i.min(); max = i.max();
      }
    }
  }

  template <class I>
  forceinline int
  ToValues<I>::val(void) const {
    return cur;
  }

}}}

// STATISTICS: iter-any

