/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Contributing authors:
 *     Gabor Szokoli <szokoli@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2004
 *     Christian Schulte, 2004
 *     Gabor Szokoli, 2004
 *
 *  Last modified:
 *     $Date: 2005-07-31 16:45:18 +0200 (Sun, 31 Jul 2005) $ by $Author: schulte $
 *     $Revision: 2096 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Set { namespace Rel {

  template <class View0, class View1>
  forceinline
  Distinct<View0,View1>::Distinct(Space* home, View0 x, View1 y)
    : InhomBinaryPropagator<View0, PC_SET_VAL, View1, PC_SET_VAL>(home,x,y) {}

  template <class View0, class View1>
  forceinline
  Distinct<View0,View1>::Distinct(Space* home, bool share, Distinct& p)
    : InhomBinaryPropagator<View0, PC_SET_VAL, View1, PC_SET_VAL>
        (home,share,p) {}

  template <class View0, class View1>
  ExecStatus
  Distinct<View0,View1>::post(Space* home, View0 x, View1 y) {
    if (x.assigned())
      GECODE_ES_CHECK((DistinctDoit<View1,View0>::post(home,y,x)));
    if (y.assigned())
      GECODE_ES_CHECK((DistinctDoit<View0,View1>::post(home,x,y)));
    (void) new (home) Distinct<View0,View1>(home,x,y);
    return ES_OK;
  }

  template <class View0, class View1>
  Actor*
  Distinct<View0,View1>::copy(Space* home, bool share) {
    return new (home) Distinct<View0,View1>(home,share,*this);
  }

  template <class View0, class View1>
  ExecStatus
  Distinct<View0,View1>::propagate(Space* home) {
    assert(x0.assigned()||x1.assigned());
    if (x0.assigned()) {
      GECODE_ES_CHECK((DistinctDoit<View1,View0>::post(home,x1,x0)));
    } else {
      GECODE_ES_CHECK((DistinctDoit<View0,View1>::post(home,x0,x1)));
    }
    return ES_SUBSUMED;
  }

  template <class View0, class View1>
  ExecStatus
  DistinctDoit<View0,View1>::post(Space* home, View0 x, View1 y) {
    (void) new (home) DistinctDoit<View0,View1>(home,x,y);
    return ES_OK;
  }

  template <class View0, class View1>
  Actor*
  DistinctDoit<View0,View1>::copy(Space* home, bool share) {
    return new (home) DistinctDoit<View0,View1>(home,share,*this);
  }

  template <class View0, class View1>
  ExecStatus
  DistinctDoit<View0,View1>::propagate(Space* home) {
    assert(y.assigned());
    if (x0.assigned()) {
      GlbRanges<View0> xi(x0);
      GlbRanges<View1> yi(y);
      if (Iter::Ranges::equal(xi,yi)) { return ES_FAILED; }
      else { return ES_SUBSUMED; }
    }
    assert(x0.lubSize()-x0.glbSize() >0);
    if (x0.cardMin()>y.cardMax()) { return ES_SUBSUMED; }
    if (x0.cardMax()<y.cardMin()) { return ES_SUBSUMED; }
    //These tests are too expensive, we should only do them
    //in the 1 unknown left case.
    GlbRanges<View0> xi1(x0);
    LubRanges<View1> yi1(y);
    if (!Iter::Ranges::subset(xi1,yi1)){ return ES_SUBSUMED; }
    LubRanges<View0> xi2(x0);
    GlbRanges<View1> yi2(y);
    if (!Iter::Ranges::subset(yi2,xi2)){ return ES_SUBSUMED; }
    // from here, we know y\subseteq lub(x) and glb(x)\subseteq y

    if (x0.lubSize() == y.cardMin() && x0.lubSize() > 0) {
      GECODE_ME_CHECK(x0.cardMax(home, x0.lubSize() - 1));
      return ES_SUBSUMED;
    }
    if (x0.glbSize() == y.cardMin()) {
      GECODE_ME_CHECK(x0.cardMin(home, x0.glbSize() + 1));
      return ES_SUBSUMED;
    }
    return ES_FIX;
  }

  template <class View0, class View1>
  forceinline
  DistinctDoit<View0,View1>::DistinctDoit(Space* home, View0 _x, View1 _y)
    : UnaryPropagator<View0, PC_SET_ANY>(home,_x), y(_y)  {}

  template <class View0, class View1>
  forceinline
  DistinctDoit<View0,View1>::DistinctDoit(Space* home, bool share,
					  DistinctDoit<View0,View1>& p)
    : UnaryPropagator<View0, PC_SET_ANY>(home,share,p) {
    y.update(home,share,p.y);
  }

}}}

// STATISTICS: set-prop
