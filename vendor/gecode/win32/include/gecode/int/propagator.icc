/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2002
 *
 *  Last modified:
 *     $Date: 2006-05-29 09:42:21 +0200 (Mon, 29 May 2006) $ by $Author: schulte $
 *     $Revision: 3246 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode {

  /**
   * \defgroup TaskPropRePat Reified propagator patterns
   *
   * The optional last Boolean argument (\a fd) to the constructor for creation
   * defines whether deletion must be forced.
   * \ingroup TaskActor
   */

  //@{
  /**
   * \brief Reified unary propagator
   *
   * Stores single view of type \a View with propagation condition \a pc
   * and a Boolean control view of type \a CtrlView.
   */
  template <class View, PropCond pc, class CtrlView>
  class ReUnaryPropagator : public Propagator {
  protected:
    /// Single view
    View x0;
    /// Boolean control view
    CtrlView b;
    /// Constructor for cloning \a p
    ReUnaryPropagator(Space* home, bool share, ReUnaryPropagator& p);
    /// Constructor for rewriting \a p during cloning
    ReUnaryPropagator(Space* home, bool share, Propagator& p,
		      View x0, CtrlView b);
    /// Constructor for creation
    ReUnaryPropagator(Space* home, View x0, CtrlView b, bool fd=false);
  public:
    /// Cost function (defined as PC_UNARY_LO)
    virtual PropCost cost(void) const;
    /// Delete propagator and return its size
    virtual size_t dispose(Space* home);
  };

  /**
   * \brief Reified binary propagator
   *
   * Stores two views of type \a View with propagation condition \a pc
   * and a Boolean control view of type \a CtrlView.
   */
  template <class View, PropCond pc, class CtrlView>
  class ReBinaryPropagator : public Propagator {
  protected:
    /// Two views
    View x0, x1;
    /// Boolean control view
    CtrlView b;
    /// Constructor for cloning \a p
    ReBinaryPropagator(Space* home, bool share, ReBinaryPropagator& p);
    /// Constructor for rewriting \a p during cloning
    ReBinaryPropagator(Space* home, bool share, Propagator& p,
		       View x0, View x1, CtrlView b);
    /// Constructor for creation
    ReBinaryPropagator(Space* home, View x0, View x1,
		       CtrlView b, bool fd=false);
  public:
    /// Cost function (defined as PC_BINARY_LO)
    virtual PropCost cost(void) const;
    /// Delete propagator and return its size
    virtual size_t dispose(Space* home);
  };
  //@}



  /*
   * Reified unary propagators
   *
   */
  template <class View, PropCond pc, class CtrlView>
  ReUnaryPropagator<View,pc,CtrlView>::ReUnaryPropagator
  (Space* home, View y0, CtrlView b0, bool fd)
    : Propagator(home,fd), x0(y0), b(b0) {
    x0.subscribe(home,this,pc);
    b.subscribe(home,this,Int::PC_INT_VAL);
  }

  template <class View, PropCond pc, class CtrlView>
  forceinline
  ReUnaryPropagator<View,pc,CtrlView>::ReUnaryPropagator
  (Space* home, bool share, ReUnaryPropagator<View,pc,CtrlView>& p)
    : Propagator(home,share,p) {
    x0.update(home,share,p.x0);
    b.update(home,share,p.b);
  }

  template <class View, PropCond pc, class CtrlView>
  forceinline
  ReUnaryPropagator<View,pc,CtrlView>::ReUnaryPropagator
  (Space* home, bool share, Propagator& p, View y0, CtrlView b0)
    : Propagator(home,share,p) {
    x0.update(home,share,y0);
    b.update(home,share,b0);
  }

  template <class View, PropCond pc, class CtrlView>
  PropCost
  ReUnaryPropagator<View,pc,CtrlView>::cost(void) const {
    return PC_UNARY_LO;
  }

  template <class View, PropCond pc, class CtrlView>
  size_t
  ReUnaryPropagator<View,pc,CtrlView>::dispose(Space* home) {
    if (!home->failed()) {
      x0.cancel(home,this,pc);
      b.cancel(home,this,Int::PC_INT_VAL);
    }
    (void) Propagator::dispose(home);
    return sizeof(*this);
  }



  /*
   * Reified binary propagators
   *
   */
  template <class View, PropCond pc, class CtrlView>
  ReBinaryPropagator<View,pc,CtrlView>::ReBinaryPropagator
  (Space* home, View y0, View y1, CtrlView b1, bool fd)
    : Propagator(home,fd), x0(y0), x1(y1), b(b1) {
    x0.subscribe(home,this,pc);
    x1.subscribe(home,this,pc);
    b.subscribe(home,this,Int::PC_INT_VAL);
  }

  template <class View, PropCond pc, class CtrlView>
  forceinline
  ReBinaryPropagator<View,pc,CtrlView>::ReBinaryPropagator
  (Space* home, bool share, ReBinaryPropagator<View,pc,CtrlView>& p)
    : Propagator(home,share,p) {
    x0.update(home,share,p.x0);
    x1.update(home,share,p.x1);
    b.update(home,share,p.b);
  }

  template <class View, PropCond pc, class CtrlView>
  forceinline
  ReBinaryPropagator<View,pc,CtrlView>::ReBinaryPropagator
  (Space* home, bool share, Propagator& p, View y0, View y1, CtrlView b0)
    : Propagator(home,share,p) {
    x0.update(home,share,y0);
    x1.update(home,share,y1);
    b.update(home,share,b0);
  }

  template <class View, PropCond pc, class CtrlView>
  PropCost
  ReBinaryPropagator<View,pc,CtrlView>::cost(void) const {
    return PC_BINARY_LO;
  }

  template <class View, PropCond pc, class CtrlView>
  size_t
  ReBinaryPropagator<View,pc,CtrlView>::dispose(Space* home) {
    if (!home->failed()) {
      x0.cancel(home,this,pc);
      x1.cancel(home,this,pc);
      b.cancel(home,this,Int::PC_INT_VAL);
    }
    (void) Propagator::dispose(home);
    return sizeof(*this);
  }

}

// STATISTICS: int-prop

