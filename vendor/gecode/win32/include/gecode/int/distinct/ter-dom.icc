/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2003
 *
 *  Last modified:
 *     $Date: 2006-07-24 16:50:30 +0200 (Mon, 24 Jul 2006) $ by $Author: schulte $
 *     $Revision: 3446 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Distinct {


  /*
   * Ternary domain-consistent distinct
   *
   */

  template <class View>
  forceinline
  TerDom<View>::TerDom(Space* home, View x0, View x1, View x2)
    : TernaryPropagator<View,PC_INT_DOM>(home,x0,x1,x2) {}

  template <class View>
  ExecStatus
  TerDom<View>::post(Space* home, View x0, View x1, View x2) {
    (void) new (home) TerDom<View>(home,x0,x1,x2);
    return ES_OK;
  }

  template <class View>
  forceinline
  TerDom<View>::TerDom(Space* home, bool share, TerDom<View>& p)
    : TernaryPropagator<View,PC_INT_DOM>(home,share,p) {}

  template <class View>
  Actor*
  TerDom<View>::copy(Space* home, bool share) {
    return new (home) TerDom<View>(home,share,*this);
  }

  // Check whether x0 forms a Hall set of cardinality one
#define GECODE_INT_HALL_ONE(x0,x1,x2)				\
  if (x0.assigned()) {						\
    GECODE_ME_CHECK(x1.nq(home,x0.val()));			\
    GECODE_ME_CHECK(x2.nq(home,x0.val()));			\
    if (x1.assigned()) {					\
      GECODE_ME_CHECK(x2.nq(home,x1.val()));			\
      return ES_SUBSUMED;					\
    }								\
    if (x2.assigned()) {					\
      GECODE_ME_CHECK(x1.nq(home,x2.val()));			\
      return ES_SUBSUMED;					\
    }								\
    return ES_FIX;                                              \
  }


  // Check whether x0 and x1 form a Hall set of cardinality two
#define GECODE_INT_HALL_TWO(x0,x1,x2)				\
  if ((x0.size() == 2) && (x1.size() == 2) &&			\
      (x0.min() == x1.min()) && (x0.max() == x1.max())) {	\
    GECODE_ME_CHECK(x2.nq(home,x0.min()));			\
    GECODE_ME_CHECK(x2.nq(home,x0.max()));			\
    return ES_FIX;                                              \
  }

  template <class View>
  ExecStatus
  TerDom<View>::propagate(Space* home) {
    GECODE_INT_HALL_ONE(x0,x1,x2);
    GECODE_INT_HALL_ONE(x1,x0,x2);
    GECODE_INT_HALL_ONE(x2,x0,x1);
    GECODE_INT_HALL_TWO(x0,x1,x2);
    GECODE_INT_HALL_TWO(x0,x2,x1);
    GECODE_INT_HALL_TWO(x1,x2,x0);
    return ES_FIX;
  }

#undef GECODE_INT_HALL_ONE
#undef GECODE_INT_HALL_TWO

}}}

// STATISTICS: int-prop

