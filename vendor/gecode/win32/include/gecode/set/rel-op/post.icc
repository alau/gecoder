/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Contributing authors:
 *     Gabor Szokoli <szokoli@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2004, 2005
 *
 *  Last modified:
 *     $Date: 2006-04-11 15:58:37 +0200 (Tue, 11 Apr 2006) $ by $Author: tack $
 *     $Revision: 3188 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include "gecode/set.hh"
#include "gecode/set/rel.hh"
#include "gecode/set/rel-op.hh"

namespace Gecode { namespace Set { namespace RelOp {
  
  template <class View0, class View1, class Res>
  forceinline void
  rel_eq(Space* home, View0 x0, SetOpType op, View1 x1, Res x2) {
    switch(op) {
    case SOT_DUNION:
      {
	EmptyView emptyset;
	GECODE_ES_FAIL(home,(SuperOfInter<View0,View1,EmptyView>
			     ::post(home, x0, x1, emptyset)));
	// fall through to SOT_UNION
      }
    case SOT_UNION:
      {
	GECODE_ES_FAIL(home,
		       (Union<View0,View1,Res>
			::post(home, x0, x1, x2)));
      }
      break;
    case SOT_INTER:
      {
	GECODE_ES_FAIL(home,(Intersection<View0,View1,Res>
			     ::post(home, x0,x1,x2)));
      }
      break;
    case SOT_MINUS:
      {
	ComplementView<View1> cx1(x1);
	GECODE_ES_FAIL(home,
		       (Intersection<View0,
			ComplementView<View1>,Res>
			::post(home,x0,cx1,x2)));
      }
      break;
    }
  }

  template <class View0, class View1, class View2>
  forceinline void
  rel_sub(Space* home, View0 x0, SetOpType op, View1 x1, View2 x2) {
    switch(op) {
    case SOT_DUNION:
      {
	EmptyView emptyset;
	GECODE_ES_FAIL(home,(SuperOfInter<View0,View1,EmptyView>
			     ::post(home, x0, x1, emptyset)));
	// fall through to SOT_UNION
      }
    case SOT_UNION:
      {
	SetVar tmp(home);
	GECODE_ES_FAIL(home,
		       (Rel::SubSet<SetView,View2>::post(home,tmp,x2)));

	GECODE_ES_FAIL(home,
		       (Union<View0,View1,SetView>
			::post(home, x0, x1, tmp)));
      }
      break;
    case SOT_INTER:
      {
	GECODE_ES_FAIL(home,(SuperOfInter<View0,View1,View2>
			     ::post(home, x0,x1,x2)));
      }
      break;
    case SOT_MINUS:
      {
	ComplementView<View1> cx1(x1);
	GECODE_ES_FAIL(home,
		       (SuperOfInter<View0,
			ComplementView<View1>,View2>
			::post(home,x0,cx1,x2)));
      }
      break;
    }
    
  }

  template <class View0, class View1, class View2>
  forceinline void
  rel_sup(Space* home, View0 x0, SetOpType op, View1 x1, View2 x2) {
    switch(op) {
    case SOT_DUNION:
      {
	EmptyView emptyset;
	GECODE_ES_FAIL(home,(SuperOfInter<View0,View1,EmptyView>
			     ::post(home, x0, x1, emptyset)));
	// fall through to SOT_UNION
      }
    case SOT_UNION:
      {
	GECODE_ES_FAIL(home,
		       (SubOfUnion<View0,View1,View2>
			::post(home, x0, x1, x2)));
      }
      break;
    case SOT_INTER:
      {	
	SetVar tmp(home);
	GECODE_ES_FAIL(home,
		       (Rel::SubSet<View2,SetView>::post(home,x2,tmp)));

	GECODE_ES_FAIL(home,(Intersection<View0,View1,SetView>
			     ::post(home, x0,x1,tmp)));
      }
      break;
    case SOT_MINUS:
      {
	SetVar tmp(home);
	GECODE_ES_FAIL(home,
		       (Rel::SubSet<View2,SetView>::post(home,x2,tmp)));

	ComplementView<View1> cx1(x1);
	GECODE_ES_FAIL(home,
		       (Intersection<View0,
			ComplementView<View1>,SetView>
			::post(home,x0,cx1,tmp)));
      }
      break;
    }
    
  }
  
  template <class View0, class View1, class View2>
  forceinline void
  rel_op_post(Space* home, View0 x, SetOpType op, View1 y,
	   SetRelType r, View2 z) {
    if (home->failed()) return;
    switch(r) {
    case SRT_EQ:
      rel_eq<View0,View1,View2>(home, x, op, y, z);
      break;
    case SRT_NQ:
      {
	SetVar tmp(home);
	GECODE_ES_FAIL(home,
		       (Rel::Distinct<View2,SetView>
			::post(home,z,tmp)));
	rel_eq<View0,View1,SetView>(home, x, op, y, tmp);
      }
      break;
    case SRT_SUB:
      rel_sub<View0,View1,View2>(home, x, op, y, z);
      break;
    case SRT_SUP:
      rel_sup<View0,View1,View2>(home, x, op, y, z);
      break;
    case SRT_DISJ:
      {
	SetVar tmp(home);
	EmptyView emptyset;
	GECODE_ES_FAIL(home,(SuperOfInter<View2,SetView,EmptyView>
			     ::post(home, z, tmp, emptyset)));
	rel_eq<View0,View1,SetView>(home, x, op, y, tmp);
      }
      break;
    case SRT_CMPL:
      {
	ComplementView<View2> cz(z);
	rel_eq<View0,View1,ComplementView<View2> >(home, x, op, y, cz);
      }
      break;
    }

  }

}}}

// STATISTICS: set-prop
