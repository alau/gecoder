/*
 *  Main authors:
 *     Zampelli Stéphane <sz@info.ucl.ac.be>
 *
 *  Copyright:
 *     Université catholique de Louvain, 2005
 *
 *  Last modified:
 *     $Date$
 *     $Revision$
 *
 *  This file is part of CP(Map)
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include "int/distinct.hh" //Needed by injective method in MapVar 


namespace Gecode  { 
  forceinline 
    void branch(Space *home, MapVar M, BvarSel vars, BvalSel vals)
    {
      TRACE_MAP(cout << "branching MapVar" << endl);
      if (home->failed()) return;
      ViewArray<IntView> newarray(home,M.array);  

      switch (vars) {
	case BVAR_NONE:
	  Branch::create<Branch::ByNone>(home,newarray,vals); break;
	case BVAR_MIN_MIN:
	  Branch::create<Branch::ByMinMin>(home,newarray,vals); break;
	case BVAR_MIN_MAX:
	  Branch::create<Branch::ByMinMax>(home,newarray,vals); break;
	case BVAR_MAX_MIN:
	  Branch::create<Branch::ByMaxMin>(home,newarray,vals); break;
	case BVAR_MAX_MAX:
	  Branch::create<Branch::ByMaxMax>(home,newarray,vals); break;
	case BVAR_SIZE_MIN:
	  Branch::create<Branch::BySizeMin>(home,newarray,vals); break;
	case BVAR_SIZE_MAX:
	  Branch::create<Branch::BySizeMax>(home,newarray,vals); break;
	case BVAR_DEGREE_MIN:
	  Branch::create<Branch::ByDegreeMin>(home,newarray,vals); break;
	case BVAR_DEGREE_MAX:
	  Branch::create<Branch::ByDegreeMax>(home,newarray,vals); break;
	case BVAR_REGRET_MIN_MIN:
	  Branch::create<Branch::ByRegretMinMin>(home,newarray,vals); break;
	case BVAR_REGRET_MIN_MAX:
	  Branch::create<Branch::ByRegretMinMax>(home,newarray,vals); break;
	case BVAR_REGRET_MAX_MIN:
	  Branch::create<Branch::ByRegretMaxMin>(home,newarray,vals); break;
	case BVAR_REGRET_MAX_MAX:
	  Branch::create<Branch::ByRegretMaxMax>(home,newarray,vals); break;
	default:
	  throw Gecode::Int::UnknownBranching("Int::branch");
      }

    }


  forceinline	
    void injective(Space *home, MapVar M){
      if (home->failed()) return;
      ViewArray<IntView> newarray(home,M.array);  

      IntConLevel icl = ICL_DEF;
      switch (icl) {
	case ICL_BND:
	  GECODE_ES_FAIL(home,Distinct::Bnd<IntView>::post(home,newarray));
	  break;
	case ICL_DOM:
	  GECODE_ES_FAIL(home,Distinct::Dom<IntView>::post(home,newarray));
	  break;
	default:
	  GECODE_ES_FAIL(home,Distinct::Val<IntView>::post(home,newarray));
      }

    }

}
