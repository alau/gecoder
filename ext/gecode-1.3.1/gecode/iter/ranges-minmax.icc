/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:05:50 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3515 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Iter { namespace Ranges {

  /**
   * \brief Base for range iterators with explicit min and max
   *
   * The iterator provides members \a mi and \a ma for storing the
   * limits of the currently iterated range. The iterator
   * continues until \a mi becomes greater than \a ma. The member function
   * finish does exactly that.
   *
   * Requires \code #include "gecode/iter.hh" \endcode
   * \ingroup FuncIterRanges
   */

  class MinMax {
  protected:
    /// Minimum of current range
    int mi;
    /// Maximum of current range
    int ma;
    /// %Set range such that iteration stops
    void finish(void);
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    MinMax(void);
    /// Initialize with range \a min to \a max
    MinMax(int min, int max);
    //@}

    /// \name Iteration control
    //@{
    /// Test whether iterator is still at a range or done
    bool operator()(void) const;
    //@}

    /// \name Range access
    //@{
    /// Return smallest value of range
    int min(void) const;
    /// Return largest value of range
    int max(void) const;
    /// Return width of range (distance between minimum and maximum)
    unsigned int width(void) const;
    //@}
  };

  forceinline void
  MinMax::finish(void) {
    mi = 1; ma = 0;
  }

  forceinline
  MinMax::MinMax(void) {}

  forceinline
  MinMax::MinMax(int min, int max)
    : mi(min), ma(max) {}

  forceinline bool
  MinMax::operator()(void) const {
    return mi <= ma;
  }

  forceinline int
  MinMax::min(void) const {
    return mi;
  }
  forceinline int
  MinMax::max(void) const {
    return ma;
  }
  forceinline unsigned int
  MinMax::width(void) const {
    return ma-mi+1;
  }

}}}

// STATISTICS: iter-any

