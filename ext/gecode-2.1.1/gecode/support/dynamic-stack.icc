/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2002
 *
 *  Last modified:
 *     $Date: 2007-09-19 09:51:28 +0200 (Wed, 19 Sep 2007) $ by $Author: schulte $
 *     $Revision: 5048 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Support {

  /**
   * \brief Stack with arbitrary number of elements
   *
   * \ingroup FuncSupport
   */
  template <class T>
  class DynamicStack {
  private:
    /// Current size of the stack
    int limit;
    /// Top of stack
    int tos;
    /// Elements on stack
    T*  stack;
    /// Resize stack (increase size)
    void resize(void);
  public:
    /// Initialize stack with \a n elements
    DynamicStack(int n=64);
    /// Release memory
    ~DynamicStack(void);

    /// Test whether stack is empty
    bool empty(void) const;
    /// Pop topmost element from stack and return it
    T pop(void);
    /// Return top of stack
    T& top(void);
    /// Push element on stack
    void push(T);


    /// Return number of entries currently on stack
    int entries(void) const;
    /** \brief Return entry at position \a i
     *
     * Position 0 corresponds to the element first pushed,
     * whereas position \c entries()-1 corresponds to the
     * element pushed last.
     */
    T& operator[](int i);
    /** \brief Return entry at position \a i
     *
     * Position 0 corresponds to the element first pushed,
     * whereas position \c entries()-1 corresponds to the
     * element pushed last.
     */
    const T& operator[](int i) const;

    /// Return size of stack
    size_t size(void) const;
  };


  template <class T>
  void
  DynamicStack<T>::resize(void) {
    int nl = (limit * 3) / 2;
    stack = Memory::brealloc<T>(stack,
                                static_cast<size_t>(limit),
                                static_cast<size_t>(nl));
    limit = nl;
  }

  template <class T>
  forceinline
  DynamicStack<T>::DynamicStack(int n)
    : limit(n), tos(0), stack(Memory::bmalloc<T>(static_cast<size_t>(n))) {}

  template <class T>
  forceinline
  DynamicStack<T>::~DynamicStack(void) {
    Memory::free(stack);
  }

  template <class T>
  forceinline T
  DynamicStack<T>::pop(void) {
    return stack[--tos];
  }

  template <class T>
  forceinline T&
  DynamicStack<T>::top(void) {
    return stack[tos-1];
  }

  template <class T>
  forceinline void
  DynamicStack<T>::push(T x) {
    stack[tos++] = x;
    if (tos==limit)
      resize();
  }

  template <class T>
  forceinline bool
  DynamicStack<T>::empty(void) const {
    return tos==0;
  }

  template <class T>
  forceinline int
  DynamicStack<T>::entries(void) const {
    return tos;
  }

  template <class T>
  forceinline T&
  DynamicStack<T>::operator[](int i) {
    return stack[i];
  }

  template <class T>
  forceinline const T&
  DynamicStack<T>::operator[](int i) const {
    return stack[i];
  }

  template <class T>
  forceinline size_t
  DynamicStack<T>::size(void) const {
    return (static_cast<size_t>(limit) * sizeof(T)) + sizeof(DynamicStack<T>);
  }

}}

// STATISTICS: support-any
