/*
 *  Main authors:
 *     Mikael Lagerkvist <lagerkvist@gecode.org>
 *
 *  Copyright:
 *     Mikael Lagerkvist, 2005
 *
 *  Bugfixes provided by:
 *     Olof Sivertsson <olof@olofsivertsson.com>
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:05:26 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3513 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace MiniModel {

  template <class A>
  inline
  Matrix<A>::Slice::Slice(Matrix<A>& a,
			  unsigned int fc, unsigned int tc,
			  unsigned int fr, unsigned int tr)
    : _r(0), _fc(fc), _tc(tc), _fr(fr), _tr(tr) {
    if (tc > a.width() || tr > a.height())
      throw ArgumentOutOfRange("MiniModel::Matrix::Slice::Slice");
    if (fc >= tc || fr >= tr)
      throw ArgumentOutOfRange("MiniModel::Matrix::Slice::Slice");

    _r = args_type((tc-fc)*(tr-fr));

    int i = 0;
    for (unsigned int h = fr; h < tr; ++h) {
      for (unsigned int w = fc; w < tc; ++w) {
	_r[i++] = a(w, h);
      }
    }
  }

  template <class A>
  inline
  Matrix<A>::Slice::operator typename Matrix<A>::args_type(void) {
    return _r;
  }
  template <class A>
  inline
  Matrix<A>::Slice::operator Matrix<typename Matrix<A>::args_type>(void) {
    return Matrix<args_type>(_r, _tc-_fc, _tr-_fr);
  }


  template <class A>
  inline
  Matrix<A>::Matrix(A a, unsigned int w, unsigned int h)
    : _a(a), _w(w), _h(h) {
    if (_w * _h != static_cast<unsigned int>(_a.size()))
      throw ArgumentSizeMismatch("MiniModel::Matrix::Matrix(A, w, h)");
  }

  template <class A>
  inline
  Matrix<A>::Matrix(A a, unsigned int n)
    : _a(a), _w(n), _h(n) {
    if (n*n != static_cast<unsigned int>(_a.size()))
      throw ArgumentSizeMismatch("MiniModel::Matrix::Matrix(A, n)");
  }

  template <class A>
  inline unsigned int
  Matrix<A>::width(void) const  { return _w; }
  template <class A>
  inline unsigned int
  Matrix<A>::height(void) const { return _h; }
  template <class A>
  inline typename Matrix<A>::args_type const
  Matrix<A>::get_array(void) {
    return args_type(_a);
  }

  template <class A>
  inline typename Matrix<A>::value_type&
  Matrix<A>::operator()(unsigned int c, unsigned int r) {
    if (c >= _w || r >= _h)
      throw ArgumentOutOfRange("MiniModel::Matrix::operator()");

    return _a[r*_w + c];
  }

  template <class A>
  inline typename Matrix<A>::Slice
  Matrix<A>::slice(unsigned int fc, unsigned int tc,
		   unsigned int fr, unsigned int tr) {
    return Slice(*this, fc, tc, fr, tr);
  }

  template <class A>
  inline typename Matrix<A>::args_type
  Matrix<A>::row(int r) {
    return slice(0, width(), r, r+1);
  }

  template <class A>
  inline typename Matrix<A>::args_type
  Matrix<A>::col(int c) {
    return slice(c, c+1, 0, height());
  }

}}

// STATISTICS: minimodel-any
