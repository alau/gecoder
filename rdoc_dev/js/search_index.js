var search_data = {"index":{"longSearchIndex":["gecode","gecode::blockconstraint","gecode::bool","gecode::bool::boolconstraintreceiver","gecode::bool::boollinearoperations","gecode::bool::booloperand","gecode::bool::booleanconstraint","gecode::bool::expressionnode","gecode::bool::expressiontree","gecode::bool::linear","gecode::bool::linear::expressionnode","gecode::bool::linear::expressiontree","gecode::bool::linear::linearrelationconstraint","gecode::bool::shortcircuitequalityoperand","gecode::boolenum","gecode::boolenum::boolenumconstraintreceiver","gecode::boolenum::boolenumoperand","gecode::boolenum::channel","gecode::boolenum::channel::channelconstraint","gecode::boolenum::dummy","gecode::boolenum::extensional","gecode::boolenum::extensional::regexpconstraint","gecode::boolenum::extensional::tupleconstraint","gecode::boolenum::relation","gecode::boolenum::relation::boolenumconjunctionoperand","gecode::boolenum::relation::boolenumdisjunctionoperand","gecode::boolenummethods","gecode::boolvar","gecode::constraint","gecode::constraintreceiver","gecode::enummethods","gecode::enumerableview","gecode::fixnumenum","gecode::fixnumenum::dummy","gecode::fixnumenum::element","gecode::fixnumenum::element::elementintoperand","gecode::fixnumenum::fixnumenumoperand","gecode::fixnumenummethods","gecode::freevarbase","gecode::int","gecode::int::arithmetic","gecode::int::arithmetic::intabsoperand","gecode::int::arithmetic::intmultoperand","gecode::int::arithmetic::intsquarerootoperand","gecode::int::arithmetic::intsquaredoperand","gecode::int::channel","gecode::int::channel::channelconstraint","gecode::int::domain","gecode::int::domain::enumdomainconstraint","gecode::int::domain::rangedomainconstraint","gecode::int::intconstraintreceiver","gecode::int::intoperand","gecode::int::linear","gecode::int::linear::expressionnode","gecode::int::linear::expressiontree","gecode::int::linear::linearrelationconstraint","gecode::int::relation","gecode::int::relation::relationconstraint","gecode::int::shortcircuitequalityoperand","gecode::int::shortcircuitrelationsoperand","gecode::intenum","gecode::intenum::arithmetic","gecode::intenum::arithmetic::intenummaxoperand","gecode::intenum::arithmetic::intenumminoperand","gecode::intenum::channel","gecode::intenum::channel::channelconstraint","gecode::intenum::count","gecode::intenum::count::countconstraint","gecode::intenum::count::intenumcountoperand","gecode::intenum::distinct","gecode::intenum::distinct::distinctconstraint","gecode::intenum::dummy","gecode::intenum::element","gecode::intenum::element::elementintoperand","gecode::intenum::equality","gecode::intenum::equality::equalityconstraint","gecode::intenum::extensional","gecode::intenum::extensional::regexpconstraint","gecode::intenum::extensional::tupleconstraint","gecode::intenum::intenumconstraintreceiver","gecode::intenum::intenumoperand","gecode::intenum::sort","gecode::intenum::sort::sortconstraint","gecode::intenum::sort::sortconstraintwithoptions","gecode::intenummethods","gecode::intvar","gecode::logginglayer","gecode::missingconstrainterror","gecode::mixin","gecode::mixin::constants","gecode::model","gecode::nosolutionerror","gecode::operand","gecode::reifiableconstraint","gecode::searchabortederror","gecode::selectedset","gecode::selectedset::element","gecode::selectedset::element::disjointconstraint","gecode::selectedset::element::selectedsetintersectionoperand","gecode::selectedset::element::selectedsetunionoperand","gecode::selectedset::selectedsetconstraintreceiver","gecode::selectedset::selectedsetoperand","gecode::set","gecode::set::cardinality","gecode::set::cardinality::cardinalityconstraint","gecode::set::cardinality::setsizeoperand","gecode::set::channel","gecode::set::channel::channelconstraint","gecode::set::connection","gecode::set::connection::includeconstraint","gecode::set::connection::setmaxoperand","gecode::set::connection::setminoperand","gecode::set::connection::setsumoperand","gecode::set::domain","gecode::set::domain::domainconstraint","gecode::set::domain::equalitydomainconstraint","gecode::set::operation","gecode::set::operation::operationconstraint","gecode::set::operation::operationsetoperand","gecode::set::relation","gecode::set::relation::equalityrelationconstraint","gecode::set::relation::relationconstraint","gecode::set::setconstraintreceiver","gecode::set::setoperand","gecode::set::shortcircuitequalityoperand","gecode::set::shortcircuitrelationsoperand","gecode::set::util","gecode::setelements","gecode::setelements::relation","gecode::setelements::relation::relationconstraint","gecode::setelements::setelementsconstraintreceiver","gecode::setelements::setelementsoperand","gecode::setenum","gecode::setenum::channel","gecode::setenum::channel::intenumchannelconstraint","gecode::setenum::distinct","gecode::setenum::distinct::atmostoneconstraint","gecode::setenum::dummy","gecode::setenum::element","gecode::setenum::element::elementsetoperand","gecode::setenum::operation","gecode::setenum::operation::operationsetoperand","gecode::setenum::setenumconstraintreceiver","gecode::setenum::setenumoperand","gecode::setenummethods","gecode::setvar","gecode::util","gecode::util::enummatrix","gecode::util::extensional","gecode::util::matrixenummethods","gecode::variableenummethods","gecoder","gecoderaw","gecoderaw::space","object","rust","rust::bindings","gecode::bool::booloperand#&()","gecode::reifiableconstraint#&()","gecode::bool::boollinearoperations#*()","gecode::bool::booloperand#*()","gecode::int::intoperand#*()","gecode::bool::boollinearoperations#+()","gecode::bool::booloperand#+()","gecode::int::intoperand#+()","gecode::bool::boollinearoperations#-()","gecode::bool::booloperand#-()","gecode::int::intoperand#-()","gecode::int::intconstraintreceiver#<()","gecode::setelements::setelementsconstraintreceiver#<()","gecode::int::intconstraintreceiver#<=()","gecode::setelements::setelementsconstraintreceiver#<=()","gecode::bool::boolconstraintreceiver#==()","gecode::int::intconstraintreceiver#==()","gecode::set::setconstraintreceiver#==()","gecode::setelements::setelementsconstraintreceiver#==()","gecode::int::intconstraintreceiver#>()","gecode::setelements::setelementsconstraintreceiver#>()","gecode::int::intconstraintreceiver#>=()","gecode::setelements::setelementsconstraintreceiver#>=()","gecode::freevar()","gecode::fixnumenum::fixnumenumoperand::[]()","gecode::intenum::intenumoperand::[]()","gecode::setenum::setenumoperand::[]()","gecode::bool::booloperand#^()","gecode::int::intoperand#abs()","gecode::enummethods#active_space()","gecode::mixin#active_space()","gecode::mixin#add_constraint()","gecode::mixin#add_interaction()","gecode::mixin#allow_space_access()","gecode::mixin#any()","gecode::mixin#at_least_once()","gecode::mixin#at_most_once()","gecode::setenum::setenumconstraintreceiver#at_most_share_one_element()","gecode::boolenummethods#bind_array()","gecode::intenummethods#bind_array()","gecode::setenummethods#bind_array()","gecode::mixin#bool_var()","gecode::mixin#bool_var_array()","gecode::mixin#bool_var_matrix()","gecode::mixin#branch_on()","gecode::setvar#cardinality()","gecode::boolenum::boolenumconstraintreceiver#channel()","gecode::intenum::intenumconstraintreceiver#channel()","gecode::set::setconstraintreceiver#channel()","gecode::setenum::setenumconstraintreceiver#channel()","gecode::util::enummatrix#column()","gecode::mixin#combined_method_missing()","gecode::set::setconstraintreceiver#complement()","gecode::boolenum::boolenumoperand#conjunction()","gecode::logginglayer::const_missing()","gecode::util#constant_set?()","gecode::util#constant_set_to_int_set()","gecode::util#constant_set_to_params()","gecode::mixin::constrain()","gecoderaw::space#constrain()","gecode::boolenum::relation::boolenumconjunctionoperand#constrain_equal()","gecode::boolenum::relation::boolenumdisjunctionoperand#constrain_equal()","gecode::fixnumenum::element::elementintoperand#constrain_equal()","gecode::int::arithmetic::intabsoperand#constrain_equal()","gecode::int::arithmetic::intmultoperand#constrain_equal()","gecode::int::arithmetic::intsquarerootoperand#constrain_equal()","gecode::int::arithmetic::intsquaredoperand#constrain_equal()","gecode::intenum::arithmetic::intenummaxoperand#constrain_equal()","gecode::intenum::arithmetic::intenumminoperand#constrain_equal()","gecode::intenum::element::elementintoperand#constrain_equal()","gecode::selectedset::element::selectedsetintersectionoperand#constrain_equal()","gecode::selectedset::element::selectedsetunionoperand#constrain_equal()","gecode::set::cardinality::setsizeoperand#constrain_equal()","gecode::set::connection::setmaxoperand#constrain_equal()","gecode::set::connection::setminoperand#constrain_equal()","gecode::set::connection::setsumoperand#constrain_equal()","gecode::setenum::element::elementsetoperand#constrain_equal()","gecode::setenum::operation::operationsetoperand#constrain_equal()","gecode::mixin::constrain_proc=()","gecode::bool::linear::expressiontree#construct_receiver()","gecode::bool::shortcircuitequalityoperand#construct_receiver()","gecode::int::shortcircuitequalityoperand#construct_receiver()","gecode::int::shortcircuitrelationsoperand#construct_receiver()","gecode::set::cardinality::setsizeoperand#construct_receiver()","gecode::set::shortcircuitequalityoperand#construct_receiver()","gecode::set::shortcircuitrelationsoperand#construct_receiver()","gecode::intenum::intenumoperand#count()","gecode::set::util#decode_options()","gecode::util#decode_options()","gecode::selectedset::selectedsetconstraintreceiver#disjoint()","gecode::set::setconstraintreceiver#disjoint()","gecode::fixnumenum::fixnumenumoperand#disjoint_union()","gecode::set::setoperand#disjoint_union()","gecode::setenum::setenumoperand#disjoint_union()","gecode::boolenum::boolenumoperand#disjunction()","gecode::intenum::intenumconstraintreceiver#distinct()","gecode::intvar#domain()","gecode::fixnumenummethods#domain_range()","gecode::intenummethods#domain_range()","gecode::enumerableview#each()","gecode::util::matrixenummethods#each()","gecode::mixin#each_solution()","gecode::set::setoperand#elements()","gecode::intenum::intenumconstraintreceiver#equal()","gecode::util#extract_propagation_options()","gecode::bool::boolconstraintreceiver#false()","gecode::mixin#gecode_interaction_queue()","gecode::bool::booloperand#implies()","gecode::bool::boolconstraintreceiver#imply()","gecode::boolenum::boolenumconstraintreceiver#in()","gecode::int::intconstraintreceiver#in()","gecode::intenum::intenumconstraintreceiver#in()","gecode::set::setconstraintreceiver#include()","gecode::fixnumenum::fixnumenumoperand::included()","gecode::intenum::intenumoperand::included()","gecode::mixin::included()","gecode::setenum::setenumoperand::included()","gecode::freevarbase#inspect()","gecode::mixin#int_var()","gecode::mixin#int_var_array()","gecode::mixin#int_var_matrix()","gecode::fixnumenum::fixnumenumoperand#intersection()","gecode::selectedset::selectedsetoperand#intersection()","gecode::set::setoperand#intersection()","gecode::setenum::setenumoperand#intersection()","gecode::load_bindings_lib()","gecode::logginglayer::logger()","gecode::setvar#lower_bound()","gecode::boolenum::boolenumconstraintreceiver#match()","gecode::intenum::intenumconstraintreceiver#match()","gecode::intenum::intenumoperand#max()","gecode::set::setoperand#max()","gecode::maximize()","gecode::mixin#maximize!()","gecode::mixin::method_added()","gecode::bool::booloperand#method_missing()","gecode::boolenum::boolenumoperand#method_missing()","gecode::fixnumenum::fixnumenumoperand#method_missing()","gecode::int::intoperand#method_missing()","gecode::intenum::intenumoperand#method_missing()","gecode::logginglayer::method_missing()","gecode::mixin#method_missing()","gecode::set::setoperand#method_missing()","gecode::setenum::setenumoperand#method_missing()","gecode::intenum::intenumoperand#min()","gecode::set::setoperand#min()","gecode::minimize()","gecode::mixin#minimize!()","gecode::util::enummatrix#minor()","gecode::fixnumenum::fixnumenumoperand#minus()","gecode::set::setoperand#minus()","gecode::bool::expressiontree#model()","gecode::operand#model()","gecode::selectedset::selectedsetoperand#model()","gecode::setelements::setelementsoperand#model()","gecode::operand#must()","gecode::operand#must_be()","gecode::operand#must_not()","gecode::operand#must_not_be()","gecode::new()","gecode::blockconstraint::new()","gecode::bool::boolconstraintreceiver::new()","gecode::bool::expressionnode::new()","gecode::bool::expressiontree::new()","gecode::bool::linear::expressionnode::new()","gecode::bool::linear::expressiontree::new()","gecode::bool::shortcircuitequalityoperand::new()","gecode::boolenum::boolenumconstraintreceiver::new()","gecode::boolenum::relation::boolenumconjunctionoperand::new()","gecode::boolenum::relation::boolenumdisjunctionoperand::new()","gecode::constraint::new()","gecode::constraintreceiver::new()","gecode::enumerableview::new()","gecode::fixnumenum::element::elementintoperand::new()","gecode::freevarbase::new()","gecode::int::arithmetic::intabsoperand::new()","gecode::int::arithmetic::intmultoperand::new()","gecode::int::arithmetic::intsquarerootoperand::new()","gecode::int::arithmetic::intsquaredoperand::new()","gecode::int::intconstraintreceiver::new()","gecode::int::linear::expressionnode::new()","gecode::int::linear::expressiontree::new()","gecode::int::shortcircuitequalityoperand::new()","gecode::int::shortcircuitrelationsoperand::new()","gecode::intenum::arithmetic::intenummaxoperand::new()","gecode::intenum::arithmetic::intenumminoperand::new()","gecode::intenum::count::intenumcountoperand::new()","gecode::intenum::element::elementintoperand::new()","gecode::intenum::intenumconstraintreceiver::new()","gecode::nosolutionerror::new()","gecode::searchabortederror::new()","gecode::selectedset::element::selectedsetintersectionoperand::new()","gecode::selectedset::element::selectedsetunionoperand::new()","gecode::selectedset::selectedsetconstraintreceiver::new()","gecode::selectedset::selectedsetoperand::new()","gecode::set::cardinality::setsizeoperand::new()","gecode::set::connection::setmaxoperand::new()","gecode::set::connection::setminoperand::new()","gecode::set::connection::setsumoperand::new()","gecode::set::operation::operationsetoperand::new()","gecode::set::setconstraintreceiver::new()","gecode::set::shortcircuitequalityoperand::new()","gecode::set::shortcircuitrelationsoperand::new()","gecode::setelements::setelementsconstraintreceiver::new()","gecode::setelements::setelementsoperand::new()","gecode::setenum::element::elementsetoperand::new()","gecode::setenum::operation::operationsetoperand::new()","gecode::setenum::setenumconstraintreceiver::new()","gecode::mixin#optimize!()","gecode::util::extensional#parse_regexp()","gecode::util::extensional#perform_tuple_checks()","gecode::blockconstraint#post()","gecode::bool::booleanconstraint#post()","gecode::bool::linear::linearrelationconstraint#post()","gecode::boolenum::channel::channelconstraint#post()","gecode::boolenum::extensional::regexpconstraint#post()","gecode::boolenum::extensional::tupleconstraint#post()","gecode::constraint#post()","gecode::int::channel::channelconstraint#post()","gecode::int::domain::enumdomainconstraint#post()","gecode::int::domain::rangedomainconstraint#post()","gecode::int::linear::linearrelationconstraint#post()","gecode::int::relation::relationconstraint#post()","gecode::intenum::channel::channelconstraint#post()","gecode::intenum::count::countconstraint#post()","gecode::intenum::distinct::distinctconstraint#post()","gecode::intenum::equality::equalityconstraint#post()","gecode::intenum::extensional::regexpconstraint#post()","gecode::intenum::extensional::tupleconstraint#post()","gecode::intenum::sort::sortconstraint#post()","gecode::intenum::sort::sortconstraintwithoptions#post()","gecode::selectedset::element::disjointconstraint#post()","gecode::set::cardinality::cardinalityconstraint#post()","gecode::set::channel::channelconstraint#post()","gecode::set::connection::includeconstraint#post()","gecode::set::domain::domainconstraint#post()","gecode::set::domain::equalitydomainconstraint#post()","gecode::set::operation::operationconstraint#post()","gecode::set::relation::equalityrelationconstraint#post()","gecode::set::relation::relationconstraint#post()","gecode::setelements::relation::relationconstraint#post()","gecode::setenum::channel::intenumchannelconstraint#post()","gecode::setenum::distinct::atmostoneconstraint#post()","gecode::int::intoperand#pre_arith_mult()","gecode::bool::linear::expressiontree#pre_bool_construct_receiver()","gecode::set::cardinality::setsizeoperand#pre_cardinality_construct_receiver()","gecode::int::intconstraintreceiver#pre_channel_equals()","gecode::fixnumenum::fixnumenumoperand::pre_element_included()","gecode::intenum::intenumoperand::pre_element_included()","gecode::set::setconstraintreceiver#pre_relation_complement()","gecode::set::setconstraintreceiver#pre_relation_disjoint()","gecode::set::setconstraintreceiver#pre_relation_equality()","gecode::set::setconstraintreceiver#pre_relation_subset()","gecode::set::setconstraintreceiver#pre_relation_superset()","gecode::setenum::setenumoperand::pre_set_element_included()","gecode::reifiableconstraint#reification_var()","gecode::reifiableconstraint#reification_var=()","gecode::bool::linear::expressiontree#relation_constraint()","gecode::int::linear::expressiontree#relation_constraint()","gecode::int::shortcircuitrelationsoperand#relation_constraint()","gecode::intenum::count::intenumcountoperand#relation_constraint()","gecode::set::operation::operationsetoperand#relation_constraint()","gecode::set::shortcircuitrelationsoperand#relation_constraint()","gecode::mixin#repeat()","gecode::mixin#reset!()","gecode::util::enummatrix#row()","gecode::mixin#search_stats()","gecode::mixin#set_var()","gecode::mixin#set_var_array()","gecode::mixin#set_var_matrix()","gecode::set::setoperand#size()","gecode::mixin#solution()","gecode::solve()","gecode::mixin#solve!()","gecode::intenum::intenumconstraintreceiver#sorted()","gecode::int::intoperand#sqrt()","gecode::int::intoperand#square_root()","gecode::int::intoperand#squared()","gecode::set::setconstraintreceiver#subset()","gecode::set::setoperand#sum()","gecode::set::setconstraintreceiver#superset()","gecode::boolenummethods#to_bool_enum()","gecode::bool::expressiontree#to_bool_var()","gecode::bool::shortcircuitequalityoperand#to_bool_var()","gecode::boolvar#to_bool_var()","gecode::fixnumenummethods#to_fixnum_enum()","gecode::intenummethods#to_int_enum()","gecode::int::shortcircuitequalityoperand#to_int_var()","gecode::int::shortcircuitrelationsoperand#to_int_var()","gecode::intvar#to_int_var()","gecode::bool::expressionnode#to_minimodel_bool_expr()","gecode::bool::expressiontree#to_minimodel_bool_expr()","gecode::bool::linear::expressionnode#to_minimodel_lin_exp()","gecode::bool::linear::expressiontree#to_minimodel_lin_exp()","gecode::int::linear::expressionnode#to_minimodel_lin_exp()","gecode::int::linear::expressiontree#to_minimodel_lin_exp()","gecode::selectedset::selectedsetoperand#to_selected_set()","gecode::setelements::setelementsoperand#to_set_elements()","gecode::setenummethods#to_set_enum()","gecode::set::shortcircuitequalityoperand#to_set_var()","gecode::set::shortcircuitrelationsoperand#to_set_var()","gecode::setvar#to_set_var()","gecode::mixin#track_variable()","gecode::bool::boolconstraintreceiver#true()","gecode::fixnumenum::fixnumenumoperand#union()","gecode::selectedset::selectedsetoperand#union()","gecode::set::setoperand#union()","gecode::setenum::setenumoperand#union()","gecode::setvar#upper_bound()","gecode::setenummethods#upper_bound_range()","gecode::boolvar#value()","gecode::intvar#value()","gecode::setvar#value()","gecode::variableenummethods#values()","gecode::mixin#wrap_enum()","gecode::bool::booloperand#|()","gecode::reifiableconstraint#|()"],"searchIndex":["gecode","blockconstraint","bool","boolconstraintreceiver","boollinearoperations","booloperand","booleanconstraint","expressionnode","expressiontree","linear","expressionnode","expressiontree","linearrelationconstraint","shortcircuitequalityoperand","boolenum","boolenumconstraintreceiver","boolenumoperand","channel","channelconstraint","dummy","extensional","regexpconstraint","tupleconstraint","relation","boolenumconjunctionoperand","boolenumdisjunctionoperand","boolenummethods","boolvar","constraint","constraintreceiver","enummethods","enumerableview","fixnumenum","dummy","element","elementintoperand","fixnumenumoperand","fixnumenummethods","freevarbase","int","arithmetic","intabsoperand","intmultoperand","intsquarerootoperand","intsquaredoperand","channel","channelconstraint","domain","enumdomainconstraint","rangedomainconstraint","intconstraintreceiver","intoperand","linear","expressionnode","expressiontree","linearrelationconstraint","relation","relationconstraint","shortcircuitequalityoperand","shortcircuitrelationsoperand","intenum","arithmetic","intenummaxoperand","intenumminoperand","channel","channelconstraint","count","countconstraint","intenumcountoperand","distinct","distinctconstraint","dummy","element","elementintoperand","equality","equalityconstraint","extensional","regexpconstraint","tupleconstraint","intenumconstraintreceiver","intenumoperand","sort","sortconstraint","sortconstraintwithoptions","intenummethods","intvar","logginglayer","missingconstrainterror","mixin","constants","model","nosolutionerror","operand","reifiableconstraint","searchabortederror","selectedset","element","disjointconstraint","selectedsetintersectionoperand","selectedsetunionoperand","selectedsetconstraintreceiver","selectedsetoperand","set","cardinality","cardinalityconstraint","setsizeoperand","channel","channelconstraint","connection","includeconstraint","setmaxoperand","setminoperand","setsumoperand","domain","domainconstraint","equalitydomainconstraint","operation","operationconstraint","operationsetoperand","relation","equalityrelationconstraint","relationconstraint","setconstraintreceiver","setoperand","shortcircuitequalityoperand","shortcircuitrelationsoperand","util","setelements","relation","relationconstraint","setelementsconstraintreceiver","setelementsoperand","setenum","channel","intenumchannelconstraint","distinct","atmostoneconstraint","dummy","element","elementsetoperand","operation","operationsetoperand","setenumconstraintreceiver","setenumoperand","setenummethods","setvar","util","enummatrix","extensional","matrixenummethods","variableenummethods","gecoder","gecoderaw","space","object","rust","bindings","&()","&()","*()","*()","*()","+()","+()","+()","-()","-()","-()","<()","<()","<=()","<=()","==()","==()","==()","==()",">()",">()",">=()",">=()","freevar()","[]()","[]()","[]()","^()","abs()","active_space()","active_space()","add_constraint()","add_interaction()","allow_space_access()","any()","at_least_once()","at_most_once()","at_most_share_one_element()","bind_array()","bind_array()","bind_array()","bool_var()","bool_var_array()","bool_var_matrix()","branch_on()","cardinality()","channel()","channel()","channel()","channel()","column()","combined_method_missing()","complement()","conjunction()","const_missing()","constant_set?()","constant_set_to_int_set()","constant_set_to_params()","constrain()","constrain()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_equal()","constrain_proc=()","construct_receiver()","construct_receiver()","construct_receiver()","construct_receiver()","construct_receiver()","construct_receiver()","construct_receiver()","count()","decode_options()","decode_options()","disjoint()","disjoint()","disjoint_union()","disjoint_union()","disjoint_union()","disjunction()","distinct()","domain()","domain_range()","domain_range()","each()","each()","each_solution()","elements()","equal()","extract_propagation_options()","false()","gecode_interaction_queue()","implies()","imply()","in()","in()","in()","include()","included()","included()","included()","included()","inspect()","int_var()","int_var_array()","int_var_matrix()","intersection()","intersection()","intersection()","intersection()","load_bindings_lib()","logger()","lower_bound()","match()","match()","max()","max()","maximize()","maximize!()","method_added()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","min()","min()","minimize()","minimize!()","minor()","minus()","minus()","model()","model()","model()","model()","must()","must_be()","must_not()","must_not_be()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","optimize!()","parse_regexp()","perform_tuple_checks()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","post()","pre_arith_mult()","pre_bool_construct_receiver()","pre_cardinality_construct_receiver()","pre_channel_equals()","pre_element_included()","pre_element_included()","pre_relation_complement()","pre_relation_disjoint()","pre_relation_equality()","pre_relation_subset()","pre_relation_superset()","pre_set_element_included()","reification_var()","reification_var=()","relation_constraint()","relation_constraint()","relation_constraint()","relation_constraint()","relation_constraint()","relation_constraint()","repeat()","reset!()","row()","search_stats()","set_var()","set_var_array()","set_var_matrix()","size()","solution()","solve()","solve!()","sorted()","sqrt()","square_root()","squared()","subset()","sum()","superset()","to_bool_enum()","to_bool_var()","to_bool_var()","to_bool_var()","to_fixnum_enum()","to_int_enum()","to_int_var()","to_int_var()","to_int_var()","to_minimodel_bool_expr()","to_minimodel_bool_expr()","to_minimodel_lin_exp()","to_minimodel_lin_exp()","to_minimodel_lin_exp()","to_minimodel_lin_exp()","to_selected_set()","to_set_elements()","to_set_enum()","to_set_var()","to_set_var()","to_set_var()","track_variable()","true()","union()","union()","union()","union()","upper_bound()","upper_bound_range()","value()","value()","value()","values()","wrap_enum()","|()","|()"],"info":[["Gecode","","Gecode.html","","<p>Problems can be formulated and solved either through defining a new class\nthat mixes in Gecode::Mixin …\n"],["Gecode::BlockConstraint","","Gecode/BlockConstraint.html","","<p>A constraint that can be specified by providing a block containing the post\nmethod.\n"],["Gecode::Bool","","Gecode/Bool.html","","<p>A module that deals with the operands, properties and constraints of\nboolean operands.\n"],["Gecode::Bool::BoolConstraintReceiver","","Gecode/Bool/BoolConstraintReceiver.html","","<p>BoolConstraintReceiver contains all constraints that can be placed on a\nBoolOperand.\n<p>Constraints are placed …\n"],["Gecode::Bool::BoolLinearOperations","","Gecode/Bool/BoolLinearOperations.html","",""],["Gecode::Bool::BoolOperand","","Gecode/Bool/BoolOperand.html","","<p>A BoolOperand is a combination of variables on which the constraints\ndefined in BoolConstraintReceiver …\n"],["Gecode::Bool::BooleanConstraint","","Gecode/Bool/BooleanConstraint.html","",""],["Gecode::Bool::ExpressionNode","","Gecode/Bool/ExpressionNode.html","","<p>Describes a single node in a boolean expression.\n"],["Gecode::Bool::ExpressionTree","","Gecode/Bool/ExpressionTree.html","","<p>Describes a binary tree of expression nodes which together form a boolean \nexpression.\n"],["Gecode::Bool::Linear","","Gecode/Bool/Linear.html","","<p>A module that gathers the classes and modules used in linear constraints.\n"],["Gecode::Bool::Linear::ExpressionNode","","Gecode/Bool/Linear/ExpressionNode.html","","<p>Describes a single node in a linear expression.\n"],["Gecode::Bool::Linear::ExpressionTree","","Gecode/Bool/Linear/ExpressionTree.html","","<p>Describes a binary tree of expression nodes which together form a linear \nexpression.\n"],["Gecode::Bool::Linear::LinearRelationConstraint","","Gecode/Bool/Linear/LinearRelationConstraint.html","",""],["Gecode::Bool::ShortCircuitEqualityOperand","","Gecode/Bool/ShortCircuitEqualityOperand.html","","<p>An operand that short circuits boolean equality.\n"],["Gecode::BoolEnum","","Gecode/BoolEnum.html","","<p>A module containing constraints that have enumerations of boolean  operands\nas left hand side.\n"],["Gecode::BoolEnum::BoolEnumConstraintReceiver","","Gecode/BoolEnum/BoolEnumConstraintReceiver.html","","<p>BoolEnumConstraintReceiver contains all constraints that can be placed on a\nBoolEnumOperand.\n<p>Constraints …\n"],["Gecode::BoolEnum::BoolEnumOperand","","Gecode/BoolEnum/BoolEnumOperand.html","","<p>A BoolEnumOperand is a enumeration of BoolOperand on which the constraints\ndefined in BoolEnumConstraintReceiver …\n"],["Gecode::BoolEnum::Channel","","Gecode/BoolEnum/Channel.html","","<p>A module that gathers the classes and modules used in channel constraints\ninvolving one boolean enum …\n"],["Gecode::BoolEnum::Channel::ChannelConstraint","","Gecode/BoolEnum/Channel/ChannelConstraint.html","",""],["Gecode::BoolEnum::Dummy","","Gecode/BoolEnum/Dummy.html","","<p>A dummy class that just shows what methods a bool enum responds to.\n"],["Gecode::BoolEnum::Extensional","","Gecode/BoolEnum/Extensional.html","","<p>A module that gathers the classes and modules used in extensional \nconstraints.\n"],["Gecode::BoolEnum::Extensional::RegexpConstraint","","Gecode/BoolEnum/Extensional/RegexpConstraint.html","",""],["Gecode::BoolEnum::Extensional::TupleConstraint","","Gecode/BoolEnum/Extensional/TupleConstraint.html","",""],["Gecode::BoolEnum::Relation","","Gecode/BoolEnum/Relation.html","","<p>A module that gathers the classes and modules used by boolean enumeration \nrelation constraints.\n"],["Gecode::BoolEnum::Relation::BoolEnumConjunctionOperand","","Gecode/BoolEnum/Relation/BoolEnumConjunctionOperand.html","",""],["Gecode::BoolEnum::Relation::BoolEnumDisjunctionOperand","","Gecode/BoolEnum/Relation/BoolEnumDisjunctionOperand.html","",""],["Gecode::BoolEnumMethods","","Gecode/BoolEnumMethods.html","","<p>A module containing the methods needed by enumerations containing boolean\noperands. Requires that it’s …\n"],["Gecode::BoolVar","","Gecode/BoolVar.html","","<p>Describes a boolean variable.\n<p>A boolean variable can be either true or false.\n<p>Boolean variables are boolean …\n"],["Gecode::Constraint","","Gecode/Constraint.html","","<p>Base class for all constraints.\n"],["Gecode::ConstraintReceiver","","Gecode/ConstraintReceiver.html","","<p>Describes a constraint receiver, something that receives and  places\nconstraints on various Operand. …\n"],["Gecode::EnumMethods","","Gecode/EnumMethods.html","","<p>A module containing the methods needed by enumerations containing operands.\n"],["Gecode::EnumerableView","","Gecode/EnumerableView.html","","<p>Describes an immutable view of an enumerable.\n"],["Gecode::FixnumEnum","","Gecode/FixnumEnum.html","","<p>A module containing constraints that have enumerations of instances of\nFixnum as left hand side.\n"],["Gecode::FixnumEnum::Dummy","","Gecode/FixnumEnum/Dummy.html","","<p>A dummy class that just shows what methods a fixnum enum responds to.\n"],["Gecode::FixnumEnum::Element","","Gecode/FixnumEnum/Element.html","",""],["Gecode::FixnumEnum::Element::ElementIntOperand","","Gecode/FixnumEnum/Element/ElementIntOperand.html","",""],["Gecode::FixnumEnum::FixnumEnumOperand","","Gecode/FixnumEnum/FixnumEnumOperand.html","","<p>A FixnumEnumOperand is a enumeration of Fixnum on which the constraints\ndefined in FixnumEnumConstraintReceiver …\n"],["Gecode::FixnumEnumMethods","","Gecode/FixnumEnumMethods.html","","<p>A module containing the methods needed by enumerations containing fixnums. \nRequires that it’s included …\n"],["Gecode::FreeVarBase","","Gecode/FreeVarBase.html","","<p>Describes a variable that is bound to a model, but not to a particular \nspace.\n"],["Gecode::Int","","Gecode/Int.html","","<p>A module that deals with the operands, properties and constraints of\ninteger variables.\n"],["Gecode::Int::Arithmetic","","Gecode/Int/Arithmetic.html","","<p>A module that gathers the classes and modules used by arithmetic \nconstraints.\n"],["Gecode::Int::Arithmetic::IntAbsOperand","","Gecode/Int/Arithmetic/IntAbsOperand.html","",""],["Gecode::Int::Arithmetic::IntMultOperand","","Gecode/Int/Arithmetic/IntMultOperand.html","",""],["Gecode::Int::Arithmetic::IntSquareRootOperand","","Gecode/Int/Arithmetic/IntSquareRootOperand.html","",""],["Gecode::Int::Arithmetic::IntSquaredOperand","","Gecode/Int/Arithmetic/IntSquaredOperand.html","",""],["Gecode::Int::Channel","","Gecode/Int/Channel.html","","<p>A module that gathers the classes and modules used in channel constraints\ninvolving a single integer …\n"],["Gecode::Int::Channel::ChannelConstraint","","Gecode/Int/Channel/ChannelConstraint.html","",""],["Gecode::Int::Domain","","Gecode/Int/Domain.html","","<p>A module that gathers the classes and modules used in domain constraints.\n"],["Gecode::Int::Domain::EnumDomainConstraint","","Gecode/Int/Domain/EnumDomainConstraint.html","","<p>Enum domain constraints specify that an integer operand must be contained\nin an enumeration of integers. …\n"],["Gecode::Int::Domain::RangeDomainConstraint","","Gecode/Int/Domain/RangeDomainConstraint.html","","<p>Range domain constraints specify that an integer operand must be  contained\nwithin a specified range …\n"],["Gecode::Int::IntConstraintReceiver","","Gecode/Int/IntConstraintReceiver.html","","<p>IntConstraintReceiver contains all constraints that can be placed on an\nIntOperand.\n<p>Constraints are placed …\n"],["Gecode::Int::IntOperand","","Gecode/Int/IntOperand.html","","<p>A IntOperand is a combination of variables on which the constraints defined\nin IntConstraintReceiver …\n"],["Gecode::Int::Linear","","Gecode/Int/Linear.html","","<p>A module that gathers the classes and modules used in linear constraints.\n"],["Gecode::Int::Linear::ExpressionNode","","Gecode/Int/Linear/ExpressionNode.html","","<p>Describes a single node in a linear expression.\n"],["Gecode::Int::Linear::ExpressionTree","","Gecode/Int/Linear/ExpressionTree.html","","<p>Describes a binary tree of expression nodes which together form a linear \nexpression.\n"],["Gecode::Int::Linear::LinearRelationConstraint","","Gecode/Int/Linear/LinearRelationConstraint.html","",""],["Gecode::Int::Relation","","Gecode/Int/Relation.html","","<p>A module that gathers the classes and modules used in relation constraints.\n"],["Gecode::Int::Relation::RelationConstraint","","Gecode/Int/Relation/RelationConstraint.html","",""],["Gecode::Int::ShortCircuitEqualityOperand","","Gecode/Int/ShortCircuitEqualityOperand.html","","<p>An operand that short circuits integer equality.\n"],["Gecode::Int::ShortCircuitRelationsOperand","","Gecode/Int/ShortCircuitRelationsOperand.html","","<p>An operand that short circuits integer relation constraints.\n"],["Gecode::IntEnum","","Gecode/IntEnum.html","","<p>A module containing constraints that have enumerations of integer  operands\nas left hand side.\n"],["Gecode::IntEnum::Arithmetic","","Gecode/IntEnum/Arithmetic.html","","<p>A module that gathers the classes and modules used by arithmetic \nconstraints.\n"],["Gecode::IntEnum::Arithmetic::IntEnumMaxOperand","","Gecode/IntEnum/Arithmetic/IntEnumMaxOperand.html","",""],["Gecode::IntEnum::Arithmetic::IntEnumMinOperand","","Gecode/IntEnum/Arithmetic/IntEnumMinOperand.html","",""],["Gecode::IntEnum::Channel","","Gecode/IntEnum/Channel.html","","<p>A module that gathers the classes and modules used in channel constraints.\n"],["Gecode::IntEnum::Channel::ChannelConstraint","","Gecode/IntEnum/Channel/ChannelConstraint.html","",""],["Gecode::IntEnum::Count","","Gecode/IntEnum/Count.html","","<p>A module that gathers the classes and modules used in count constraints.\n"],["Gecode::IntEnum::Count::CountConstraint","","Gecode/IntEnum/Count/CountConstraint.html","",""],["Gecode::IntEnum::Count::IntEnumCountOperand","","Gecode/IntEnum/Count/IntEnumCountOperand.html","",""],["Gecode::IntEnum::Distinct","","Gecode/IntEnum/Distinct.html","","<p>A module that gathers the classes and modules used in distinct constraints.\n"],["Gecode::IntEnum::Distinct::DistinctConstraint","","Gecode/IntEnum/Distinct/DistinctConstraint.html","",""],["Gecode::IntEnum::Dummy","","Gecode/IntEnum/Dummy.html","","<p>A dummy class that just shows what methods an int enum responds to.\n"],["Gecode::IntEnum::Element","","Gecode/IntEnum/Element.html","",""],["Gecode::IntEnum::Element::ElementIntOperand","","Gecode/IntEnum/Element/ElementIntOperand.html","",""],["Gecode::IntEnum::Equality","","Gecode/IntEnum/Equality.html","","<p>A module that gathers the classes and modules used in equality constraints.\n"],["Gecode::IntEnum::Equality::EqualityConstraint","","Gecode/IntEnum/Equality/EqualityConstraint.html","",""],["Gecode::IntEnum::Extensional","","Gecode/IntEnum/Extensional.html","","<p>A module that gathers the classes and modules used in extensional \nconstraints.\n"],["Gecode::IntEnum::Extensional::RegexpConstraint","","Gecode/IntEnum/Extensional/RegexpConstraint.html","",""],["Gecode::IntEnum::Extensional::TupleConstraint","","Gecode/IntEnum/Extensional/TupleConstraint.html","",""],["Gecode::IntEnum::IntEnumConstraintReceiver","","Gecode/IntEnum/IntEnumConstraintReceiver.html","","<p>IntEnumConstraintReceiver contains all constraints that can be placed on a\nIntEnumOperand.\n<p>Constraints …\n"],["Gecode::IntEnum::IntEnumOperand","","Gecode/IntEnum/IntEnumOperand.html","","<p>A IntEnumOperand is a enumeration of IntOperand on which the constraints\ndefined in IntEnumConstraintReceiver …\n"],["Gecode::IntEnum::Sort","","Gecode/IntEnum/Sort.html","","<p>A module that gathers the classes and modules used in sort constraints.\n"],["Gecode::IntEnum::Sort::SortConstraint","","Gecode/IntEnum/Sort/SortConstraint.html","",""],["Gecode::IntEnum::Sort::SortConstraintWithOptions","","Gecode/IntEnum/Sort/SortConstraintWithOptions.html","",""],["Gecode::IntEnumMethods","","Gecode/IntEnumMethods.html","","<p>A module containing the methods needed by enumerations containing int \noperands. Requires that it’s included …\n"],["Gecode::IntVar","","Gecode/IntVar.html","","<p>Describes an integer variable.\n<p>An integer variable can take the value of any integer in its  domain, …\n"],["Gecode::LoggingLayer","","Gecode/LoggingLayer.html","","<p>Describes a layer that delegates to GecodeRaw only after having logged the \ncall.\n"],["Gecode::MissingConstraintError","","Gecode/MissingConstraintError.html","","<p>An error signaling that the constraint specified is missing (e.g. one tried\nto negate a constraint, but …\n"],["Gecode::Mixin","","Gecode/Mixin.html","","<p>Mixin contains the base functionality needed to formulate problems.\n<p>Formulating problems\n<p>Problems are formulated …\n"],["Gecode::Mixin::Constants","","Gecode/Mixin/Constants.html","","<p>This is a hack to get RDoc to ignore the constants.\n"],["Gecode::Model","","Gecode/Model.html","","<p>A convenient class that just includes Gecode::Mixin. Can be useful when you\ndon’t want to create your …\n"],["Gecode::NoSolutionError","","Gecode/NoSolutionError.html","","<p>An exception raised when a search failed because there are no solutions.\n"],["Gecode::Operand","","Gecode/Operand.html","","<p>Describes an operand, something that a constraint can be placed on.\nConstraints are placed by calling …\n"],["Gecode::ReifiableConstraint","","Gecode/ReifiableConstraint.html","","<p>Base class for all reifiable constraints.\n"],["Gecode::SearchAbortedError","","Gecode/SearchAbortedError.html","","<p>An exception raised when a search has been aborted due to e.g. hitting the\ntime limit specified when …\n"],["Gecode::SelectedSet","","Gecode/SelectedSet.html","","<p>A module containing constraints that have set_enum as left hand side.\n"],["Gecode::SelectedSet::Element","","Gecode/SelectedSet/Element.html","",""],["Gecode::SelectedSet::Element::DisjointConstraint","","Gecode/SelectedSet/Element/DisjointConstraint.html","",""],["Gecode::SelectedSet::Element::SelectedSetIntersectionOperand","","Gecode/SelectedSet/Element/SelectedSetIntersectionOperand.html","",""],["Gecode::SelectedSet::Element::SelectedSetUnionOperand","","Gecode/SelectedSet/Element/SelectedSetUnionOperand.html","",""],["Gecode::SelectedSet::SelectedSetConstraintReceiver","","Gecode/SelectedSet/SelectedSetConstraintReceiver.html","","<p>SelectedSetConstraintReceiver contains all constraints that can be placed\non a SelectedSetOperand.\n<p>Constraints …\n"],["Gecode::SelectedSet::SelectedSetOperand","","Gecode/SelectedSet/SelectedSetOperand.html","","<p>A SelectedSetOperand is an uncommon operand that results from calling \nSetEnumOperand#[] with a SetOperand …\n"],["Gecode::Set","","Gecode/Set.html","","<p>A module containing constraints that have set operands as left hand side\n(but not enumerations).\n"],["Gecode::Set::Cardinality","","Gecode/Set/Cardinality.html","","<p>A module that gathers the classes and modules used in cardinality \nconstraints.\n"],["Gecode::Set::Cardinality::CardinalityConstraint","","Gecode/Set/Cardinality/CardinalityConstraint.html","","<p>Describes a cardinality constraint specifically for ranges. This is just a\nspecial case which is used …\n"],["Gecode::Set::Cardinality::SetSizeOperand","","Gecode/Set/Cardinality/SetSizeOperand.html","",""],["Gecode::Set::Channel","","Gecode/Set/Channel.html","","<p>A module that gathers the classes and modules used in channel constraints\ninvolving one set operand and …\n"],["Gecode::Set::Channel::ChannelConstraint","","Gecode/Set/Channel/ChannelConstraint.html","",""],["Gecode::Set::Connection","","Gecode/Set/Connection.html","","<p>A module that gathers the classes and modules used in connection \nconstraints.\n"],["Gecode::Set::Connection::IncludeConstraint","","Gecode/Set/Connection/IncludeConstraint.html","",""],["Gecode::Set::Connection::SetMaxOperand","","Gecode/Set/Connection/SetMaxOperand.html","",""],["Gecode::Set::Connection::SetMinOperand","","Gecode/Set/Connection/SetMinOperand.html","",""],["Gecode::Set::Connection::SetSumOperand","","Gecode/Set/Connection/SetSumOperand.html","",""],["Gecode::Set::Domain","","Gecode/Set/Domain.html","","<p>A module that gathers the classes and modules used in domain constraints.\n"],["Gecode::Set::Domain::DomainConstraint","","Gecode/Set/Domain/DomainConstraint.html","",""],["Gecode::Set::Domain::EqualityDomainConstraint","","Gecode/Set/Domain/EqualityDomainConstraint.html","",""],["Gecode::Set::Operation","","Gecode/Set/Operation.html","","<p>A module that gathers the classes and modules used in operation\nconstraints.\n"],["Gecode::Set::Operation::OperationConstraint","","Gecode/Set/Operation/OperationConstraint.html","",""],["Gecode::Set::Operation::OperationSetOperand","","Gecode/Set/Operation/OperationSetOperand.html","",""],["Gecode::Set::Relation","","Gecode/Set/Relation.html","","<p>A module that gathers the classes and modules used in relation constraints.\n"],["Gecode::Set::Relation::EqualityRelationConstraint","","Gecode/Set/Relation/EqualityRelationConstraint.html","",""],["Gecode::Set::Relation::RelationConstraint","","Gecode/Set/Relation/RelationConstraint.html","",""],["Gecode::Set::SetConstraintReceiver","","Gecode/Set/SetConstraintReceiver.html","","<p>SetConstraintReceiver contains all constraints that can be placed on a\nSetOperand.\n<p>Constraints are placed …\n"],["Gecode::Set::SetOperand","","Gecode/Set/SetOperand.html","","<p>A SetOperand is a combination of operands on which the constraints defined\nin SetConstraintReceiver can …\n"],["Gecode::Set::ShortCircuitEqualityOperand","","Gecode/Set/ShortCircuitEqualityOperand.html","","<p>An operand that short circuits set equality.\n"],["Gecode::Set::ShortCircuitRelationsOperand","","Gecode/Set/ShortCircuitRelationsOperand.html","","<p>An operand that short circuits set non-negated and non-reified versions  of\nthe relation constraints. …\n"],["Gecode::Set::Util","","Gecode/Set/Util.html","","<p>Utility methods for sets.\n"],["Gecode::SetElements","","Gecode/SetElements.html","","<p>A module containing constraints that have set.elements as left hand side.\n"],["Gecode::SetElements::Relation","","Gecode/SetElements/Relation.html","",""],["Gecode::SetElements::Relation::RelationConstraint","","Gecode/SetElements/Relation/RelationConstraint.html","",""],["Gecode::SetElements::SetElementsConstraintReceiver","","Gecode/SetElements/SetElementsConstraintReceiver.html","","<p>SetElementsConstraintReceiver contains all constraints that can be placed\non a SetElementsOperand.\n<p>Constraints …\n"],["Gecode::SetElements::SetElementsOperand","","Gecode/SetElements/SetElementsOperand.html","","<p>A SetElementsOperand is an uncommon operand that results from calling \nSetOperand#elements. It facilitates …\n"],["Gecode::SetEnum","","Gecode/SetEnum.html","","<p>A module containing constraints that have enumerations of set operands as \nleft hand side.\n"],["Gecode::SetEnum::Channel","","Gecode/SetEnum/Channel.html","","<p>A module that gathers the classes and modules used in channel constraints.\n"],["Gecode::SetEnum::Channel::IntEnumChannelConstraint","","Gecode/SetEnum/Channel/IntEnumChannelConstraint.html","",""],["Gecode::SetEnum::Distinct","","Gecode/SetEnum/Distinct.html","","<p>A module that gathers the classes and modules used in distinct constraints.\n"],["Gecode::SetEnum::Distinct::AtMostOneConstraint","","Gecode/SetEnum/Distinct/AtMostOneConstraint.html","",""],["Gecode::SetEnum::Dummy","","Gecode/SetEnum/Dummy.html","","<p>A dummy class that just shows what methods a set enum responds to.\n"],["Gecode::SetEnum::Element","","Gecode/SetEnum/Element.html","",""],["Gecode::SetEnum::Element::ElementSetOperand","","Gecode/SetEnum/Element/ElementSetOperand.html","",""],["Gecode::SetEnum::Operation","","Gecode/SetEnum/Operation.html","","<p>A module that gathers the classes and modules used in operation\nconstraints.\n"],["Gecode::SetEnum::Operation::OperationSetOperand","","Gecode/SetEnum/Operation/OperationSetOperand.html","",""],["Gecode::SetEnum::SetEnumConstraintReceiver","","Gecode/SetEnum/SetEnumConstraintReceiver.html","","<p>SetEnumConstraintReceiver contains all constraints that can be placed on a\nSetEnumOperand.\n<p>Constraints …\n"],["Gecode::SetEnum::SetEnumOperand","","Gecode/SetEnum/SetEnumOperand.html","","<p>A SetEnumOperand is a enumeration of SetOperand on which the constraints\ndefined in SetEnumConstraintReceiver …\n"],["Gecode::SetEnumMethods","","Gecode/SetEnumMethods.html","","<p>A module containing the methods needed by enumerations containing set\noperands. Requires that it’s included …\n"],["Gecode::SetVar","","Gecode/SetVar.html","","<p>Describes a set variable.\n<p>A set variable’s domain, i.e. possible values that it can take, are\nrepresented …\n"],["Gecode::Util","","Gecode/Util.html","","<p>A module that provides some utility-methods for constraints.\n"],["Gecode::Util::EnumMatrix","","Gecode/Util/EnumMatrix.html","","<p>Extends Matrix so that it’s an enumerable.\n"],["Gecode::Util::Extensional","","Gecode/Util/Extensional.html","","<p>A module that contains utility-methods for extensional constraints.\n"],["Gecode::Util::MatrixEnumMethods","","Gecode/Util/MatrixEnumMethods.html","","<p>Methods that make a matrix an enumerable.\n"],["Gecode::VariableEnumMethods","","Gecode/VariableEnumMethods.html","",""],["GecodeR","","GecodeR.html","",""],["GecodeRaw","","GecodeRaw.html","","<p>This file adds a small layer on top of the bindings.\n"],["GecodeRaw::Space","","GecodeRaw/Space.html","",""],["Object","","Object.html","",""],["Rust","","Rust.html","",""],["Rust::Bindings","","Rust/Bindings.html","",""],["&","Gecode::Bool::BoolOperand","Gecode/Bool/BoolOperand.html#method-i-26","(bool_op)","<p>Produces a new BoolOperand representing this operand AND\n<code>bool_op</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># (+b1+ and +b2+) or +b3+  ...</span>\n</pre>\n"],["&","Gecode::ReifiableConstraint","Gecode/ReifiableConstraint.html#method-i-26","(constraint)","<p>Produces a conjunction of two reifiable constraints, producing a new\nreifiable constraint.\n"],["*","Gecode::Bool::BoolLinearOperations","Gecode/Bool/BoolLinearOperations.html#method-i-2A","(fixnum)","<p>Produces an IntOperand representing the value of this boolean operand (0 or\n1) times a constant.\n<p>Examples …\n"],["*","Gecode::Bool::BoolOperand","Gecode/Bool/BoolOperand.html#method-i-2A","(fixnum)","<p>Produces an IntOperand representing the value of this boolean operand (0 or\n1) times a constant.\n<p>Examples …\n"],["*","Gecode::Int::IntOperand","Gecode/Int/IntOperand.html#method-i-2A","(int_operand)","<p>Produces a new IntOperand representing this operand times\n<code>int_operand</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The value of +int_op1+ ...</span>\n</pre>\n"],["+","Gecode::Bool::BoolLinearOperations","Gecode/Bool/BoolLinearOperations.html#method-i-2B","(op2)","<p>Produces an IntOperand representing the value of this boolean operand (0 or\n1) plus <code>op2</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +bool1+ ...</span>\n</pre>\n"],["+","Gecode::Bool::BoolOperand","Gecode/Bool/BoolOperand.html#method-i-2B","(op2)","<p>Produces an IntOperand representing the value of this boolean operand (0 or\n1) plus <code>op2</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +bool1+ ...</span>\n</pre>\n"],["+","Gecode::Int::IntOperand","Gecode/Int/IntOperand.html#method-i-2B","(int_operand_or_fixnum)","<p>Produces a new IntOperand representing this operand plus \n<code>int_operand_or_fixnum</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +int1+ plus ...</span>\n</pre>\n"],["-","Gecode::Bool::BoolLinearOperations","Gecode/Bool/BoolLinearOperations.html#method-i-2D","(op2)","<p>Produces an IntOperand representing the value of this boolean operand (0 or\n1) minus <code>op2</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +bool1+ ...</span>\n</pre>\n"],["-","Gecode::Bool::BoolOperand","Gecode/Bool/BoolOperand.html#method-i-2D","(op2)","<p>Produces an IntOperand representing the value of this boolean operand (0 or\n1) minus <code>op2</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +bool1+ ...</span>\n</pre>\n"],["-","Gecode::Int::IntOperand","Gecode/Int/IntOperand.html#method-i-2D","(int_operand_or_fixnum)","<p>Produces a new IntOperand representing this operand minus \n<code>int_operand_or_fixnum</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +int1+ minus ...</span>\n</pre>\n"],["<","Gecode::Int::IntConstraintReceiver","Gecode/Int/IntConstraintReceiver.html#method-i-3C","(int_operand_or_fixnum, options = {})","<p>Constrains the integer operand to be strictly less than\n<code>int_operand_or_fixnum</code>. #lesser and #lesser_than …\n"],["<","Gecode::SetElements::SetElementsConstraintReceiver","Gecode/SetElements/SetElementsConstraintReceiver.html#method-i-3C","(operand, options = {})","<p>Constrains the set elements to be strictly less than <code>operand</code>\n(either a constant integer or an integer …\n"],["<=","Gecode::Int::IntConstraintReceiver","Gecode/Int/IntConstraintReceiver.html#method-i-3C-3D","(int_operand_or_fixnum, options = {})","<p>Constrains the integer operand to be less than or equal to\n<code>int_operand_or_fixnum</code>. #less_or_equal and …\n"],["<=","Gecode::SetElements::SetElementsConstraintReceiver","Gecode/SetElements/SetElementsConstraintReceiver.html#method-i-3C-3D","(operand, options = {})","<p>Constrains the set elements to be less than or equal to\n<code>operand</code> (either a constant integer or an integer …\n"],["==","Gecode::Bool::BoolConstraintReceiver","Gecode/Bool/BoolConstraintReceiver.html#method-i-3D-3D","(bool_op, options = {})","<p>Constrains the boolean operand to be equal to <code>bool_op</code>.  Any of\n<code>==</code>, <code>equal</code> and <code>equal_to</code> may be used\nfor …\n"],["==","Gecode::Int::IntConstraintReceiver","Gecode/Int/IntConstraintReceiver.html#method-i-3D-3D","(bool, options = {})","<p>Constrains the integer operand to be equal to the specified boolean \noperand. I.e. constrains the integer …\n"],["==","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-3D-3D","(constant_set, options = {})","<p>Constrains the set operand to have a domain equal to\n<code>constant_set</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +set+ must equal [1,2,5] ...</span>\n</pre>\n"],["==","Gecode::SetElements::SetElementsConstraintReceiver","Gecode/SetElements/SetElementsConstraintReceiver.html#method-i-3D-3D","(operand, options = {})","<p>Constrains the set elements to equal <code>operand</code> (either a\nconstant integer or an integer operand).\n<p>Examples …\n"],[">","Gecode::Int::IntConstraintReceiver","Gecode/Int/IntConstraintReceiver.html#method-i-3E","(int_operand_or_fixnum, options = {})","<p>Constrains the integer operand to be strictly greater than\n<code>int_operand_or_fixnum</code>. #greater and #greater_than …\n"],[">","Gecode::SetElements::SetElementsConstraintReceiver","Gecode/SetElements/SetElementsConstraintReceiver.html#method-i-3E","(operand, options = {})","<p>Constrains the set elements to be strictly greater than\n<code>operand</code> (either a constant integer or an integer …\n"],[">=","Gecode::Int::IntConstraintReceiver","Gecode/Int/IntConstraintReceiver.html#method-i-3E-3D","(int_operand_or_fixnum, options = {})","<p>Constrains the integer operand to be greater than or equal to\n<code>int_operand_or_fixnum</code>. #greater_or_equal …\n"],[">=","Gecode::SetElements::SetElementsConstraintReceiver","Gecode/SetElements/SetElementsConstraintReceiver.html#method-i-3E-3D","(operand, options = {})","<p>Constrains the set elements to be greater than or equal to\n<code>operand</code> (either a constant integer or an integer …\n"],["FreeVar","Gecode","Gecode.html#method-c-FreeVar","(bound_class, space_bind_method)","<p>Creates a class for a free variable that can be bound into the specified\nclass using the specified method …\n"],["[]","Gecode::FixnumEnum::FixnumEnumOperand","Gecode/FixnumEnum/FixnumEnumOperand.html#method-c-5B-5D","(*vars)","<p>Produces an IntOperand representing the i:th constant integer in the\nenumeration, where i is the value …\n"],["[]","Gecode::IntEnum::IntEnumOperand","Gecode/IntEnum/IntEnumOperand.html#method-c-5B-5D","(*vars)","<p>Produces an IntOperand representing the i:th integer operand in the\nenumeration, where i is the value …\n"],["[]","Gecode::SetEnum::SetEnumOperand","Gecode/SetEnum/SetEnumOperand.html#method-c-5B-5D","(*vars)","<p>Produces a SetOperand representing the i:th set operand in the enumeration,\nwhere i is the value of the …\n"],["^","Gecode::Bool::BoolOperand","Gecode/Bool/BoolOperand.html#method-i-5E","(bool_op)","<p>Produces a new BoolOperand representing this operand XOR\n<code>bool_op</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># (+b1+ and +b2+) or (+b3+ ...</span>\n</pre>\n"],["abs","Gecode::Int::IntOperand","Gecode/Int/IntOperand.html#method-i-abs","()","<p>Produces an IntOperand representing the absolute value of this  operand.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The absolute value ...</span>\n</pre>\n"],["active_space","Gecode::EnumMethods","Gecode/EnumMethods.html#method-i-active_space","()","<p>Gets the current space of the model the array is connected to.\n"],["active_space","Gecode::Mixin","Gecode/Mixin.html#method-i-active_space","()","<p>Retrieves the currently used space. Calling this method is only allowed \nwhen sanctioned by the model …\n"],["add_constraint","Gecode::Mixin","Gecode/Mixin.html#method-i-add_constraint","(constraint)","<p>Adds the specified constraint to the model. Returns the newly added \nconstraint.\n"],["add_interaction","Gecode::Mixin","Gecode/Mixin.html#method-i-add_interaction","(&block)","<p>Adds a block containing something that interacts with Gecode to a queue\nwhere it is potentially executed. …\n"],["allow_space_access","Gecode::Mixin","Gecode/Mixin.html#method-i-allow_space_access","(&block)","<p>Allows the model’s active space to be accessed while the block is \nexecuted. Don’t use this unless you …\n"],["any","Gecode::Mixin","Gecode/Mixin.html#method-i-any","(*regexps)","<p>Matches any of the specified <code>regexps</code>.\n"],["at_least_once","Gecode::Mixin","Gecode/Mixin.html#method-i-at_least_once","(regexp)","<p>Matches <code>regexp</code> repeated at least one time (i.e. like ‘+’\nin normal  regexps). Produces the same result …\n"],["at_most_once","Gecode::Mixin","Gecode/Mixin.html#method-i-at_most_once","(regexp)","<p>Matches <code>regexp</code> repeated zero or one time (i.e. like ‘?’ in\nnormal  regexps). Produces the same result …\n"],["at_most_share_one_element","Gecode::SetEnum::SetEnumConstraintReceiver","Gecode/SetEnum/SetEnumConstraintReceiver.html#method-i-at_most_share_one_element","(options = {})","<p>Constrains all pairs of set operands in the enumeration to at most have one\nelement in common and be …\n"],["bind_array","Gecode::BoolEnumMethods","Gecode/BoolEnumMethods.html#method-i-bind_array","()","<p>Returns a bool variable array with all the bound variables.\n"],["bind_array","Gecode::IntEnumMethods","Gecode/IntEnumMethods.html#method-i-bind_array","()","<p>Returns an int variable array with all the bound variables.\n"],["bind_array","Gecode::SetEnumMethods","Gecode/SetEnumMethods.html#method-i-bind_array","()","<p>Returns a set variable array with all the bound variables.\n"],["bool_var","Gecode::Mixin","Gecode/Mixin.html#method-i-bool_var","()","<p>Creates a new boolean variable.\n"],["bool_var_array","Gecode::Mixin","Gecode/Mixin.html#method-i-bool_var_array","(count)","<p>Creates an array containing the specified number of boolean variables.\n"],["bool_var_matrix","Gecode::Mixin","Gecode/Mixin.html#method-i-bool_var_matrix","(row_count, col_count)","<p>Creates a matrix containing the specified number rows and columns of \nboolean variables.\n"],["branch_on","Gecode::Mixin","Gecode/Mixin.html#method-i-branch_on","(variables, options = {})","<p>Specifies which variables that should be branched on (given as an enum of\noperands or as a single operand). …\n"],["cardinality","Gecode::SetVar","Gecode/SetVar.html#method-i-cardinality","()","<p>Returns a range containing the allowed values for the set’s cardinality.\n"],["channel","Gecode::BoolEnum::BoolEnumConstraintReceiver","Gecode/BoolEnum/BoolEnumConstraintReceiver.html#method-i-channel","(integer_operand, options = {})","<p>Constrains this enumeration to “channel” <code>integer_operand</code>.\nThis  constrains the integer operand …\n"],["channel","Gecode::IntEnum::IntEnumConstraintReceiver","Gecode/IntEnum/IntEnumConstraintReceiver.html#method-i-channel","(int_enum, options = {})","<p>Constrains this enumeration to “channel” <code>int_enum</code>. \nChannel constraints are used to give access …\n"],["channel","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-channel","(bool_enum, options = {})","<p>Constrains this set to channel <code>bool_enum</code>. The set is\nconstrained to include value i exactly when the …\n"],["channel","Gecode::SetEnum::SetEnumConstraintReceiver","Gecode/SetEnum/SetEnumConstraintReceiver.html#method-i-channel","(enum, options = {})","<p>Constrains this set enum to channel <code>int_enum_operand</code>. The i:th\nset  in the enumeration of set operands …\n"],["column","Gecode::Util::EnumMatrix","Gecode/Util/EnumMatrix.html#method-i-column","(i)",""],["combined_method_missing","Gecode::Mixin","Gecode/Mixin.html#method-i-combined_method_missing","(*args)",""],["complement","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-complement","(constant_set, options = {})","<p>Constrains the set operand to be the complement of\n<code>constant_set</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +set+ must be the complement ...</span>\n</pre>\n"],["conjunction","Gecode::BoolEnum::BoolEnumOperand","Gecode/BoolEnum/BoolEnumOperand.html#method-i-conjunction","()","<p>Produces a BoolOperand that represents the conjunction (AND) of all boolean\noperands in this enumeration. …\n"],["const_missing","Gecode::LoggingLayer","Gecode/LoggingLayer.html#method-c-const_missing","(name)",""],["constant_set?","Gecode::Util","Gecode/Util.html#method-i-constant_set-3F","(expression)","<p>Checks whether the specified expression is regarded as a constant set.\nReturns true if it is, false otherwise. …\n"],["constant_set_to_int_set","Gecode::Util","Gecode/Util.html#method-i-constant_set_to_int_set","(constant_set)","<p>Converts the different ways to specify constant sets in the interface to an\ninstance of Gecode::Raw::IntSet …\n"],["constant_set_to_params","Gecode::Util","Gecode/Util.html#method-i-constant_set_to_params","(constant_set)","<p>Converts the different ways to specify constant sets in the interface to\nthe form that the set should …\n"],["constrain","Gecode::Mixin","Gecode/Mixin.html#method-c-constrain","(home, best)","<p>Called by spaces when they want to constrain as part of BAB-search.\n"],["constrain","GecodeRaw::Space","GecodeRaw/Space.html#method-i-constrain","(best_so_far_space)","<p>Used by Gecode during BAB-search.\n"],["constrain_equal","Gecode::BoolEnum::Relation::BoolEnumConjunctionOperand","Gecode/BoolEnum/Relation/BoolEnumConjunctionOperand.html#method-i-constrain_equal","(bool_operand, constrain_domain, propagation_options)",""],["constrain_equal","Gecode::BoolEnum::Relation::BoolEnumDisjunctionOperand","Gecode/BoolEnum/Relation/BoolEnumDisjunctionOperand.html#method-i-constrain_equal","(bool_operand, constrain_domain, propagation_options)",""],["constrain_equal","Gecode::FixnumEnum::Element::ElementIntOperand","Gecode/FixnumEnum/Element/ElementIntOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::Int::Arithmetic::IntAbsOperand","Gecode/Int/Arithmetic/IntAbsOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::Int::Arithmetic::IntMultOperand","Gecode/Int/Arithmetic/IntMultOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::Int::Arithmetic::IntSquareRootOperand","Gecode/Int/Arithmetic/IntSquareRootOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::Int::Arithmetic::IntSquaredOperand","Gecode/Int/Arithmetic/IntSquaredOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::IntEnum::Arithmetic::IntEnumMaxOperand","Gecode/IntEnum/Arithmetic/IntEnumMaxOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::IntEnum::Arithmetic::IntEnumMinOperand","Gecode/IntEnum/Arithmetic/IntEnumMinOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::IntEnum::Element::ElementIntOperand","Gecode/IntEnum/Element/ElementIntOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::SelectedSet::Element::SelectedSetIntersectionOperand","Gecode/SelectedSet/Element/SelectedSetIntersectionOperand.html#method-i-constrain_equal","(set_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::SelectedSet::Element::SelectedSetUnionOperand","Gecode/SelectedSet/Element/SelectedSetUnionOperand.html#method-i-constrain_equal","(set_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::Set::Cardinality::SetSizeOperand","Gecode/Set/Cardinality/SetSizeOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::Set::Connection::SetMaxOperand","Gecode/Set/Connection/SetMaxOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::Set::Connection::SetMinOperand","Gecode/Set/Connection/SetMinOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::Set::Connection::SetSumOperand","Gecode/Set/Connection/SetSumOperand.html#method-i-constrain_equal","(int_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::SetEnum::Element::ElementSetOperand","Gecode/SetEnum/Element/ElementSetOperand.html#method-i-constrain_equal","(set_operand, constrain, propagation_options)",""],["constrain_equal","Gecode::SetEnum::Operation::OperationSetOperand","Gecode/SetEnum/Operation/OperationSetOperand.html#method-i-constrain_equal","(set_operand, constrain_domain, propagation_options)",""],["constrain_proc=","Gecode::Mixin","Gecode/Mixin.html#method-c-constrain_proc-3D","(proc)","<p>Sets the proc that should be used to handle constrain requests.\n"],["construct_receiver","Gecode::Bool::Linear::ExpressionTree","Gecode/Bool/Linear/ExpressionTree.html#method-i-construct_receiver","(params)",""],["construct_receiver","Gecode::Bool::ShortCircuitEqualityOperand","Gecode/Bool/ShortCircuitEqualityOperand.html#method-i-construct_receiver","(params)",""],["construct_receiver","Gecode::Int::ShortCircuitEqualityOperand","Gecode/Int/ShortCircuitEqualityOperand.html#method-i-construct_receiver","(params)",""],["construct_receiver","Gecode::Int::ShortCircuitRelationsOperand","Gecode/Int/ShortCircuitRelationsOperand.html#method-i-construct_receiver","(params)",""],["construct_receiver","Gecode::Set::Cardinality::SetSizeOperand","Gecode/Set/Cardinality/SetSizeOperand.html#method-i-construct_receiver","(params)",""],["construct_receiver","Gecode::Set::ShortCircuitEqualityOperand","Gecode/Set/ShortCircuitEqualityOperand.html#method-i-construct_receiver","(params)",""],["construct_receiver","Gecode::Set::ShortCircuitRelationsOperand","Gecode/Set/ShortCircuitRelationsOperand.html#method-i-construct_receiver","(params)",""],["count","Gecode::IntEnum::IntEnumOperand","Gecode/IntEnum/IntEnumOperand.html#method-i-count","(int_operand_or_fixnum)","<p>Produces a new IntOperand representing the number of times\n<code>int_operand_or_fixnum</code> is present in this enumeration. …\n"],["decode_options","Gecode::Set::Util","Gecode/Set/Util.html#method-i-decode_options","(options)",""],["decode_options","Gecode::Util","Gecode/Util.html#method-i-decode_options","(options)","<p>Decodes the common options to constraints: strength, kind and  reification.\nReturns a hash with up to …\n"],["disjoint","Gecode::SelectedSet::SelectedSetConstraintReceiver","Gecode/SelectedSet/SelectedSetConstraintReceiver.html#method-i-disjoint","(options = {})","<p>Constrains the selected sets to be pairwise disjoint.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># Constrains all sets selected by +set_enum[set]+ ...</span>\n</pre>\n"],["disjoint","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-disjoint","(constant_set, options = {})","<p>Constrains the set operand to be disjoint with <code>constant_set</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +set+ must be disjoint with [1,2,5] ...</span>\n</pre>\n"],["disjoint_union","Gecode::FixnumEnum::FixnumEnumOperand","Gecode/FixnumEnum/FixnumEnumOperand.html#method-i-disjoint_union","(set_operand)","<p>Produces a new SetOperand representing the disjoint union between this\noperand, interpreted as a constant …\n"],["disjoint_union","Gecode::Set::SetOperand","Gecode/Set/SetOperand.html#method-i-disjoint_union","(set_operand_or_constant_set)","<p>Produces a new SetOperand representing the disjoint union between this\noperand and <code>set_operand_or_constant_set</code> …\n"],["disjoint_union","Gecode::SetEnum::SetEnumOperand","Gecode/SetEnum/SetEnumOperand.html#method-i-disjoint_union","()","<p>Produces a SetOperand representing the disjoint union of all sets  in this\nenumeration.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The ...</span>\n</pre>\n"],["disjunction","Gecode::BoolEnum::BoolEnumOperand","Gecode/BoolEnum/BoolEnumOperand.html#method-i-disjunction","()","<p>Produces a BoolOperand that represents the disjunction (OR) of all boolean\noperands in this enumeration. …\n"],["distinct","Gecode::IntEnum::IntEnumConstraintReceiver","Gecode/IntEnum/IntEnumConstraintReceiver.html#method-i-distinct","(options = {})","<p>Constrains all integer operands in the enumeration to be distinct\n(different). The constraint can also …\n"],["domain","Gecode::IntVar","Gecode/IntVar.html#method-i-domain","()","<p>Returns an enumeration corresponding to the domain.\n"],["domain_range","Gecode::FixnumEnumMethods","Gecode/FixnumEnumMethods.html#method-i-domain_range","()","<p>Returns the smallest range that contains the domains of all integer \nvariables involved.\n"],["domain_range","Gecode::IntEnumMethods","Gecode/IntEnumMethods.html#method-i-domain_range","()","<p>Returns the smallest range that contains the domains of all integer \nvariables involved.\n"],["each","Gecode::EnumerableView","Gecode/EnumerableView.html#method-i-each","(&block)","<p>Iterates over every element in the view.\n"],["each","Gecode::Util::MatrixEnumMethods","Gecode/Util/MatrixEnumMethods.html#method-i-each","(&block)","<p>Iterates over every element in the matrix.\n"],["each_solution","Gecode::Mixin","Gecode/Mixin.html#method-i-each_solution","(&block)","<p>Yields each solution that the model has.\n"],["elements","Gecode::Set::SetOperand","Gecode/Set/SetOperand.html#method-i-elements","()","<p>Produces a SetElementsOperand on which relation constraints can be placed\nthat constrain all elements …\n"],["equal","Gecode::IntEnum::IntEnumConstraintReceiver","Gecode/IntEnum/IntEnumConstraintReceiver.html#method-i-equal","(options = {})","<p>Constrains all operands in the enumeration to be equal.  Neither negation\nnor reification is supported. …\n"],["extract_propagation_options","Gecode::Util","Gecode/Util.html#method-i-extract_propagation_options","(params)","<p>Extracts an array of the values selected for the standard propagation \noptions (propagation strength …\n"],["false","Gecode::Bool::BoolConstraintReceiver","Gecode/Bool/BoolConstraintReceiver.html#method-i-false","(options = {})","<p>Constrains the boolean operand to be false.\n<p>Examples \n\n<pre># +b1+ and +b2+ must be false.\n(b1 &amp; b2).must_be.false ...</pre>\n"],["gecode_interaction_queue","Gecode::Mixin","Gecode/Mixin.html#method-i-gecode_interaction_queue","()","<p>Gets a queue of objects that can be posted to the model’s active_space \n(by calling their post method). …\n"],["implies","Gecode::Bool::BoolOperand","Gecode/Bool/BoolOperand.html#method-i-implies","(bool_op)","<p>Produces a new BoolOperand representing that this operand implies\n<code>bool_op</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># (+b1+ implies +b2+) ...</span>\n</pre>\n"],["imply","Gecode::Bool::BoolConstraintReceiver","Gecode/Bool/BoolConstraintReceiver.html#method-i-imply","(bool_op, options = {})","<p>Constrains the boolean operand to imply <code>bool_op</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +b1+ must imply +b2+</span>\n<span class=\"ruby-identifier\">b1</span>.<span class=\"ruby-identifier\">must</span>.<span class=\"ruby-identifier\">imply</span> <span class=\"ruby-identifier\">b2</span>\n\n<span class=\"ruby-comment\"># ...</span>\n</pre>\n"],["in","Gecode::BoolEnum::BoolEnumConstraintReceiver","Gecode/BoolEnum/BoolEnumConstraintReceiver.html#method-i-in","(tuples, options = {})","<p>Constrains all the operands in this enumeration to be equal to one of the\nspecified tuples. Neither negation …\n"],["in","Gecode::Int::IntConstraintReceiver","Gecode/Int/IntConstraintReceiver.html#method-i-in","(domain, options = {})","<p>Creates a domain constraint using the specified domain, specified as an\nenumeration of integers. The …\n"],["in","Gecode::IntEnum::IntEnumConstraintReceiver","Gecode/IntEnum/IntEnumConstraintReceiver.html#method-i-in","(tuples, options = {})","<p>Constrains all the operands in this enumeration to be equal to one of the\nspecified tuples. Neither negation …\n"],["include","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-include","(int_enum)","<p>Constrains this set to include the values of <code>int_enum</code>.\n<p>The constraint has the side effect of sorting the …\n"],["included","Gecode::FixnumEnum::FixnumEnumOperand","Gecode/FixnumEnum/FixnumEnumOperand.html#method-c-included","(enum_mod)","<p>This adds the adder for the methods in the modules including it. The \nreason for doing it so indirect …\n"],["included","Gecode::IntEnum::IntEnumOperand","Gecode/IntEnum/IntEnumOperand.html#method-c-included","(enum_mod)","<p>This adds the adder for the methods in the modules including it. The \nreason for doing it so indirect …\n"],["included","Gecode::Mixin","Gecode/Mixin.html#method-c-included","(mod)",""],["included","Gecode::SetEnum::SetEnumOperand","Gecode/SetEnum/SetEnumOperand.html#method-c-included","(mod)","<p>This adds the adder for the methods in the modules including it. The \nreason for doing it so indirect …\n"],["inspect","Gecode::FreeVarBase","Gecode/FreeVarBase.html#method-i-inspect","()",""],["int_var","Gecode::Mixin","Gecode/Mixin.html#method-i-int_var","(domain = LARGEST_INT_DOMAIN)","<p>Creates a new integer variable with the specified domain. The domain can\neither be a range, a single …\n"],["int_var_array","Gecode::Mixin","Gecode/Mixin.html#method-i-int_var_array","(count, domain = LARGEST_INT_DOMAIN)","<p>Creates an array containing the specified number of integer variables  with\nthe specified domain. The …\n"],["int_var_matrix","Gecode::Mixin","Gecode/Mixin.html#method-i-int_var_matrix","(row_count, col_count, domain = LARGEST_INT_DOMAIN)","<p>Creates a matrix containing the specified number rows and columns of \ninteger variables with the specified …\n"],["intersection","Gecode::FixnumEnum::FixnumEnumOperand","Gecode/FixnumEnum/FixnumEnumOperand.html#method-i-intersection","(set_operand)","<p>Produces a new SetOperand representing the intersection between this\noperand, interpreted as a constant …\n"],["intersection","Gecode::SelectedSet::SelectedSetOperand","Gecode/SelectedSet/SelectedSetOperand.html#method-i-intersection","(options = {})","<p>Produces a SetOperand representing the selected sets’ intersection. The\noption :with can be used to enumerate …\n"],["intersection","Gecode::Set::SetOperand","Gecode/Set/SetOperand.html#method-i-intersection","(set_operand_or_constant_set)","<p>Produces a new SetOperand representing the intersection between this\noperand and <code>set_operand_or_constant_set</code> …\n"],["intersection","Gecode::SetEnum::SetEnumOperand","Gecode/SetEnum/SetEnumOperand.html#method-i-intersection","()","<p>Produces a SetOperand representing the intersection of all sets in this\nenumeration.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The intersection ...</span>\n</pre>\n"],["load_bindings_lib","Gecode","Gecode.html#method-c-load_bindings_lib","()","<p>Loads the binding libraries. This is done as a method in order to be easier\nto test.\n"],["logger","Gecode::LoggingLayer","Gecode/LoggingLayer.html#method-c-logger","()","<p>Gets the logger, or creates one if none exists.\n"],["lower_bound","Gecode::SetVar","Gecode/SetVar.html#method-i-lower_bound","()","<p>Gets all the elements located in the greatest lower bound of the set (an \nEnumerable).\n"],["match","Gecode::BoolEnum::BoolEnumConstraintReceiver","Gecode/BoolEnum/BoolEnumConstraintReceiver.html#method-i-match","(regexp, options = {})","<p>Constrains the sequence of operands in this enumeration to match a\nspecified regexp in the boolean domain. …\n"],["match","Gecode::IntEnum::IntEnumConstraintReceiver","Gecode/IntEnum/IntEnumConstraintReceiver.html#method-i-match","(regexp, options = {})","<p>Constrains the sequence of operands in this enumeration to match a\nspecified regexp in the integer domain. …\n"],["max","Gecode::IntEnum::IntEnumOperand","Gecode/IntEnum/IntEnumOperand.html#method-i-max","()","<p>Produces an IntOperand representing the maximum value of the  integer\noperands in this enumeration.\n<p>Examples …\n"],["max","Gecode::Set::SetOperand","Gecode/Set/SetOperand.html#method-i-max","()","<p>Produces an IntOperand representing the maximum of the set.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The maximum of +set+.</span>\n<span class=\"ruby-identifier\">set</span>.<span class=\"ruby-identifier\">max</span>\n</pre>\n"],["maximize","Gecode","Gecode.html#method-c-maximize","(variable_to_maximize, &block)","<p>Provides a convenient way to construct a model and then find the solution\nthat maximizes a given variable. …\n"],["maximize!","Gecode::Mixin","Gecode/Mixin.html#method-i-maximize-21","(var)","<p>Finds the solution that maximizes a given integer variable. The name of \nthe method that accesses the …\n"],["method_added","Gecode::Mixin","Gecode/Mixin.html#method-c-method_added","(method)",""],["method_missing","Gecode::Bool::BoolOperand","Gecode/Bool/BoolOperand.html#method-i-method_missing","(method, *args)",""],["method_missing","Gecode::BoolEnum::BoolEnumOperand","Gecode/BoolEnum/BoolEnumOperand.html#method-i-method_missing","(method, *args)",""],["method_missing","Gecode::FixnumEnum::FixnumEnumOperand","Gecode/FixnumEnum/FixnumEnumOperand.html#method-i-method_missing","(method, *args)",""],["method_missing","Gecode::Int::IntOperand","Gecode/Int/IntOperand.html#method-i-method_missing","(method, *args)",""],["method_missing","Gecode::IntEnum::IntEnumOperand","Gecode/IntEnum/IntEnumOperand.html#method-i-method_missing","(method, *args)",""],["method_missing","Gecode::LoggingLayer","Gecode/LoggingLayer.html#method-c-method_missing","(name, *args)",""],["method_missing","Gecode::Mixin","Gecode/Mixin.html#method-i-method_missing","(method, *args)","<p>Wraps method missing to handle #foo_is_a and #foo_is_an .\n<p>“&lt;variable_name&gt;_is_a &lt;variable&gt;” …\n"],["method_missing","Gecode::Set::SetOperand","Gecode/Set/SetOperand.html#method-i-method_missing","(method, *args)",""],["method_missing","Gecode::SetEnum::SetEnumOperand","Gecode/SetEnum/SetEnumOperand.html#method-i-method_missing","(method, *args)",""],["min","Gecode::IntEnum::IntEnumOperand","Gecode/IntEnum/IntEnumOperand.html#method-i-min","()","<p>Produces an IntOperand representing the minimum value of the  integer\noperands in this enumeration.\n<p>Examples …\n"],["min","Gecode::Set::SetOperand","Gecode/Set/SetOperand.html#method-i-min","()","<p>Produces an IntOperand representing the minimum of the set.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The minimum of +set+.</span>\n<span class=\"ruby-identifier\">set</span>.<span class=\"ruby-identifier\">min</span>\n</pre>\n"],["minimize","Gecode","Gecode.html#method-c-minimize","(variable_to_minimize, &block)","<p>Provides a convenient way to construct a model and then find the solution\nthat minimizes a given variable. …\n"],["minimize!","Gecode::Mixin","Gecode/Mixin.html#method-i-minimize-21","(var)","<p>Finds the solution that minimizes a given integer variable. The name of \nthe method that accesses the …\n"],["minor","Gecode::Util::EnumMatrix","Gecode/Util/EnumMatrix.html#method-i-minor","(*args)",""],["minus","Gecode::FixnumEnum::FixnumEnumOperand","Gecode/FixnumEnum/FixnumEnumOperand.html#method-i-minus","(set_operand)","<p>Produces a new SetOperand representing this operand, interpreted as a\nconstant set, minus <code>set_operand</code> …\n"],["minus","Gecode::Set::SetOperand","Gecode/Set/SetOperand.html#method-i-minus","(set_operand_or_constant_set)","<p>Produces a new SetOperand representing this operand minus \n<code>set_operand_or_constant_set</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +set1+ ...</span>\n</pre>\n"],["model","Gecode::Bool::ExpressionTree","Gecode/Bool/ExpressionTree.html#method-i-model","()","<p>Fetches the space that the expression’s variables is in.\n"],["model","Gecode::Operand","Gecode/Operand.html#method-i-model","()","<p>Fetches the model that the operand belongs to.\n"],["model","Gecode::SelectedSet::SelectedSetOperand","Gecode/SelectedSet/SelectedSetOperand.html#method-i-model","()",""],["model","Gecode::SetElements::SetElementsOperand","Gecode/SetElements/SetElementsOperand.html#method-i-model","()",""],["must","Gecode::Operand","Gecode/Operand.html#method-i-must","()","<p>Specifies that a constraint must hold for the left hand side.\n"],["must_be","Gecode::Operand","Gecode/Operand.html#method-i-must_be","()",""],["must_not","Gecode::Operand","Gecode/Operand.html#method-i-must_not","()","<p>Specifies that the negation of a constraint must hold for the left hand \nside.\n"],["must_not_be","Gecode::Operand","Gecode/Operand.html#method-i-must_not_be","()",""],["new","Gecode","Gecode.html#method-c-new","(&init_block)",""],["new","Gecode::BlockConstraint","Gecode/BlockConstraint.html#method-c-new","(model, params, &block)",""],["new","Gecode::Bool::BoolConstraintReceiver","Gecode/Bool/BoolConstraintReceiver.html#method-c-new","(model, params)","<p>Raises TypeError unless the left hand side is an bool operand.\n"],["new","Gecode::Bool::ExpressionNode","Gecode/Bool/ExpressionNode.html#method-c-new","(value, model = nil)",""],["new","Gecode::Bool::ExpressionTree","Gecode/Bool/ExpressionTree.html#method-c-new","(left_tree, operation, right_tree)","<p>Constructs a new expression with the specified binary operation  applied to\nthe specified trees.\n"],["new","Gecode::Bool::Linear::ExpressionNode","Gecode/Bool/Linear/ExpressionNode.html#method-c-new","(value, model = nil)",""],["new","Gecode::Bool::Linear::ExpressionTree","Gecode/Bool/Linear/ExpressionTree.html#method-c-new","(left_node, right_node, operation)","<p>Constructs a new expression with the specified operands.\n"],["new","Gecode::Bool::ShortCircuitEqualityOperand","Gecode/Bool/ShortCircuitEqualityOperand.html#method-c-new","(model)",""],["new","Gecode::BoolEnum::BoolEnumConstraintReceiver","Gecode/BoolEnum/BoolEnumConstraintReceiver.html#method-c-new","(model, params)","<p>Raises TypeError unless the left hand side is an bool enum operand.\n"],["new","Gecode::BoolEnum::Relation::BoolEnumConjunctionOperand","Gecode/BoolEnum/Relation/BoolEnumConjunctionOperand.html#method-c-new","(model, bool_enum)",""],["new","Gecode::BoolEnum::Relation::BoolEnumDisjunctionOperand","Gecode/BoolEnum/Relation/BoolEnumDisjunctionOperand.html#method-c-new","(model, bool_enum)",""],["new","Gecode::Constraint","Gecode/Constraint.html#method-c-new","(model, params)","<p>Creates a constraint with the specified parameters, bound to the  specified\nmodel.\n"],["new","Gecode::ConstraintReceiver","Gecode/ConstraintReceiver.html#method-c-new","(model, params)","<p>Constructs a new expression with the specified parameters. The  parameters\nshould at least contain the …\n"],["new","Gecode::EnumerableView","Gecode/EnumerableView.html#method-c-new","(min, max, size, &enum_constructor)","<p>Constructs a view with the specified minimum, maximum and size. The block \nshould construct an enumerable …\n"],["new","Gecode::FixnumEnum::Element::ElementIntOperand","Gecode/FixnumEnum/Element/ElementIntOperand.html#method-c-new","(enum_op, position_int_var_op, model)",""],["new","Gecode::FreeVarBase","Gecode/FreeVarBase.html#method-c-new","(model, index)","<p>Creates an int variable with the specified index.\n"],["new","Gecode::Int::Arithmetic::IntAbsOperand","Gecode/Int/Arithmetic/IntAbsOperand.html#method-c-new","(model, int_op)",""],["new","Gecode::Int::Arithmetic::IntMultOperand","Gecode/Int/Arithmetic/IntMultOperand.html#method-c-new","(model, op1, op2)",""],["new","Gecode::Int::Arithmetic::IntSquareRootOperand","Gecode/Int/Arithmetic/IntSquareRootOperand.html#method-c-new","(model, int_op)",""],["new","Gecode::Int::Arithmetic::IntSquaredOperand","Gecode/Int/Arithmetic/IntSquaredOperand.html#method-c-new","(model, int_op)",""],["new","Gecode::Int::IntConstraintReceiver","Gecode/Int/IntConstraintReceiver.html#method-c-new","(model, params)","<p>Raises TypeError unless the left hand side is an int operand.\n"],["new","Gecode::Int::Linear::ExpressionNode","Gecode/Int/Linear/ExpressionNode.html#method-c-new","(value, model = nil)",""],["new","Gecode::Int::Linear::ExpressionTree","Gecode/Int/Linear/ExpressionTree.html#method-c-new","(left_node, right_node, operation)","<p>Constructs a new expression with the specified operands.\n"],["new","Gecode::Int::ShortCircuitEqualityOperand","Gecode/Int/ShortCircuitEqualityOperand.html#method-c-new","(model)",""],["new","Gecode::Int::ShortCircuitRelationsOperand","Gecode/Int/ShortCircuitRelationsOperand.html#method-c-new","(model)",""],["new","Gecode::IntEnum::Arithmetic::IntEnumMaxOperand","Gecode/IntEnum/Arithmetic/IntEnumMaxOperand.html#method-c-new","(model, int_enum)",""],["new","Gecode::IntEnum::Arithmetic::IntEnumMinOperand","Gecode/IntEnum/Arithmetic/IntEnumMinOperand.html#method-c-new","(model, int_enum)",""],["new","Gecode::IntEnum::Count::IntEnumCountOperand","Gecode/IntEnum/Count/IntEnumCountOperand.html#method-c-new","(model, int_enum, element)",""],["new","Gecode::IntEnum::Element::ElementIntOperand","Gecode/IntEnum/Element/ElementIntOperand.html#method-c-new","(model, enum_op, position_int_var_op)",""],["new","Gecode::IntEnum::IntEnumConstraintReceiver","Gecode/IntEnum/IntEnumConstraintReceiver.html#method-c-new","(model, params)","<p>Raises TypeError unless the left hand side is an int enum operand.\n"],["new","Gecode::NoSolutionError","Gecode/NoSolutionError.html#method-c-new","()",""],["new","Gecode::SearchAbortedError","Gecode/SearchAbortedError.html#method-c-new","()",""],["new","Gecode::SelectedSet::Element::SelectedSetIntersectionOperand","Gecode/SelectedSet/Element/SelectedSetIntersectionOperand.html#method-c-new","(model, selected_set, universe)",""],["new","Gecode::SelectedSet::Element::SelectedSetUnionOperand","Gecode/SelectedSet/Element/SelectedSetUnionOperand.html#method-c-new","(model, selected_set)",""],["new","Gecode::SelectedSet::SelectedSetConstraintReceiver","Gecode/SelectedSet/SelectedSetConstraintReceiver.html#method-c-new","(model, params)","<p>Raises TypeError unless the left hand side is a selected set operand.\n"],["new","Gecode::SelectedSet::SelectedSetOperand","Gecode/SelectedSet/SelectedSetOperand.html#method-c-new","(set_enum, set)","<p>Constructs a new selected set operand from <code>set_enum</code> and\n<code>set</code>.\n"],["new","Gecode::Set::Cardinality::SetSizeOperand","Gecode/Set/Cardinality/SetSizeOperand.html#method-c-new","(model, set_op)",""],["new","Gecode::Set::Connection::SetMaxOperand","Gecode/Set/Connection/SetMaxOperand.html#method-c-new","(model, set_op)",""],["new","Gecode::Set::Connection::SetMinOperand","Gecode/Set/Connection/SetMinOperand.html#method-c-new","(model, set_op)",""],["new","Gecode::Set::Connection::SetSumOperand","Gecode/Set/Connection/SetSumOperand.html#method-c-new","(model, set_op, subs)",""],["new","Gecode::Set::Operation::OperationSetOperand","Gecode/Set/Operation/OperationSetOperand.html#method-c-new","(model, op1, operator, op2)",""],["new","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-c-new","(model, params)","<p>Raises TypeError unless the left hand side is a set operand.\n"],["new","Gecode::Set::ShortCircuitEqualityOperand","Gecode/Set/ShortCircuitEqualityOperand.html#method-c-new","(model)",""],["new","Gecode::Set::ShortCircuitRelationsOperand","Gecode/Set/ShortCircuitRelationsOperand.html#method-c-new","(model)",""],["new","Gecode::SetElements::SetElementsConstraintReceiver","Gecode/SetElements/SetElementsConstraintReceiver.html#method-c-new","(model, params)","<p>Raises TypeError unless the left hand side is set elements operand.\n"],["new","Gecode::SetElements::SetElementsOperand","Gecode/SetElements/SetElementsOperand.html#method-c-new","(set)","<p>Constructs a new set elements operand <code>set</code>.\n"],["new","Gecode::SetEnum::Element::ElementSetOperand","Gecode/SetEnum/Element/ElementSetOperand.html#method-c-new","(model, enum_op, position_int_op)",""],["new","Gecode::SetEnum::Operation::OperationSetOperand","Gecode/SetEnum/Operation/OperationSetOperand.html#method-c-new","(model, enum, operator)",""],["new","Gecode::SetEnum::SetEnumConstraintReceiver","Gecode/SetEnum/SetEnumConstraintReceiver.html#method-c-new","(model, params)","<p>Raises TypeError unless the left hand side is a set enum operand.\n"],["optimize!","Gecode::Mixin","Gecode/Mixin.html#method-i-optimize-21","(&block)","<p>Finds the optimal solution. Optimality is defined by the provided block\nwhich is given two parameters, …\n"],["parse_regexp","Gecode::Util::Extensional","Gecode/Util/Extensional.html#method-i-parse_regexp","(regexp)","<p>Parses a regular expression over the integer domain, returning an instance\nof Gecode::REG .\n<p>Pseudo-BNF …\n"],["perform_tuple_checks","Gecode::Util::Extensional","Gecode/Util/Extensional.html#method-i-perform_tuple_checks","(tuples, expected_size, &additional_test)","<p>Checks that the specified enumeration is an enumeration containing  one or\nmore tuples of the specified …\n"],["post","Gecode::BlockConstraint","Gecode/BlockConstraint.html#method-i-post","()",""],["post","Gecode::Bool::BooleanConstraint","Gecode/Bool/BooleanConstraint.html#method-i-post","()",""],["post","Gecode::Bool::Linear::LinearRelationConstraint","Gecode/Bool/Linear/LinearRelationConstraint.html#method-i-post","()",""],["post","Gecode::BoolEnum::Channel::ChannelConstraint","Gecode/BoolEnum/Channel/ChannelConstraint.html#method-i-post","()",""],["post","Gecode::BoolEnum::Extensional::RegexpConstraint","Gecode/BoolEnum/Extensional/RegexpConstraint.html#method-i-post","()",""],["post","Gecode::BoolEnum::Extensional::TupleConstraint","Gecode/BoolEnum/Extensional/TupleConstraint.html#method-i-post","()",""],["post","Gecode::Constraint","Gecode/Constraint.html#method-i-post","()","<p>Posts the constraint, adding it to the model. This is an abstract  method\nand should be overridden by …\n"],["post","Gecode::Int::Channel::ChannelConstraint","Gecode/Int/Channel/ChannelConstraint.html#method-i-post","()",""],["post","Gecode::Int::Domain::EnumDomainConstraint","Gecode/Int/Domain/EnumDomainConstraint.html#method-i-post","()",""],["post","Gecode::Int::Domain::RangeDomainConstraint","Gecode/Int/Domain/RangeDomainConstraint.html#method-i-post","()",""],["post","Gecode::Int::Linear::LinearRelationConstraint","Gecode/Int/Linear/LinearRelationConstraint.html#method-i-post","()",""],["post","Gecode::Int::Relation::RelationConstraint","Gecode/Int/Relation/RelationConstraint.html#method-i-post","()",""],["post","Gecode::IntEnum::Channel::ChannelConstraint","Gecode/IntEnum/Channel/ChannelConstraint.html#method-i-post","()",""],["post","Gecode::IntEnum::Count::CountConstraint","Gecode/IntEnum/Count/CountConstraint.html#method-i-post","()",""],["post","Gecode::IntEnum::Distinct::DistinctConstraint","Gecode/IntEnum/Distinct/DistinctConstraint.html#method-i-post","()",""],["post","Gecode::IntEnum::Equality::EqualityConstraint","Gecode/IntEnum/Equality/EqualityConstraint.html#method-i-post","()",""],["post","Gecode::IntEnum::Extensional::RegexpConstraint","Gecode/IntEnum/Extensional/RegexpConstraint.html#method-i-post","()",""],["post","Gecode::IntEnum::Extensional::TupleConstraint","Gecode/IntEnum/Extensional/TupleConstraint.html#method-i-post","()",""],["post","Gecode::IntEnum::Sort::SortConstraint","Gecode/IntEnum/Sort/SortConstraint.html#method-i-post","()",""],["post","Gecode::IntEnum::Sort::SortConstraintWithOptions","Gecode/IntEnum/Sort/SortConstraintWithOptions.html#method-i-post","()",""],["post","Gecode::SelectedSet::Element::DisjointConstraint","Gecode/SelectedSet/Element/DisjointConstraint.html#method-i-post","()",""],["post","Gecode::Set::Cardinality::CardinalityConstraint","Gecode/Set/Cardinality/CardinalityConstraint.html#method-i-post","()",""],["post","Gecode::Set::Channel::ChannelConstraint","Gecode/Set/Channel/ChannelConstraint.html#method-i-post","()",""],["post","Gecode::Set::Connection::IncludeConstraint","Gecode/Set/Connection/IncludeConstraint.html#method-i-post","()",""],["post","Gecode::Set::Domain::DomainConstraint","Gecode/Set/Domain/DomainConstraint.html#method-i-post","()",""],["post","Gecode::Set::Domain::EqualityDomainConstraint","Gecode/Set/Domain/EqualityDomainConstraint.html#method-i-post","()",""],["post","Gecode::Set::Operation::OperationConstraint","Gecode/Set/Operation/OperationConstraint.html#method-i-post","()",""],["post","Gecode::Set::Relation::EqualityRelationConstraint","Gecode/Set/Relation/EqualityRelationConstraint.html#method-i-post","()",""],["post","Gecode::Set::Relation::RelationConstraint","Gecode/Set/Relation/RelationConstraint.html#method-i-post","()",""],["post","Gecode::SetElements::Relation::RelationConstraint","Gecode/SetElements/Relation/RelationConstraint.html#method-i-post","()",""],["post","Gecode::SetEnum::Channel::IntEnumChannelConstraint","Gecode/SetEnum/Channel/IntEnumChannelConstraint.html#method-i-post","()",""],["post","Gecode::SetEnum::Distinct::AtMostOneConstraint","Gecode/SetEnum/Distinct/AtMostOneConstraint.html#method-i-post","()",""],["pre_arith_mult","Gecode::Int::IntOperand","Gecode/Int/IntOperand.html#method-i-pre_arith_mult","(int_operand)",""],["pre_bool_construct_receiver","Gecode::Bool::Linear::ExpressionTree","Gecode/Bool/Linear/ExpressionTree.html#method-i-pre_bool_construct_receiver","(params)",""],["pre_cardinality_construct_receiver","Gecode::Set::Cardinality::SetSizeOperand","Gecode/Set/Cardinality/SetSizeOperand.html#method-i-pre_cardinality_construct_receiver","(params)",""],["pre_channel_equals","Gecode::Int::IntConstraintReceiver","Gecode/Int/IntConstraintReceiver.html#method-i-pre_channel_equals","(bool, options = {})",""],["pre_element_included","Gecode::FixnumEnum::FixnumEnumOperand","Gecode/FixnumEnum/FixnumEnumOperand.html#method-c-pre_element_included","(enum_mod)",""],["pre_element_included","Gecode::IntEnum::IntEnumOperand","Gecode/IntEnum/IntEnumOperand.html#method-c-pre_element_included","(enum_mod)",""],["pre_relation_complement","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-pre_relation_complement","(constant_set, options = {})",""],["pre_relation_disjoint","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-pre_relation_disjoint","(constant_set, options = {})",""],["pre_relation_equality","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-pre_relation_equality","(constant_set, options = {})",""],["pre_relation_subset","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-pre_relation_subset","(constant_set, options = {})",""],["pre_relation_superset","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-pre_relation_superset","(constant_set, options = {})",""],["pre_set_element_included","Gecode::SetEnum::SetEnumOperand","Gecode/SetEnum/SetEnumOperand.html#method-c-pre_set_element_included","(mod)",""],["reification_var","Gecode::ReifiableConstraint","Gecode/ReifiableConstraint.html#method-i-reification_var","()","<p>Gets the reification operand of the constraint, nil if none exists.\n"],["reification_var=","Gecode::ReifiableConstraint","Gecode/ReifiableConstraint.html#method-i-reification_var-3D","(new_var)","<p>Sets the reification operand of the constraint, nil if none should be used.\n"],["relation_constraint","Gecode::Bool::Linear::ExpressionTree","Gecode/Bool/Linear/ExpressionTree.html#method-i-relation_constraint","(relation, bool_operand_or_fix, params)",""],["relation_constraint","Gecode::Int::Linear::ExpressionTree","Gecode/Int/Linear/ExpressionTree.html#method-i-relation_constraint","(relation, int_operand_or_fix, params)",""],["relation_constraint","Gecode::Int::ShortCircuitRelationsOperand","Gecode/Int/ShortCircuitRelationsOperand.html#method-i-relation_constraint","(relation, int_operand_or_fix, params)","<p>Returns a constraint that constrains this operand to have relation\n<code>relation</code> to <code>int_operand_or_fix</code>, which …\n"],["relation_constraint","Gecode::IntEnum::Count::IntEnumCountOperand","Gecode/IntEnum/Count/IntEnumCountOperand.html#method-i-relation_constraint","(relation, int_operand_or_fix, params)",""],["relation_constraint","Gecode::Set::Operation::OperationSetOperand","Gecode/Set/Operation/OperationSetOperand.html#method-i-relation_constraint","(relation, set_operand_or_constant_set, params)",""],["relation_constraint","Gecode::Set::ShortCircuitRelationsOperand","Gecode/Set/ShortCircuitRelationsOperand.html#method-i-relation_constraint","(relation, set_operand_or_constant_set, params)","<p>Returns a constraint that constrains this operand to have relation\n<code>relation</code> to <code>set_operand_or_constant_set</code> …\n"],["repeat","Gecode::Mixin","Gecode/Mixin.html#method-i-repeat","(regexp, at_least = nil, at_most = nil)","<p>Specifies an integer regexp that matches <code>regexp</code> repeated\nbetween <code>at_least</code> and <code>at_most</code> times (inclusive).\n…\n"],["reset!","Gecode::Mixin","Gecode/Mixin.html#method-i-reset-21","()","<p>Returns to the original state, before any search was made (but  propagation\nmight have been performed). …\n"],["row","Gecode::Util::EnumMatrix","Gecode/Util/EnumMatrix.html#method-i-row","(i)",""],["search_stats","Gecode::Mixin","Gecode/Mixin.html#method-i-search_stats","()","<p>Returns search statistics providing various information from Gecode about\nthe search that resulted in …\n"],["set_var","Gecode::Mixin","Gecode/Mixin.html#method-i-set_var","(glb_domain = [], lub_domain = LARGEST_SET_BOUND, cardinality_range = nil)","<p>Creates a set variable with the specified domain for greatest lower bound\nand least upper bound (specified …\n"],["set_var_array","Gecode::Mixin","Gecode/Mixin.html#method-i-set_var_array","(count, glb_domain = [], lub_domain = LARGEST_SET_BOUND, cardinality_range = nil)","<p>Creates an array containing the specified number of set variables. The\nparameters beyond count are the …\n"],["set_var_matrix","Gecode::Mixin","Gecode/Mixin.html#method-i-set_var_matrix","(row_count, col_count, glb_domain = [], lub_domain = LARGEST_SET_BOUND, cardinality_range = nil)","<p>Creates a matrix containing the specified number of rows and columns \nfilled with set variables. The …\n"],["size","Gecode::Set::SetOperand","Gecode/Set/SetOperand.html#method-i-size","()","<p>Produces an IntOperand representing the size of the set.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The size of +set+.</span>\n<span class=\"ruby-identifier\">set</span>.<span class=\"ruby-identifier\">size</span>\n</pre>\n"],["solution","Gecode::Mixin","Gecode/Mixin.html#method-i-solution","(&block)","<p>Yields the first solution (if any) to the block. If no solution is found\nthen the block is not used. …\n"],["solve","Gecode","Gecode.html#method-c-solve","(&block)","<p>Provides a convenient way to construct a model and then find a solution.\nThe model constructed uses the …\n"],["solve!","Gecode::Mixin","Gecode/Mixin.html#method-i-solve-21","(options = {})","<p>Finds the first solution to the modelled problem and updates the variables\nto that solution. The found …\n"],["sorted","Gecode::IntEnum::IntEnumConstraintReceiver","Gecode/IntEnum/IntEnumConstraintReceiver.html#method-i-sorted","(options = {})","<p>Constrains the elements in this enumeration to be sorted in ascending \norder. The following options can …\n"],["sqrt","Gecode::Int::IntOperand","Gecode/Int/IntOperand.html#method-i-sqrt","()",""],["square_root","Gecode::Int::IntOperand","Gecode/Int/IntOperand.html#method-i-square_root","()","<p>Produces an IntOperand representing the square root of this  operand\nrounded down.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The square ...</span>\n</pre>\n"],["squared","Gecode::Int::IntOperand","Gecode/Int/IntOperand.html#method-i-squared","()","<p>Produces an IntOperand representing this operand squared.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The value of +int_op*int_op+.</span>\n<span class=\"ruby-identifier\">int_op</span>.<span class=\"ruby-identifier\">squared</span>\n</pre>\n"],["subset","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-subset","(constant_set, options = {})","<p>Constrains the set operand to be a subset of <code>constant_set</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +set+ must be a subset of [1,2,5] ...</span>\n</pre>\n"],["sum","Gecode::Set::SetOperand","Gecode/Set/SetOperand.html#method-i-sum","(options = {:weights => weights = Hash.new(1)})","<p>Produces an IntOperand representing the sum of the values in the set. One\nof the following options may …\n"],["superset","Gecode::Set::SetConstraintReceiver","Gecode/Set/SetConstraintReceiver.html#method-i-superset","(constant_set, options = {})","<p>Constrains the set operand to be a superset of <code>constant_set</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +set+ must be a superset of [1,2,5] ...</span>\n</pre>\n"],["to_bool_enum","Gecode::BoolEnumMethods","Gecode/BoolEnumMethods.html#method-i-to_bool_enum","()","<p>Returns the receiver.\n"],["to_bool_var","Gecode::Bool::ExpressionTree","Gecode/Bool/ExpressionTree.html#method-i-to_bool_var","()",""],["to_bool_var","Gecode::Bool::ShortCircuitEqualityOperand","Gecode/Bool/ShortCircuitEqualityOperand.html#method-i-to_bool_var","()",""],["to_bool_var","Gecode::BoolVar","Gecode/BoolVar.html#method-i-to_bool_var","()","<p>Returns the receiver.\n"],["to_fixnum_enum","Gecode::FixnumEnumMethods","Gecode/FixnumEnumMethods.html#method-i-to_fixnum_enum","()","<p>Returns the receiver.\n"],["to_int_enum","Gecode::IntEnumMethods","Gecode/IntEnumMethods.html#method-i-to_int_enum","()","<p>Returns the receiver.\n"],["to_int_var","Gecode::Int::ShortCircuitEqualityOperand","Gecode/Int/ShortCircuitEqualityOperand.html#method-i-to_int_var","()",""],["to_int_var","Gecode::Int::ShortCircuitRelationsOperand","Gecode/Int/ShortCircuitRelationsOperand.html#method-i-to_int_var","()",""],["to_int_var","Gecode::IntVar","Gecode/IntVar.html#method-i-to_int_var","()","<p>Returns the receiver.\n"],["to_minimodel_bool_expr","Gecode::Bool::ExpressionNode","Gecode/Bool/ExpressionNode.html#method-i-to_minimodel_bool_expr","()","<p>Returns a MiniModel boolean expression representing the tree.\n"],["to_minimodel_bool_expr","Gecode::Bool::ExpressionTree","Gecode/Bool/ExpressionTree.html#method-i-to_minimodel_bool_expr","()","<p>Returns a MiniModel boolean expression representing the tree.\n"],["to_minimodel_lin_exp","Gecode::Bool::Linear::ExpressionNode","Gecode/Bool/Linear/ExpressionNode.html#method-i-to_minimodel_lin_exp","()","<p>Converts the linear expression to an instance of \nGecode::Raw::MiniModel::LinExpr\n"],["to_minimodel_lin_exp","Gecode::Bool::Linear::ExpressionTree","Gecode/Bool/Linear/ExpressionTree.html#method-i-to_minimodel_lin_exp","()","<p>Converts the linear expression to an instance of \nGecode::Raw::MiniModel::LinExpr\n"],["to_minimodel_lin_exp","Gecode::Int::Linear::ExpressionNode","Gecode/Int/Linear/ExpressionNode.html#method-i-to_minimodel_lin_exp","()","<p>Converts the linear expression to an instance of \nGecode::Raw::MiniModel::LinExpr\n"],["to_minimodel_lin_exp","Gecode::Int::Linear::ExpressionTree","Gecode/Int/Linear/ExpressionTree.html#method-i-to_minimodel_lin_exp","()","<p>Converts the linear expression to an instance of \nGecode::Raw::MiniModel::LinExpr\n"],["to_selected_set","Gecode::SelectedSet::SelectedSetOperand","Gecode/SelectedSet/SelectedSetOperand.html#method-i-to_selected_set","()","<p>Returns the set enum and set that make up the selected set operand.\n"],["to_set_elements","Gecode::SetElements::SetElementsOperand","Gecode/SetElements/SetElementsOperand.html#method-i-to_set_elements","()","<p>Returns the set operand that makes up the set elements operand.\n"],["to_set_enum","Gecode::SetEnumMethods","Gecode/SetEnumMethods.html#method-i-to_set_enum","()","<p>Returns the receiver.\n"],["to_set_var","Gecode::Set::ShortCircuitEqualityOperand","Gecode/Set/ShortCircuitEqualityOperand.html#method-i-to_set_var","()",""],["to_set_var","Gecode::Set::ShortCircuitRelationsOperand","Gecode/Set/ShortCircuitRelationsOperand.html#method-i-to_set_var","()",""],["to_set_var","Gecode::SetVar","Gecode/SetVar.html#method-i-to_set_var","()","<p>Returns the receiver.\n"],["track_variable","Gecode::Mixin","Gecode/Mixin.html#method-i-track_variable","(variable)","<p>Starts tracking a variable that depends on the space. All variables \ncreated should call this method …\n"],["true","Gecode::Bool::BoolConstraintReceiver","Gecode/Bool/BoolConstraintReceiver.html#method-i-true","(options = {})","<p>Constrains the boolean operand to be true.\n<p>Examples \n\n<pre># +b1+ and +b2+ must be true.\n(b1 &amp; b2).must_be.true ...</pre>\n"],["union","Gecode::FixnumEnum::FixnumEnumOperand","Gecode/FixnumEnum/FixnumEnumOperand.html#method-i-union","(set_operand)","<p>Produces a new SetOperand representing the union between this operand, \ninterpreted as a constant set, …\n"],["union","Gecode::SelectedSet::SelectedSetOperand","Gecode/SelectedSet/SelectedSetOperand.html#method-i-union","()","<p>Produces a SetOperand representing the selected sets’ union.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The union of all sets selected ...</span>\n</pre>\n"],["union","Gecode::Set::SetOperand","Gecode/Set/SetOperand.html#method-i-union","(set_operand_or_constant_set)","<p>Produces a new SetOperand representing the union between this operand  and\n<code>set_operand_or_constant_set</code> …\n"],["union","Gecode::SetEnum::SetEnumOperand","Gecode/SetEnum/SetEnumOperand.html#method-i-union","()","<p>Produces a SetOperand representing the union of all sets in this\nenumeration.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># The union of ...</span>\n</pre>\n"],["upper_bound","Gecode::SetVar","Gecode/SetVar.html#method-i-upper_bound","()","<p>Gets all the elements located in the least upper bound of the set (an \nEnumerable).\n"],["upper_bound_range","Gecode::SetEnumMethods","Gecode/SetEnumMethods.html#method-i-upper_bound_range","()","<p>Returns the range of the union of the contained sets’ upper bounds.\n"],["value","Gecode::BoolVar","Gecode/BoolVar.html#method-i-value","()","<p>Gets the values in the assigned boolean variable (true or false). The \nvariable must be assigned, if …\n"],["value","Gecode::IntVar","Gecode/IntVar.html#method-i-value","()","<p>Gets the value of the assigned integer variable (a Fixnum). The variable\nmust be assigned, if it isn’t …\n"],["value","Gecode::SetVar","Gecode/SetVar.html#method-i-value","()","<p>Gets the values in the assigned set variable (an enumerable).\n"],["values","Gecode::VariableEnumMethods","Gecode/VariableEnumMethods.html#method-i-values","()","<p>Gets the values of all the operands in the enum.\n"],["wrap_enum","Gecode::Mixin","Gecode/Mixin.html#method-i-wrap_enum","(enum)","<p>Wraps a custom enumerable so that constraints can be specified using it.\nThe argument is altered and …\n"],["|","Gecode::Bool::BoolOperand","Gecode/Bool/BoolOperand.html#method-i-7C","(bool_op)","<p>Produces a new BoolOperand representing this operand OR\n<code>bool_op</code>.\n<p>Examples \n\n<pre class=\"ruby\"><span class=\"ruby-comment\"># +b1+ and +b2+</span>\n<span class=\"ruby-identifier\">b1</span> <span class=\"ruby-operator\">&amp;</span> <span class=\"ruby-identifier\">b2</span>\n</pre>\n"],["|","Gecode::ReifiableConstraint","Gecode/ReifiableConstraint.html#method-i-7C","(constraint)","<p>Produces a disjunction of two reifiable constraints, producing a new\nreifiable constraint.\n"]]}}