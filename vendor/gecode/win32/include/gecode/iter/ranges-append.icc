/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:05:50 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3515 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Iter { namespace Ranges {

  /**
   * \brief %Range iterator for appending two range iterators
   *
   * The iterators are allowed to be adjacent but not to
   * overlap (in this case, use Gecode::Iter::Union).
   *
   * Requires \code #include "gecode/iter.hh" \endcode
   * \ingroup FuncIterRanges
   */

  template <class I, class J>
  class Append : public MinMax {
  protected:
    /// First iterator
    I i;
    /// Iterator to be appended
    J j;
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    Append(void);
    /// Initialize with iterator \a i and \a j
    Append(I& i, J& j);
    /// Initialize with iterator \a i and \a j
    void init(I& i, J& j);
    //@}

    /// \name Iteration control
    //@{
    /// Move iterator to next range (if possible)
    void operator++(void);
    //@}
  };


  /**
   * \brief Range iterator for appending arbitrarily many iterators
   *
   * The iterators are allowed to be adjacent but not to
   * overlap (in this case, use Gecode::Iter::NaryUnion)
   *
   * Requires \code #include "gecode/iter.hh" \endcode
   * \ingroup FuncIterRanges
   */

  template <class I>
  class NaryAppend  :  public MinMax {
  protected:
    /// The array of iterators to be appended
    I* r;
    /// Number of iterators
    unsigned int n;
    /// Number of current iterator being processed
    unsigned int active;
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    NaryAppend(void);
    /// Initialize with \a n iterators in \a i
    NaryAppend(I* i, unsigned int n);
    /// Initialize with \a n iterators in \a i
    void init(I* i, unsigned int n);
    //@}

    /// \name Iteration control
    //@{
    /// Move iterator to next range (if possible)
    void operator++(void);
    //@}
  };


  /*
   * Binary Append
   *
   */

  template <class I, class J>
  inline void
  Append<I,J>::operator++(void) {
    if (i()) {
      mi = i.min(); ma = i.max();
      ++i;
      if (!i() && j() && (j.min() == ma+1)) {
	ma = j.max();
	++j;
      }
    } else if (j()) {
      mi = j.min();  ma = j.max();
      ++j;
    } else {
      finish();
    }
  }


  template <class I, class J>
  forceinline
  Append<I,J>::Append(void) {}

  template <class I, class J>
  forceinline
  Append<I,J>::Append(I& i0, J& j0)
    : i(i0), j(j0) {
    if (i() || j())
      operator++();
    else
      finish();
  }

  template <class I, class J>
  forceinline void
  Append<I,J>::init(I& i0, J& j0) {
    i = i0; j = j0;
    if (i() || j())
      operator++();
    else
      finish();
  }


  /*
   * Nary Append
   *
   */

  template <class I>
  inline void
  NaryAppend<I>::operator++(void) {
    mi = r[active].min();
    ma = r[active].max();
    ++r[active];
    while (!r[active]()) {
      //Skip empty iterators:
      do {
	active++;
	if (active >= n) {
	  finish(); return;
	}
      } while (!r[active]());
      if (r[active].min() == ma+1){
	ma = r[active].max();
	++r[active];
      } else {
	return;
      }
    }
  }

  template <class I>
  forceinline
  NaryAppend<I>::NaryAppend(void) {}

  template <class I>
  inline
  NaryAppend<I>::NaryAppend(I* r0, unsigned int n0)
    : r(r0), n(n0), active(0) {
    while (active < n && !r[active]())
      active++;
    if (active < n){
      operator++();
    } else {
      finish();
    }
  }

  template <class I>
  inline void
  NaryAppend<I>::init(I* r0, unsigned int n0) {
    r = r0; n = n0; active = 0;
    while (active < n && !r[active]())
      active++;
    if (active < n){
      operator++();
    } else {
      finish();
    }
  }

}}}

// STATISTICS: iter-any

