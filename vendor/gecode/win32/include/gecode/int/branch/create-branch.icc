/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2002
 *
 *  Last modified:
 *     $Date: 2008-07-11 15:48:58 +0200 (Fri, 11 Jul 2008) $ by $Author: schulte $
 *     $Revision: 7366 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Int { namespace Branch {

  template <template <class,class,class,class> class B>
  void
  createBranch(Space* home, const IntVarArgs& x,
               IntVarBranch vars, IntValBranch vals) {
    ViewArray<IntView> xv(home,x);
    switch (vars) {
    case INT_VAR_NONE:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByNone>(home,xv,vals); break;
    case INT_VAR_MIN_MIN:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByMinMin>(home,xv,vals); break;
    case INT_VAR_MIN_MAX:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByMinMax>(home,xv,vals); break;
    case INT_VAR_MAX_MIN:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByMaxMin>(home,xv,vals); break;
    case INT_VAR_MAX_MAX:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByMaxMax>(home,xv,vals); break;
    case INT_VAR_SIZE_MIN:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::BySizeMin>(home,xv,vals); break;
    case INT_VAR_SIZE_MAX:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::BySizeMax>(home,xv,vals); break;
    case INT_VAR_DEGREE_MIN:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByDegreeMin>(home,xv,vals); break;
    case INT_VAR_DEGREE_MAX:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByDegreeMax>(home,xv,vals); break;
    case INT_VAR_SIZE_DEGREE_MIN:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::BySizeDegreeMin>(home,xv,vals); break;
    case INT_VAR_SIZE_DEGREE_MAX:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::BySizeDegreeMax>(home,xv,vals); break;
    case INT_VAR_REGRET_MIN_MIN:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByRegretMinMin>(home,xv,vals); break;
    case INT_VAR_REGRET_MIN_MAX:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByRegretMinMax>(home,xv,vals); break;
    case INT_VAR_REGRET_MAX_MIN:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByRegretMaxMin>(home,xv,vals); break;
    case INT_VAR_REGRET_MAX_MAX:
      if (home->failed()) return;
      Branch::create<B,IntView,Branch::ByRegretMaxMax>(home,xv,vals); break;
    default:
      throw UnknownBranching("Int::branch");
    }
  }
  
  template <template <class,class,class,class> class B>
  void
  createBranch(Space* home, const BoolVarArgs& x, 
               IntVarBranch vars, IntValBranch vals) {
    ViewArray<BoolView> xv(home,x);
    switch (vars) {
    case INT_VAR_NONE:
    case INT_VAR_MIN_MIN:
    case INT_VAR_MIN_MAX:
    case INT_VAR_MAX_MIN:
    case INT_VAR_MAX_MAX:
    case INT_VAR_SIZE_MIN:
    case INT_VAR_SIZE_MAX:
    case INT_VAR_REGRET_MIN_MIN:
    case INT_VAR_REGRET_MIN_MAX:
    case INT_VAR_REGRET_MAX_MIN:
    case INT_VAR_REGRET_MAX_MAX:
      switch (vals) {
      case INT_VAL_MIN:
      case INT_VAL_MED:
      case INT_VAL_SPLIT_MIN:
        if (home->failed()) return;
        (void) new (home) 
          B<BoolView,Branch::NoValue,
            Branch::ByNone<BoolView>,
            Branch::ValZeroOne<BoolView> >(home,xv);
        break;
      case INT_VAL_MAX:
      case INT_VAL_SPLIT_MAX:
        if (home->failed()) return;
        (void) new (home) 
          B<BoolView,Branch::NoValue,
            Branch::ByNone<BoolView>,
            Branch::ValOneZero<BoolView> >(home,xv);
        break;
      default:
        throw UnknownBranching("Int::branch");
      }
      break;
    case INT_VAR_DEGREE_MIN:
    case INT_VAR_SIZE_DEGREE_MAX:
      switch (vals) {
      case INT_VAL_MIN:
      case INT_VAL_MED:
      case INT_VAL_SPLIT_MIN:
        if (home->failed()) return;
        (void) new (home) 
          B<BoolView,Branch::NoValue,
            Branch::ByDegreeMinNoTies<BoolView>,
            Branch::ValZeroOne<BoolView> >(home,xv);
        break;
      case INT_VAL_MAX:
      case INT_VAL_SPLIT_MAX:
        if (home->failed()) return;
        (void) new (home) 
          B<BoolView,Branch::NoValue,
            Branch::ByDegreeMinNoTies<BoolView>,
            Branch::ValOneZero<BoolView> >(home,xv);
        break;
      default:
        throw UnknownBranching("Int::branch");
      }
      break;
    case INT_VAR_DEGREE_MAX:
    case INT_VAR_SIZE_DEGREE_MIN:
      switch (vals) {
      case INT_VAL_MIN:
      case INT_VAL_MED:
      case INT_VAL_SPLIT_MIN:
        if (home->failed()) return;
        (void) new (home) 
          B<BoolView,Branch::NoValue,
            Branch::ByDegreeMaxNoTies<BoolView>,
            Branch::ValZeroOne<BoolView> >(home,xv);
        break;
      case INT_VAL_MAX:
      case INT_VAL_SPLIT_MAX:
        if (home->failed()) return;
        (void) new (home) 
          B<BoolView,Branch::NoValue,
            Branch::ByDegreeMaxNoTies<BoolView>,
            Branch::ValOneZero<BoolView> >(home,xv);
        break;
      default:
        throw UnknownBranching("Int::branch");
      }
      break;
    default:
      throw UnknownBranching("Int::branch");
    }
  }
      
}}}

// STATISTICS: int-post
