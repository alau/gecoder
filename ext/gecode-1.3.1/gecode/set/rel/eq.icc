/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Contributing authors:
 *     Gabor Szokoli <szokoli@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2004
 *     Christian Schulte, 2004
 *     Gabor Szokoli, 2004
 *
 *  Last modified:
 *     $Date: 2005-11-15 17:40:47 +0100 (Tue, 15 Nov 2005) $ by $Author: tack $
 *     $Revision: 2576 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Set { namespace Rel {

  template <class View0, class View1>
  forceinline
  Eq<View0,View1>::Eq(Space* home, View0 x, View1 y)
    : InhomBinaryPropagator<View0,PC_SET_ANY,View1,PC_SET_ANY>(home,x,y) {}

  template <class View0, class View1>
  forceinline
  Eq<View0,View1>::Eq(Space* home, bool share, Eq& p)
    : InhomBinaryPropagator<View0,PC_SET_ANY,View1,PC_SET_ANY>(home,share,p) {}

  template <class View0, class View1>
  ExecStatus
  Eq<View0,View1>::post(Space* home, View0 x, View1 y) {
    (void) new (home) Eq(home,x,y);
    return ES_OK;
  }

  template <class View0, class View1>
  Actor*
  Eq<View0,View1>::copy(Space* home, bool share) {
    return new (home) Eq(home,share,*this);
  }


  template <class View0, class View1>
  ExecStatus
  Eq<View0,View1>::propagate(Space* home) {

    ModEvent me0 = View0::pme(this);
    ModEvent me1 = View1::pme(this);

    if ( testSetEventLB(me0,me1) ) {
      GlbRanges<View0> x0lb(x0);
      GlbRanges<View1> x1lb(x1);
      Iter::Ranges::Union<GlbRanges<View0>,GlbRanges<View1> > lbu(x0lb,x1lb);
      Iter::Ranges::Cache<Iter::Ranges::Union
	<GlbRanges<View0>, GlbRanges<View1> > > lbuc(lbu);
      GECODE_ME_CHECK ( x0.includeI(home,lbuc) );
      lbuc.reset();
      GECODE_ME_CHECK ( x1.includeI(home,lbuc) );
    }

    if (testSetEventUB(me0,me1) ) {
      LubRanges<View0> x0ub(x0);
      LubRanges<View1> x1ub(x1);
      Iter::Ranges::Inter<LubRanges<View0>,LubRanges<View1> > ubi(x0ub,x1ub);
      Iter::Ranges::Cache<Iter::Ranges::Inter
	<LubRanges<View0>,LubRanges<View1> > > ubic(ubi);
      GECODE_ME_CHECK ( x0.intersectI(home,ubic) );
      ubic.reset();
      GECODE_ME_CHECK ( x1.intersectI(home,ubic) );
    }

    if (testSetEventCard(me0,me1) ) {
      unsigned int max = std::min(x0.cardMax(),x1.cardMax());
      unsigned int min = std::max(x0.cardMin(),x1.cardMin());
      GECODE_ME_CHECK ( x0.cardMax(home,max) );
      GECODE_ME_CHECK ( x1.cardMax(home,max) );
      GECODE_ME_CHECK ( x0.cardMin(home,min) );
      GECODE_ME_CHECK ( x1.cardMin(home,min) );
    }

    if (x0.assigned()) {
      assert (x1.assigned());
      return ES_SUBSUMED;
    }
    return shared(x0,x1) ? ES_NOFIX : ES_FIX;
  }

}}}

// STATISTICS: set-prop
