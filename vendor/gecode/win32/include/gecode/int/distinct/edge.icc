/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2003
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:03:26 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3512 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Distinct {

  template <class View>
  forceinline
  Edge<View>::Edge(Node<View>* s, Node<View>* d)
    : sd(s,d) {
    s->add(this);
  }

  template <class View>
  forceinline Node<View>*
  Edge<View>::dst(Node<View>* s) const {
    return sd.ptr(s);
  }

  template <class View>
  forceinline void
  Edge<View>::revert(Node<View>* d) {
    unlink();
    d->add(this);
  }

  template <class View>
  forceinline ViewNode<View>*
  Edge<View>::view(ValNode<View>* n) const {
    return static_cast<ViewNode<View>*>(sd.ptr(n));
  }
  template <class View>
  forceinline ValNode<View>*
  Edge<View>::val(ViewNode<View>* x) const {
    return static_cast<ValNode<View>*>(sd.ptr(x));
  }

  template <class View>
  forceinline bool
  Edge<View>::used(Node<View>* v) const {
    return sd.is_set() || (v->comp == sd.ptr(v)->comp);
  }
  template <class View>
  forceinline void
  Edge<View>::use(void) {
    sd.set();
  }
  template <class View>
  forceinline void
  Edge<View>::free(void) {
    sd.unset();
  }

  template <class View>
  forceinline Edge<View>*
  Edge<View>::next_edge(void) const {
    return _next_edge;
  }
  template <class View>
  forceinline Edge<View>**
  Edge<View>::next_edge_ref(void) {
    return &_next_edge;
  }
  template <class View>
  forceinline Edge<View>*
  Edge<View>::next(void) const {
    return static_cast<Edge<View>*>(BiLink::next());
  }

  template <class View>
  forceinline void*
  Edge<View>::operator new(size_t, void* p) {
    return p;
  }

}}}

// STATISTICS: int-prop

