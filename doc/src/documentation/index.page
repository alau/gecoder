---
title: Getting Started
longTitle: Getting Started with Gecode/R, a Ruby Interface to Gecode
inMenu: true
description: How to get started with using Gecode/R to solve constraint programming problems.
---

h1. Getting Started

<div class="summary"> 
<p>Constraint programming is declarative. You
"formulate the problem":formulating_problems.html and then ask the solver
(Gecode) to find a solution. Problems are formulated as variables that
have to be assigned values to satisfy specified constraints.</p>
</div>

h2. Toy Example

The following script formulates and solves the toy problem of finding
the integer @x@ such that @x@ times 5 equals 25. 

<ruby>
require 'rubygems'
require 'gecoder'
include Gecode::Mixin

x = int_var
(x*5).must == 25
branch_on x

solve!
puts x.value
</ruby>

h3. Setting Up

<ruby>
require 'rubygems'
require 'gecoder'
include Gecode::Mixin
</ruby>

{RDoc: Gecode::Mixin} is a mixin that provides all the methods used.
Mixing it into a class rather than into the top level context is advised
for serious use.

h3. Formulating the Problem

<ruby>
x = int_var
(x*5).must == 25
</ruby>

Formulates the problem by, on the first line, "creating an integer
variable":formulating_problems.html#creating_integer_variables @x@ and
then, on the second line, constraining 5 times any value assigned to @x@
to equal 25 (constraining the value assigned to @x@ to be a solution to
the problem).

There are "many types of variables and ways to create
them":formulating_problems.html#variables_and_operands. All
"constraints":formulating_problems.html#constraints can be recognized by
the use of @#must@. The second line uses a property and a constraint
belonging to "integer operands":operands/integer-operands.html.
 
<ruby>
branch_on x
</ruby>

Tells Gecode/R that @x@ should be assigned a value to solve the problem.
In more complex examples there can be temporary variables that are only
used to help formulate the problem and do not need to be assigned a
specific value.

Branching is also used to "specify how to explore the search
space":formulating_problems.html#branching.

h3. Finding the Solution

<ruby>
solve!
puts x.value
</ruby>

The first line "searches for a
solution":searching_for_solutions.html#searching_for_one_solution.  The
second line displays the value assigned to the variable in the solution.

h2. Modelling Problems

Translating a problem into variables and constraints is not trivial.
The translation affects how fast a solution is found. The "modelling
tutorial":modelling/index.html gives an introduction of how to perform
the translation along with detailed examples.
