/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2006
 *
 *  Last modified:
 *     $Date: 2006-07-12 15:53:12 +0200 (Wed, 12 Jul 2006) $ by $Author: tack $
 *     $Revision: 3349 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Iter { namespace Ranges {

  /**
   * \brief %Range iterator with size counting
   *
   * Allows to iterate the ranges as defined by the input iterator
   * and access the size of the set already iterated. After complete
   * iteration, the reported size is thus the size of the set.
   *
   * Requires \code #include "gecode/iter.hh" \endcode
   * \ingroup FuncIterRanges
   */
  template <class I>
  class Size  {
  protected:
    /// Iterator to compute size of
    I i;
    /// Accumulated size
    unsigned int _size;
  public:
    /// \name Constructors and initialization
    //@{
    /// Default constructor
    Size(void);
    /// Initialize with ranges from \a i
    Size(I& i);
    /// Initialize with ranges from \a i
    void init(I& i);
    //@}

    /// \name Iteration control
    //@{
    /// Test whether iterator is still at a range or done
    bool operator()(void);
    /// Move iterator to next range (if possible)
    void operator++(void);
    //@}

    /// \name %Range access
    //@{
    /// Return smallest value of range
    int min(void) const;
    /// Return largest value of range
    int max(void) const;
    /// Return width of range (distance between minimum and maximum)
    unsigned int width(void) const;
    //@}

    /// \name %Size access
    //@{
    /// Return accumulated size
    unsigned int size(void) const;
    //@}
  };


  template <class I>
  forceinline
  Size<I>::Size(void)
    : _size(0) {}

  template <class I>
  inline void
  Size<I>::init(I& i0) {
    i.init(i0);
    _size = 0;
  }

  template <class I>
  inline
  Size<I>::Size(I& i0) : i(i0), _size(0) {}

  template <class I>
  forceinline void
  Size<I>::operator++(void) {
    _size += i.width();
    ++i;
  }
  template <class I>
  forceinline bool
  Size<I>::operator()(void) {
    return i();
  }

  template <class I>
  forceinline int
  Size<I>::min(void) const {
    return i.min();
  }
  template <class I>
  forceinline int
  Size<I>::max(void) const {
    return i.max();
  }
  template <class I>
  forceinline unsigned int
  Size<I>::width(void) const {
    return i.width();
  }

  template <class I>
  forceinline unsigned int
  Size<I>::size(void) const {
    return _size;
  }

}}}

// STATISTICS: iter-any

