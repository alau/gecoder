---
title: Constraints
inMenu: true
description: The different constraints available in Gecode/R to use when modelling in Ruby.
---
h2. Constraints

There exist several different constraints that can be used when modelling. They
are usually used with some form of call to the methods @must@ or @must_not@ of
variables.

h3. Integer constraints

h4. Simple relations

Simple relation constraints can for instance specify that x must be strictly 
greater than 3, where x is an integer variable. An example of how to write that 
would be the following.

<ruby>
x.must > 3
</ruby>

Only constant integers can be used in the right hand side at the moment. The
following relations are supported (the aliases of each relation are also 
listed).

* @<@, @lesser@, @lesser_than@
* @>@, @greater@, @greater_than@
* @>=@, @greater_or_equal@, @greater_than_or_equal_to@
* @<=@, @less_or_equal@, @less_than_or_equal_to@
* @==@, @equal@, @equal_to@

Each can be negated by using @must_not@ instead of @must@. For instance to 
express that x must not be 0 we can use the following.

<ruby>
x.must_not == 0
</ruby>
 
The following are also other valid ways to specify that constraint.

<ruby>
x.must_not.equal(0)
x.must_not_be.equal_to(0)
</ruby>

h4. Linear

Linear constraints can be used to specify that a linear equation containing
variables must hold. It's specified in similar way to simple relation 
constraints. The following expresses that x + y must be equal to z + 3 where
x,y,z are all integer variables.

<ruby>
(x + y).must == z + 3
</ruby>

The constraint supports the same relations as simple relation constraints 
inlcuding negating relations using @must_not@.

h4. Domain

Domain constraints are used to change the domain of integer variables (very much
like when one specifies the domain upon construction).

<ruby>
number.must_be.in 1..4
number.must_be.in [1,3,5]
</ruby>

h4. Distinct

The distinct constraint is used on enumerations of integer variables and 
specifies that they must all be distinct. The following will for instance
create an array of 8 integer variables with domains 0..9 and constrain them
all to be distinct (i.e. no two integer variables in the array may take the 
same value in solution).

<ruby>
numbers = int_var_array(8, 0..9)
numbers.must_be.distinct
</ruby>

@must_be@ can also be replaced with @must@. The constraint does not support 
negation.

The constraint also allows offsets, so one can specify that the numbers must be
distinct after certain offsets have been applied. The following specifies that
no number may be the previous number incremented by one.

<ruby>
numbers.with_offset((1..numbers.size).to_a.reverse).must_be.distinct
</ruby>

h4. Element

The element constraint basically provides array access with variables as 
positions. Lets say that we want to purchase a fruit that costs more than 500 
units, we could model that with the following.

<ruby>
fruit_selection = int_var(0..3) # We can pick one of four fruits.
prices = wrap_enum([45, 60, 764, 45]) # The prices of each fruit.
prices[fruit_selection].must > 500
</ruby>

@fruit_selection@ will become @2@ since that's the index of the only fruit that
costs more than 500. The advantage of using arrays in this situation is that
we can represent multiple fruits with the same price, which we could not if we
for instance would constrain @price_to_pay@ directly. It doesn't matter in the 
above example, but it would matter if we for example have a situation where we 
for want to purchase as many different fruits as possible with a given budget.

In the example @prices@ is an array of constant integers, but variable integer
arrays can also be used. Everything that's normally supported for single 
integer variables followed by @must*@ is supported by the result of the array 
access too.

h4. Channel

The channel constraint is used to give access to multiple viewpoints when 
modelling. Lets say that we're modelling a sequence of numbers that must be 
distinct, we could model that as an array of integer variables where the first
variable holds the value of the first position in the sequence, the second the
value of the second position and so on.

<ruby>
 elements = int_var_array(n, 0...n) # n variables with values from 0 to n-1.
 elements.must_be.distinct
</ruby>

That way @elements@ will contain the actual sequence when the problem has been
solved. But we could also model it as the positions of each value in 0..(n-1) in
the sequence. That way the first variable would hold the positions of @0@ in the
sequence, the second variable would hold the positions of @1@ in the sequence 
and so on.

<ruby>
 positions = int_var_array(n, 0...n)
 positions.must_be.distinct
</ruby>

In essence the relationship between the arrays @elements@ and @positions@ would
be that 

<ruby>
 elements.map{ |e| e.val }[i] == positions.map{ |p| p.val }.index(i)
</ruby>

for all i in 0..(n-1). They both represent different viewpoints of the sequence
and either one of them is good enough. Some constraints might however be easier
to express with one viewpoint than with the other. Hence one might want access
to both viewpoints simultaneously to use their respective advantages. This is
what the channel constraint does.

<ruby>
 elements.must.channel positions
</ruby>

The above links @elements@ and @positions@ so that they always maintain the 
above property. Hence we can pick the most comfortable viewpoint for each 
constraint and use it, posting a part of the constraint from one viewpoint and 
the rest from another.

h4. Equality

The equality constraint used on enumerations of integer variables specifies that
all variables in the numeration must be equal.

<ruby>
numbers.must_be.equal
</ruby>

h3. Boolean constraints

Boolean constraints are used to place constraints on boolean variables. The 
following are some example, b1, b2 and b3 are all boolean variables.

<ruby>
b1.must_be.true # Constrains b1 to be true.
b2.must_be.false # Constraint b2 to be false.
</ruby>

Disjunction (or) can is expressed with @|@ and conjunction (and) is expressed 
with @&@.

<ruby>
(b1 | b2).must == b1 # Constraint the disjunction of b1 and b2 to equal b1.
(b1 & b3).must_be.true # Constrains the conjunction of b1 and b3 to be true.
</ruby>

Variations of @must@ can be replaced with variations of @must_not@ to negate the
constraints. Nested expressions can be used on both sides.

<ruby>
((b1 & b1) | b3).must_not == ((b1 | b3) & b2)
</ruby>

h2. Options

Constraints can in general take a couple of options: *proagation strength* and
*reficiation*.

h3. Propagation strength

The propagation strength basically _suggests_ how much effort the solver puts 
into trying to prune the domains of variables using the constraint. A higher 
strength can reduce the search space quicker, but at a cost of making each 
propagation more costly (hence it's a balance).

It's usually worth testing a few different strength to see how well they work, 
a good choice of strengths can cut down the search time depending on the 
problem.

The different strengths are:
* @:value@ - value consistency (naive).
* @:domain@ - domain consistency, every element in the domain satisfies the constraint.
* @:bounds@ - bounds consistency, the boundaries of the domain satisfy the constraint.
* @:default@ - uses the default consistency for the constraint.

They are specified with the key @:strength@. The following places a domain 
consistent distinct constraint on @numbers@.

<ruby>
numbers.must_be.distinct(:strength => :domain)
</ruby>

h3. Reification
 
Reification is used to link a constraint to a boolean variable in such a way
that the variable is true if and only if the constraint is satisfied. The 
propagation goes both ways, so if the variable is constrained to be false then
the constraint is not allowed to be satisfied.

Reification can be thought of as a last resort glue which can be used to combine
constraints so that e.g. exactly 3 out of 17 constraints must be satisfied.

The variable to use for reification is specified with the key @:reify@. The
following connects the boolean variable @is_large@ with a relation constraint.

<ruby>
number.must_be.greater_than(17, :reify => is_large)
</ruby>

This constraint does not force @number@ to be greater than 17 (which would be 
the case if no reification has been used).

There exist some syntactic sugar for combining reifiable constraints, which can
be used with all reifiable constraints. To express a conjunction of two 
constraints one simply places @|@ between them, analogically for conjunctions 
and @&@. The new expression is also a reifiable constraint, so one can nest the
expressions if wanted. The following constrains that either x must be less than 
0 or y must be greater than 5 and x must be 0.

<ruby>
x.must < 0 | (y.must > 5 & x.must == 0)
</ruby>