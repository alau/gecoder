/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2004,2005
 *     Christian Schulte, 2004,2005
 *
 *  Last modified:
 *     $Date: 2006-08-24 11:25:05 +0200 (Thu, 24 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3559 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Set { namespace Select {

  template <class View>
  forceinline IdxView<View>*
  IdxView<View>::allocate(Space* home, int n) {
    return
    reinterpret_cast<IdxView<View>*>(home->alloc(sizeof(IdxView<View>)*n));
  }

  template <class View>
  IdxViewArray<View>::IdxViewArray(void) : xs(NULL), n(0) {}

  template <class View>
  IdxViewArray<View>::IdxViewArray(const IdxViewArray<View>& a) {
    n = a.n; xs = a.xs;
  }

  template <class View>
  IdxViewArray<View>::IdxViewArray(Space* home, const SetVarArgs& xa)
    : xs(NULL) {
    n = xa.size();
    if (n>0) {
      xs = IdxView<View>::allocate(home, n);
      for (int i = n; i--; ) {
	SetView xav(xa[i]);
	View xavv(xav);
        xs[i].idx = i; xs[i].var = xavv;
      }
    }
  }

  template <class View>
  forceinline int
  IdxViewArray<View>::size(void) const {
    return n;
  }

  template <class View>
  forceinline void
  IdxViewArray<View>::size(int n0) {
    n = n0;
  }

  template <class View>
  forceinline IdxView<View>&
  IdxViewArray<View>::operator[](int i) {
    assert((i >= 0) && (i < size()));
    return xs[i];
  }

  template <class View>
  forceinline const IdxView<View>&
  IdxViewArray<View>::operator[](int i) const {
    assert((i >= 0) && (i < size()));
    return xs[i];
  }

  template <class View>
  void
  IdxViewArray<View>::subscribe(Space* home, Propagator* p, PropCond pc,
				bool process) {
    for (int i = n; i--; )
      xs[i].var.subscribe(home,p,pc,process);
  }

  template <class View>
  void
  IdxViewArray<View>::cancel(Space* home, Propagator* p, PropCond pc) {
    for (int i = n; i--; )
      xs[i].var.cancel(home,p,pc);
  }

  template <class View>
  void
  IdxViewArray<View>::update(Space* home, bool share, IdxViewArray<View>& a) {
    n = a.size();
    if (n>0) {
      xs = IdxView<View>::allocate(home,n);
      for (int i=n; i--; ) {
	xs[i].idx = a[i].idx;
	xs[i].var.update(home,share,a[i].var);
      }
    }
  }

}}}

// STATISTICS: set-prop

