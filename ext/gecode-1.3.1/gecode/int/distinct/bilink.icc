/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2003
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:03:26 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3512 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Distinct {

  forceinline
  BiLink::BiLink(void) {
    _prev = this; _next = this;
  }

  forceinline BiLink*
  BiLink::prev(void) const {
    return _prev;
  }
  forceinline BiLink*
  BiLink::next(void) const {
    return _next;
  }
  forceinline void
  BiLink::prev(BiLink* l) {
    _prev = l;
  }
  forceinline void
  BiLink::next(BiLink* l) {
    _next = l;
  }

  forceinline void
  BiLink::add(BiLink* l) {
    l->_prev = this; l->_next = _next;
    _next->_prev = l; _next = l;
  }
  forceinline void
  BiLink::unlink(void) {
    BiLink* p = _prev; BiLink* n = _next;
    p->_next = n; n->_prev = p;
  }

  forceinline void
  BiLink::mark(void) {
    _next = NULL;
  }
  forceinline bool
  BiLink::marked(void) const {
    return _next == NULL;
  }
  forceinline bool
  BiLink::empty(void) const {
    return _prev == this;
  }

}}}

// STATISTICS: int-prop

