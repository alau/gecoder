/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004,2005
 *     Guido Tack, 2005
 *
 *  Last modified:
 *     $Date: 2007-12-06 14:09:40 +0100 (Thu, 06 Dec 2007) $ by $Author: tack $
 *     $Revision: 5608 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace CpltSet {

  /**
   * \defgroup FuncThrowSet Set exceptions
   * \ingroup FuncThrow
   */


  //@{

  /// %Exception: %Variable created with values too large for domain
  class GECODE_VTABLE_EXPORT VariableOutOfRangeDomain : public Exception {
  public:
    /// Initialize with location \a l
    VariableOutOfRangeDomain(const char* l);
  };

  /// %Exception: %Variable created with glb not a subset of lub
  class GECODE_VTABLE_EXPORT GlbLubSpecNoSubset : public Exception {
  public:
    /// Initialize with location \a l
    GlbLubSpecNoSubset(const char* l);
  };

  /// %Exception: %Variable created with wrong cardinality
  class GECODE_VTABLE_EXPORT VariableOutOfRangeCardinality
  : public Exception {
  public:
    /// Initialize with location \a l
    VariableOutOfRangeCardinality(const char* l);
  };

  /// %Exception: %Variable created with failed domain
  class GECODE_VTABLE_EXPORT VariableFailedDomain : public Exception {
  public:
    /// Initialize with location \a l
    VariableFailedDomain(const char* l);
  };

  /// %Exception: %Variable created with invalid domain specification
  class GECODE_VTABLE_EXPORT VariableInvalidDomainSpec : public Exception {
  public:
    /// Initialize with location \a l
    VariableInvalidDomainSpec(const char* l);
  };

  /// %Exception: No arguments available in argument array
  class GECODE_VTABLE_EXPORT ArgumentEmpty : public Exception {
  public:
    /// Initialize with location \a l
    ArgumentEmpty(const char* l);
  };
  
  /// %Exception: Arguments are of different size
  class GECODE_VTABLE_EXPORT ArgumentSizeMismatch : public Exception  {
  public:
    /// Initialize with location \a l
    ArgumentSizeMismatch(const char* l);
  };

  /// %Exception: Invalid relation passed as argument
  class GECODE_VTABLE_EXPORT InvalidRelation : public Exception  {
  public:
    /// Initialize with location \a l
    InvalidRelation(const char* l);
  };

  /// %Exception: Invalid projector passed as argument
  class GECODE_VTABLE_EXPORT InvalidProjector : public Exception  {
  public:
    /// Initialize with location \a l
    InvalidProjector(const char* l);
  };

  /// %Exception: Unknown value or variable selection passed as argument
  class GECODE_VTABLE_EXPORT UnknownBranching : public Exception {
  public:
    /// Initialize with location \a l
    UnknownBranching(const char* l);
  };


  //@}

  /**
   * Classes for exceptions raised by set module
   *
   */

  inline
  VariableOutOfRangeDomain::VariableOutOfRangeDomain(const char* l)
    : Exception(l,"Attempt to create variable with wrong values") {}

  inline
  GlbLubSpecNoSubset::GlbLubSpecNoSubset(const char* l) 
    : Exception(l,"Attempt to create variable where glb is not a subset of lub") {}

  inline
  VariableOutOfRangeCardinality::VariableOutOfRangeCardinality(const char* l)
    : Exception(l,"Attempt to create variable with wrong cardinality") {}

  inline
  VariableFailedDomain::VariableFailedDomain(const char* l)
    : Exception(l,"Attempt to create variable with initially failed domain") {}

  inline
    VariableInvalidDomainSpec::VariableInvalidDomainSpec(const char* l)
    : Exception(l,"Attempt to create variable with invalid domain specification") {}

  inline
  ArgumentEmpty::ArgumentEmpty(const char* l)
    : Exception(l,"Passed argument array has no elements") {}

  inline
  ArgumentSizeMismatch::ArgumentSizeMismatch(const char* l)
    : Exception(l,"Sizes of argument arrays mismatch") {}

  inline
  InvalidRelation::InvalidRelation(const char* l)
    : Exception(l,"Invalid relation type") {}

  inline
  InvalidProjector::InvalidProjector(const char* l)
    : Exception(l,"Invalid projector specification") {}

  inline
  UnknownBranching::UnknownBranching(const char* l)
    : Exception(l,"Unknown branching type") {}


}}

// STATISTICS: cpltset-other
