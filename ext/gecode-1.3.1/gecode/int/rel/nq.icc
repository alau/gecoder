/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date: 2006-08-31 17:36:38 +0200 (Thu, 31 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3579 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

namespace Gecode { namespace Int { namespace Rel {

  /*
   * Disequality
   *
   */

  template <class View>
  forceinline
  Nq<View>::Nq(Space* home, View x0, View x1)
    : BinaryPropagator<View,PC_INT_VAL>(home,x0,x1) {}

  template <class View>
  ExecStatus
  Nq<View>::post(Space* home, View x0, View x1){
    if (x0.assigned()) {
      GECODE_ME_CHECK(x1.nq(home,x0.val()));
    } else if (x1.assigned()) {
      GECODE_ME_CHECK(x0.nq(home,x1.val()));
    } else if (same(x0,x1)) {
      return ES_FAILED;
    } else {
      (void) new (home) Nq<View>(home,x0,x1);
    }
    return ES_OK;
  }

  template <class View>
  forceinline
  Nq<View>::Nq(Space* home, bool share, Nq<View>& p)
    : BinaryPropagator<View,PC_INT_VAL>(home,share,p) {}

  template <class View>
  Actor*
  Nq<View>::copy(Space* home, bool share) {
    return new (home) Nq<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Nq<View>::cost(void) const {
    return PC_UNARY_LO;
  }

  template <class View>
  ExecStatus
  Nq<View>::propagate(Space* home) {
    if (x0.assigned()) {
      GECODE_ME_CHECK(x1.nq(home,x0.val()));
    } else {
      GECODE_ME_CHECK(x0.nq(home,x1.val()));
    }
    return ES_SUBSUMED;
  }

  /*
   * Nary disequality
   *
   */
  template<class View>
  forceinline
  NaryNq<View>::NaryNq(Space* home, ViewArray<ViewTuple<View,2> >& x0)
    : BinaryPropagator<ViewTuple<View,2>,PC_INT_DOM>(home,
						     x0[x0.size()-2],
						     x0[x0.size()-1]), x(x0) {
    assert(x.size() >= 2);
    x.size(x.size()-2);
  }

  template<class View>
  forceinline
  NaryNq<View>::NaryNq(Space* home, bool share, NaryNq<View>& p)
    : BinaryPropagator<ViewTuple<View,2>,PC_INT_DOM>(home,share,p) {
    x.update(home,share,p.x);
  }

  template<class View>
  forceinline ExecStatus
  NaryNq<View>::post(Space* home, ViewArray<ViewTuple<View,2> >& x) {
    int n = x.size();
    for (int i=n; i--; )
      switch (rtest_nq_dom(x[i][0],x[i][1])) {
      case RT_FALSE: 
	x[i]=x[--n]; 
	break;
      case RT_TRUE:  
	return ES_OK;
      case RT_MAYBE: 
	break;
      default:
	GECODE_NEVER;
      }
    x.size(n);
    if (n == 0)
      return ES_FAILED;
    if (n == 1)
      return Nq<View>::post(home,x[0][0],x[0][1]);
    (void) new (home) NaryNq(home,x);
    return ES_OK;
  }

  template<class View>
  Actor*
  NaryNq<View>::copy(Space* home, bool share) {
    return new (home) NaryNq<View>(home,share,*this);
  }

  template<class View>
  ExecStatus
  NaryNq<View>::propagate(Space* home) {
    // Eliminate equal pairs
    int n = x.size();
    for (int i=n; i--; )
      switch (rtest_nq_dom(x[i][0],x[i][1])) {
      case RT_TRUE:  
	return ES_SUBSUMED;
      case RT_FALSE: 
	x[i].cancel(home,this,PC_INT_DOM);
	x[i]=x[--n]; 
	break;
      case RT_MAYBE: 
	break;
      default:
	GECODE_NEVER;
      }
    switch (rtest_nq_dom(x0[0],x0[1])) {
    case RT_TRUE: 
      return ES_SUBSUMED;
    case RT_FALSE:
      if (n == 0) {
	GECODE_ES_CHECK(Nq<View>::post(home,x1[0],x1[1]));
	return ES_SUBSUMED;
      }
      x0.cancel(home,this,PC_INT_DOM);
      x0=x[--n];
      x0.subscribe(home,this,PC_INT_DOM);
      break;
    case RT_MAYBE: 
      break;
    default:
      GECODE_NEVER;
    }
    switch (rtest_nq_dom(x1[0],x1[1])) {
    case RT_TRUE: 
      return ES_SUBSUMED;
    case RT_FALSE:
      if (n == 0) {
	GECODE_ES_CHECK(Nq<View>::post(home,x0[0],x0[1]));
	return ES_SUBSUMED;
      }
      x1.cancel(home,this,PC_INT_DOM);
      x1=x[--n];
      x1.subscribe(home,this,PC_INT_DOM);
      break;
    case RT_MAYBE: 
      break;
    default:
      GECODE_NEVER;
    }
    x.size(n);
    return ES_FIX;
  }

}}}

// STATISTICS: int-prop

