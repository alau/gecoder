---
title: Boolean Constraints
long_title: Boolean constraints supported by Gecode/R
inMenu: true
description: The different boolean constraints available in Gecode/R for use when modelling in Ruby.
---

h1. Boolean constraints

Boolean constraints are used to place constraints on boolean variables. The 
following are some example, b1, b2 and b3 are all boolean variables.

h2. Domain

<ruby>
b1.must_be.true # Constrains b1 to be true.
b2.must_be.false # Constraint b2 to be false.
</ruby>

h2. Conjunction, disjunction and exclusive disjunction

Disjunction (or) can is expressed with @|@, conjunction (and) is expressed 
with @&@ and exclusive disjunction (xor) is expression with @^@.

<ruby>
(b1 | b2).must == b1 # Constraint the disjunction of b1 and b2 to equal b1.
(b1 & b3).must_be.true # Constrains the conjunction of b1 and b3 to be true.
b1.must == b2 ^ b3 # Constrains b1 to equal b2 exclusive or b3.
</ruby>

Variations of @must@ can be replaced with variations of @must_not@ to negate the
constraints. Nested expressions can be used on both sides.

<ruby>
((@b1 ^ @b1) & @b3).must == ((@b2 | @b3) ^ @b2)
</ruby>

h2. Implication

Implication is expressed with @implies@ when used after boolean expressions and 
@imply@ when used after a form of @must@.

<ruby>
(b1.implies b2).must.imply b3
</ruby>

h2. Conjunction and disjunction of enumeration

One can take the conjunction and disjunction of all variables in an enumeration 
@bools@ of boolean variables as follows.

<ruby>
bools.conjunction.must == b1 | b2
bools.disjunction.must == b1 | b2
</ruby>

The part after @must@ supports everything that single boolean variables support.
