/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Guido Tack <tack@gecode.org>
 *
 *  Copyright:
 *     Guido Tack, 2006
 *
 *  Last modified:
 *     $Date: 2008-02-07 09:15:13 +0100 (Thu, 07 Feb 2008) $ by $Author: tack $
 *     $Revision: 6105 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Set { namespace Projection {

  forceinline
  ReNaryProjection::ReNaryProjection
  (Space* home, ViewArray<SetView>& x0, Gecode::Int::BoolView b0,
   ProjectorSet& ps0)
    : Propagator(home), x(x0), b(b0), ps(ps0) {
    force(home);
    x.subscribe(home, this, PC_SET_ANY);
    b.subscribe(home,this,Gecode::Int::PC_INT_VAL);
  }

  forceinline
  ReNaryProjection::ReNaryProjection
  (Space* home, bool share, ReNaryProjection& p)
    : Propagator(home,share,p) {
    x.update(home,share,p.x);
    b.update(home,share,p.b);
    ps.update(home,share,p.ps);
  }

  forceinline PropCost
  ReNaryProjection::cost(ModEventDelta) const {
    switch (x.size()) {
    case 1: return PC_UNARY_HI;
    case 2: return PC_BINARY_HI;
    case 3: return PC_TERNARY_HI;
    default: return PC_LINEAR_HI;
    }
  }

}}}

// STATISTICS: set-prop
