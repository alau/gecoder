/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:03:26 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3512 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include <cmath>

namespace Gecode { namespace Int { namespace Arithmetic {

  /*
   * Arithmetic help functions
   *
   */

  /// Multiply \a a and \a b as double
  forceinline double
  m(int a, int b) {
    return static_cast<double>(a)*static_cast<double>(b);
  }

  /// Compute \f$\lfloor x/y\rfloor\f$
  forceinline int
  f_d(int x, int y) {
    return static_cast<int>(floor(static_cast<double>(x) /
				  static_cast<double>(y)));
  }

  /// Compute \f$\lceil x/y\rceil\f$
  forceinline int
  c_d(int x, int y) {
    return static_cast<int>(ceil(static_cast<double>(x) /
				 static_cast<double>(y)));
  }

  /// Test whether \a x is postive
  template <class View>
  forceinline bool
  p(const View& x) {
    return x.min() > 0;
  }
  /// Test whether \a x is negative
  template <class View>
  forceinline bool
  n(const View& x) {
    return x.max() < 0;
  }
  /// Test whether \a x is neither positive nor negative
  template <class View>
  forceinline bool
  x(const View& x) {
    return (x.min() <= 0) && (x.max() >= 0);
  }



  /*
   * Positive bounds-consistent squaring
   *
   */
  template <class VA, class VB>
  forceinline
  SquarePlus<VA,VB>::SquarePlus(Space* home, VA y0, VB y1)
    : Propagator(home), x0(y0), x1(y1) {
    x0.subscribe(home,this,PC_INT_BND);
    x1.subscribe(home,this,PC_INT_BND);
  }

  template <class VA, class VB>
  forceinline ExecStatus
  SquarePlus<VA,VB>::post(Space* home, VA x0, VB x1) {
    (void) new (home) SquarePlus<VA,VB>(home,x0,x1);
    return ES_OK;
  }

  template <class VA, class VB>
  forceinline
  SquarePlus<VA,VB>::SquarePlus(Space* home, bool share, SquarePlus<VA,VB>& p)
    : Propagator(home,share,p) {
    x0.update(home,share,p.x0);
    x1.update(home,share,p.x1);
  }

  template <class VA, class VB>
  Actor*
  SquarePlus<VA,VB>::copy(Space* home, bool share) {
    return new (home) SquarePlus<VA,VB>(home,share,*this);
  }

  template <class VA, class VB>
  PropCost
  SquarePlus<VA,VB>::cost(void) const {
    return PC_TERNARY_HI;
  }

  template <class VA, class VB>
  ExecStatus
  SquarePlus<VA,VB>::propagate(Space* home) {
    bool mod;
    do {
      mod = false;
      {
	ModEvent me = x0.lq(home,floor(sqrt(static_cast<double>(x1.max()))));
	if (me_failed(me)) return ES_FAILED;
	mod |= me_modified(me);
      }
      {
	ModEvent me = x0.gq(home,ceil(sqrt(static_cast<double>(x1.min()))));
	if (me_failed(me)) return ES_FAILED;
	mod |= me_modified(me);
      }
      {
	ModEvent me = x1.lq(home,x0.max()*x0.max());
	if (me_failed(me)) return ES_FAILED;
	mod |= me_modified(me);
      }
      {
	ModEvent me = x1.gq(home,x0.min()*x0.min());
	if (me_failed(me)) return ES_FAILED;
	mod |= me_modified(me);
      }
    } while (mod);
    return x0.assigned() ? ES_SUBSUMED : ES_FIX;
  }

  template <class VA, class VB>
  size_t
  SquarePlus<VA,VB>::dispose(Space* home) {
    assert(!home->failed());
    x0.cancel(home,this,PC_INT_BND);
    x1.cancel(home,this,PC_INT_BND);
    (void) Propagator::dispose(home);
    return sizeof(*this);
  }


  /*
   * Bounds-consistent Square
   *
   */

  template <class View>
  forceinline
  Square<View>::Square(Space* home, View x0, View x1)
    : BinaryPropagator<View,PC_INT_BND>(home,x0,x1) {}

  template <class View>
  forceinline ExecStatus
  Square<View>::post(Space* home, View x0, View x1) {
    GECODE_ME_CHECK(x1.gq(home,0));
    GECODE_ME_CHECK(x0.lq(home,floor(sqrt(static_cast<double>
					  (Limits::Int::int_max)))));
    if (x0.min() >= 0)
      return SquarePlus<IntView,IntView>::post(home,x0,x1);
    if (x0.max() <= 0)
      return SquarePlus<MinusView,IntView>::post(home,x0,x1);
    (void) new (home) Square<View>(home,x0,x1);
    return ES_OK;
  }

  template <class View>
  forceinline
  Square<View>::Square(Space* home, bool share, Square<View>& p)
    : BinaryPropagator<View,PC_INT_BND>(home,share,p) {}

  template <class View>
  Actor*
  Square<View>::copy(Space* home, bool share) {
    return new (home) Square<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Square<View>::cost(void) const {
    return PC_BINARY_HI;
  }

  template <class View>
  ExecStatus
  Square<View>::propagate(Space* home) {
    // x0 * x0 = x1
    assert(x1.min() >= 0);
    if (x0.min() >= 0)
      return (SquarePlus<IntView,IntView>::post(home,x0,x1)
	      == ES_FAILED) ? ES_FAILED : ES_SUBSUMED;
    if (x0.max() <= 0)
      return (SquarePlus<MinusView,IntView>::post(home,x0,x1)
	      == ES_FAILED) ? ES_FAILED : ES_SUBSUMED;

    GECODE_ME_CHECK(x1.lq(home,std::max(x0.min()*x0.min(),
					x0.max()*x0.max())));

    int s = static_cast<int>(floor(sqrt(static_cast<double>(x1.max()))));

    GECODE_ME_CHECK(x0.gq(home,-s));
    GECODE_ME_CHECK(x0.lq(home,s));

    if (x0.assigned() && x1.assigned())
      return (x0.val()*x0.val() == x1.val()) ? ES_SUBSUMED : ES_FAILED;

    return ES_NOFIX;
  }


  /*
   * Positive bounds-consistent multiplication
   *
   */
  template <class VA, class VB, class VC>
  inline
  MultPlus<VA,VB,VC>::MultPlus(Space* home, VA y0, VB y1, VC y2)
    : Propagator(home), x0(y0), x1(y1), x2(y2) {
    x0.subscribe(home,this,PC_INT_BND);
    x1.subscribe(home,this,PC_INT_BND);
    x2.subscribe(home,this,PC_INT_BND);
  }

  template <class VA, class VB, class VC>
  inline ExecStatus
  MultPlus<VA,VB,VC>::post(Space* home, VA x0, VB x1, VC x2) {
    GECODE_ME_CHECK(x0.gr(home,0));
    GECODE_ME_CHECK(x1.gr(home,0));
    GECODE_ME_CHECK(x2.gr(home,0));
    (void) new (home) MultPlus<VA,VB,VC>(home,x0,x1,x2);
    return ES_OK;
  }

  template <class VA, class VB, class VC>
  forceinline
  MultPlus<VA,VB,VC>::MultPlus(Space* home, bool share, MultPlus<VA,VB,VC>& p)
    : Propagator(home,share,p) {
    x0.update(home,share,p.x0);
    x1.update(home,share,p.x1);
    x2.update(home,share,p.x2);
  }

  template <class VA, class VB, class VC>
  Actor*
  MultPlus<VA,VB,VC>::copy(Space* home, bool share) {
    return new (home) MultPlus<VA,VB,VC>(home,share,*this);
  }

  template <class VA, class VB, class VC>
  PropCost
  MultPlus<VA,VB,VC>::cost(void) const {
    return PC_TERNARY_HI;
  }

  template <class VA, class VB, class VC>
  ExecStatus
  MultPlus<VA,VB,VC>::propagate(Space* home) {
    assert(p(x0) && p(x1) && p(x2));
    bool mod;
    do {
      mod = false;
      {
	ModEvent me = x2.lq(home,m(x0.max(),x1.max()));
	if (me_failed(me)) return ES_FAILED;
	mod |= me_modified(me);
      }
      {
	ModEvent me = x2.gq(home,m(x0.min(),x1.min()));
	if (me_failed(me)) return ES_FAILED;
	mod |= me_modified(me);
      }
      {
	ModEvent me = x0.lq(home,f_d(x2.max(),x1.min()));
	if (me_failed(me)) return ES_FAILED;
	mod |= me_modified(me);
      }
      {
	ModEvent me = x0.gq(home,c_d(x2.min(),x1.max()));
	if (me_failed(me)) return ES_FAILED;
	mod |= me_modified(me);
      }
      {
	ModEvent me = x1.lq(home,f_d(x2.max(),x0.min()));
	if (me_failed(me)) return ES_FAILED;
	mod |= me_modified(me);
      }
      {
	ModEvent me = x1.gq(home,c_d(x2.min(),x0.max()));
	if (me_failed(me)) return ES_FAILED;
	mod |= me_modified(me);
      }
    } while (mod);
    return x0.assigned() && x1.assigned() ? ES_SUBSUMED : ES_FIX;
  }

  template <class VA, class VB, class VC>
  size_t
  MultPlus<VA,VB,VC>::dispose(Space* home) {
    assert(!home->failed());
    x0.cancel(home,this,PC_INT_BND);
    x1.cancel(home,this,PC_INT_BND);
    x2.cancel(home,this,PC_INT_BND);
    (void) Propagator::dispose(home);
    return sizeof(*this);
  }


  /*
   * Bounds-consistent multiplication
   *
   */

  template <class View>
  forceinline
  Mult<View>::Mult(Space* home, View x0, View x1, View x2)
    : TernaryPropagator<View,PC_INT_BND>(home,x0,x1,x2) {}

  template <class View>
  forceinline
  Mult<View>::Mult(Space* home, bool share, Mult<View>& p)
    : TernaryPropagator<View,PC_INT_BND>(home,share,p) {}

  template <class View>
  Actor*
  Mult<View>::copy(Space* home, bool share) {
    return new (home) Mult<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Mult<View>::cost(void) const {
    return PC_TERNARY_HI;
  }

  template <class View>
  ExecStatus
  Mult<View>::propagate(Space* home) {
    if (p(x0)) {
      if (p(x1) || p(x2)) goto rewrite_ppp;
      if (n(x1) || n(x2)) goto rewrite_pnn;
      goto prop_pxx;
    }
    if (n(x0)) {
      if (n(x1) || p(x2)) goto rewrite_nnp;
      if (p(x1) || n(x2)) goto rewrite_npn;
      goto prop_nxx;
    }
    if (p(x1)) {
      if (p(x2)) goto rewrite_ppp;
      if (n(x2)) goto rewrite_npn;
      goto prop_xpx;
    }
    if (n(x1)) {
      if (p(x2)) goto rewrite_nnp;
      if (n(x2)) goto rewrite_pnn;
      goto prop_xnx;
    }

    assert(x(x0) && x(x1));
    GECODE_ME_CHECK(x2.lq(home,std::max(m(x0.max(),x1.max()),
					m(x0.min(),x1.min()))));
    GECODE_ME_CHECK(x2.gq(home,std::min(m(x0.min(),x1.max()),
					m(x0.max(),x1.min()))));

    if (x0.assigned()) {
      assert((x0.val() == 0) && (x2.val() == 0));
      return ES_SUBSUMED;
    }

    if (x1.assigned()) {
      assert((x1.val() == 0) && (x2.val() == 0));
      return ES_SUBSUMED;
    }

    return ES_NOFIX;

  prop_xpx:
    std::swap(x0,x1);
  prop_pxx:
    assert(p(x0) && x(x1) && x(x2));

    GECODE_ME_CHECK(x2.lq(home,m(x0.max(),x1.max())));
    GECODE_ME_CHECK(x2.gq(home,m(x0.max(),x1.min())));

    if (p(x2)) goto rewrite_ppp;
    if (n(x2)) goto rewrite_pnn;

    GECODE_ME_CHECK(x1.lq(home,f_d(x2.max(),x0.min())));
    GECODE_ME_CHECK(x1.gq(home,c_d(x2.min(),x0.min())));

    if (x0.assigned() && x1.assigned()) {
      GECODE_ME_CHECK(x2.eq(home,m(x0.val(),x1.val())));
      return ES_SUBSUMED;
    }

    return ES_NOFIX;

  prop_xnx:
    std::swap(x0,x1);
  prop_nxx:
    assert(n(x0) && x(x1) && x(x2));

    GECODE_ME_CHECK(x2.lq(home,m(x0.min(),x1.min())));
    GECODE_ME_CHECK(x2.gq(home,m(x0.min(),x1.max())));

    if (p(x2)) goto rewrite_nnp;
    if (n(x2)) goto rewrite_npn;

    GECODE_ME_CHECK(x1.lq(home,f_d(x2.min(),x0.max())));
    GECODE_ME_CHECK(x1.gq(home,c_d(x2.max(),x0.max())));

    if (x0.assigned() && x1.assigned()) {
      GECODE_ME_CHECK(x2.eq(home,m(x0.val(),x1.val())));
      return ES_SUBSUMED;
    }

    return ES_NOFIX;

  rewrite_ppp:
    return (MultPlus<IntView,IntView,IntView>::post(home,x0,x1,x2)
	    == ES_FAILED) ? ES_FAILED : ES_SUBSUMED;

  rewrite_nnp:
    return (MultPlus<MinusView,MinusView,IntView>::post(home,x0,x1,x2)
	    == ES_FAILED) ? ES_FAILED : ES_SUBSUMED;

  rewrite_pnn:
    std::swap(x0,x1);
  rewrite_npn:
    return (MultPlus<MinusView,IntView,MinusView>::post(home,x0,x1,x2)
	    == ES_FAILED) ? ES_FAILED : ES_SUBSUMED;

  }

  template <class View>
  ExecStatus
  Mult<View>::post(Space* home, View x0, View x1, View x2) {
    if (same(x0,x1))
      return Square<View>::post(home,x0,x2);
    if (p(x0)) {
      if (p(x1) || p(x2)) goto post_ppp;
      if (n(x1) || n(x2)) goto post_pnn;
    } else if (n(x0)) {
      if (n(x1) || p(x2)) goto post_nnp;
      if (p(x1) || n(x2)) goto post_npn;
    } else if (p(x1)) {
      if (p(x2)) goto post_ppp;
      if (n(x2)) goto post_npn;
    } else if (n(x1)) {
      if (p(x2)) goto post_nnp;
      if (n(x2)) goto post_pnn;
    }
    (void) new (home) Mult<View>(home,x0,x1,x2);
    return ES_OK;

  post_ppp:
    return MultPlus<IntView,IntView,IntView>::post(home,x0,x1,x2);
  post_nnp:
    return MultPlus<MinusView,MinusView,IntView>::post(home,x0,x1,x2);
  post_pnn:
    std::swap(x0,x1);
  post_npn:
    return MultPlus<MinusView,IntView,MinusView>::post(home,x0,x1,x2);
  }

}}}

// STATISTICS: int-prop

