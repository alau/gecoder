/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date: 2006-08-04 16:03:05 +0200 (Fri, 04 Aug 2006) $ by $Author: schulte $
 *     $Revision: 3510 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  See the file "LICENSE" for information on usage and
 *  redistribution of this file, and for a
 *     DISCLAIMER OF ALL WARRANTIES.
 *
 */

#include <exception>

namespace Gecode {

  /**
   * \brief %Exception: Base-class for exceptions
   * \ingroup FuncThrow
   */
  class GECODE_KERNEL_EXPORT Exception : public std::exception {
  private:
    static const int li_max = 128;
    char li[li_max+1];
  public:
    /// Initialize with location \a l and information \a i
    Exception(const char* l, const char* i) throw ();
    /// Return information
    virtual const char* what(void) const throw();
  };


  /**
   * \defgroup FuncThrowKernel Kernel exceptions
   * \ingroup FuncThrow
   */

  //@{

  /// %Exception: %Memory exhausted
  class MemoryExhausted : public Exception {
  public:
    /// Initialize
    MemoryExhausted(void);
  };

  /// %Exception: Operation on failed space invoked
  class SpaceFailed : public Exception {
  public:
    /// Initialize with location \a l
    SpaceFailed(const char* l);
  };

  /// %Exception: Commit when no branching present
  class SpaceNoBranching : public Exception {
  public:
    /// Initialize
    SpaceNoBranching(void);
  };

  /// %Exception: Commit with illegal alternative
  class SpaceIllegalAlternative : public Exception {
  public:
    /// Initialize
    SpaceIllegalAlternative(void);
  };

  //@}

  /*
   * Classes for exceptions raised by kernel
   *
   */

  inline
  MemoryExhausted::MemoryExhausted(void)
    : Exception("Memory","Heap memory exhausted") {}

  inline
  SpaceFailed::SpaceFailed(const char* l)
    : Exception(l,"Attempt to invoke operation on failed space") {}

  inline
  SpaceNoBranching::SpaceNoBranching(void)
    : Exception("Space::commit",
		"Attempt to commit with no branching") {}

  inline
  SpaceIllegalAlternative::SpaceIllegalAlternative(void)
    : Exception("Space::commit",
		"Attempt to commit with illegal alternative") {}

}

// STATISTICS: kernel-other
