/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2008
 *
 *  Last modified:
 *     $Date: 2008-02-25 00:16:01 +0100 (Mon, 25 Feb 2008) $ by $Author: schulte $
 *     $Revision: 6288 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

#include <cmath>

namespace Gecode { namespace Int { namespace Arithmetic {

  /*
   * Positive bounds-consistent squaring
   *
   */
  template <class VA, class VB>
  forceinline
  SqrPlus<VA,VB>::SqrPlus(Space* home, VA x0, VB x1)
    : MixBinaryPropagator<VA,PC_INT_BND,VB,PC_INT_BND>(home,x0,x1) {}

  template <class VA, class VB>
  forceinline ExecStatus
  SqrPlus<VA,VB>::post(Space* home, VA x0, VB x1) {
    (void) new (home) SqrPlus<VA,VB>(home,x0,x1);
    return ES_OK;
  }

  template <class VA, class VB>
  forceinline void
  SqrPlus<VA,VB>::post(Space* home, Reflection::VarMap& vars,
                     const Reflection::ActorSpec& spec) {
     spec.checkArity(2);
     VA x0(home, vars, spec[0]);
     VB x1(home, vars, spec[1]);
     (void) new (home) SqrPlus<VA,VB>(home,x0,x1);
  }

  template <class VA, class VB>
  forceinline
  SqrPlus<VA,VB>::SqrPlus(Space* home, bool share, SqrPlus<VA,VB>& p)
    : MixBinaryPropagator<VA,PC_INT_BND,VB,PC_INT_BND>(home,share,p) {}

  template <class VA, class VB>
  Actor*
  SqrPlus<VA,VB>::copy(Space* home, bool share) {
    return new (home) SqrPlus<VA,VB>(home,share,*this);
  }

  template <class VA, class VB>
  ExecStatus
  SqrPlus<VA,VB>::propagate(Space* home, ModEventDelta) {
    bool mod;
    do {
      mod = false;
      {
        ModEvent me = x0.lq(home,floor(::sqrt(static_cast<double>(x1.max()))));
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x0.gq(home,ceil(::sqrt(static_cast<double>(x1.min()))));
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x1.lq(home,x0.max()*x0.max());
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
      {
        ModEvent me = x1.gq(home,x0.min()*x0.min());
        if (me_failed(me)) return ES_FAILED;
        mod |= me_modified(me);
      }
    } while (mod);
    return x0.assigned() ? ES_SUBSUMED(this,sizeof(*this)) : ES_FIX;
  }

  template <class VA, class VB>
  Support::Symbol
  SqrPlus<VA,VB>::ati(void) {
    return Reflection::mangle<VA,VB>("Gecode::Int::Arithmetic::SqrPlus");
  }

  template <class VA, class VB>
  Reflection::ActorSpec
  SqrPlus<VA,VB>::spec(const Space* home, Reflection::VarMap& m) const {
    return MixBinaryPropagator<VA,PC_INT_BND,VB,PC_INT_BND>
      ::spec(home, m, ati());
  }

  /*
   * Bounds-consistent Sqr
   *
   */

  template <class View>
  forceinline
  Sqr<View>::Sqr(Space* home, View x0, View x1)
    : BinaryPropagator<View,PC_INT_BND>(home,x0,x1) {}

  template <class View>
  forceinline ExecStatus
  Sqr<View>::post(Space* home, View x0, View x1) {
    GECODE_ME_CHECK(x1.gq(home,0));
    if (same(x0,x1)) {
      GECODE_ME_CHECK(x1.lq(home,1));
    } else {
      GECODE_ME_CHECK(x0.lq(home,floor(::sqrt(static_cast<double>
                                              (Limits::max)))));
      GECODE_ME_CHECK(x0.gq(home,-floor(::sqrt(static_cast<double>
                                               (-Limits::min)))));
      if (x0.min() >= 0)
        return SqrPlus<IntView,IntView>::post(home,x0,x1);
      if (x0.max() <= 0)
        return SqrPlus<MinusView,IntView>::post(home,x0,x1);
      (void) new (home) Sqr<View>(home,x0,x1);
    }
    return ES_OK;
  }

  template <class View>
  forceinline void
  Sqr<View>::post(Space* home, Reflection::VarMap& vars,
                     const Reflection::ActorSpec& spec) {
     spec.checkArity(2);
     View x0(home, vars, spec[0]);
     View x1(home, vars, spec[1]);
     (void) new (home) Sqr<View>(home,x0,x1);
  }

  template <class View>
  forceinline
  Sqr<View>::Sqr(Space* home, bool share, Sqr<View>& p)
    : BinaryPropagator<View,PC_INT_BND>(home,share,p) {}

  template <class View>
  Actor*
  Sqr<View>::copy(Space* home, bool share) {
    return new (home) Sqr<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Sqr<View>::cost(ModEventDelta) const {
    return PC_BINARY_HI;
  }

  template <class View>
  ExecStatus
  Sqr<View>::propagate(Space* home, ModEventDelta) {
    assert(x1.min() >= 0);
    if (x0.min() >= 0)
      GECODE_REWRITE(this,(SqrPlus<IntView,IntView>::post(home,x0,x1)));
    if (x0.max() <= 0)
      GECODE_REWRITE(this,(SqrPlus<MinusView,IntView>::post(home,x0,x1)));

    GECODE_ME_CHECK(x1.lq(home,std::max(x0.min()*x0.min(),
                                        x0.max()*x0.max())));

    int s = static_cast<int>(floor(::sqrt(static_cast<double>(x1.max()))));

    GECODE_ME_CHECK(x0.gq(home,-s));
    GECODE_ME_CHECK(x0.lq(home,s));

    if (x0.assigned() && x1.assigned())
      return (x0.val()*x0.val() == x1.val()) ? 
        ES_SUBSUMED(this,sizeof(*this)) : ES_FAILED;

    return ES_NOFIX;
  }

  template <class View>
  Support::Symbol
  Sqr<View>::ati(void) {
    return Reflection::mangle<View>("Gecode::Int::Arithmetic::Sqr");
  }

  template <class View>
  Reflection::ActorSpec
  Sqr<View>::spec(const Space* home, Reflection::VarMap& m) const {
    return BinaryPropagator<View,PC_INT_BND>::spec(home, m, ati());
  }

}}}

// STATISTICS: int-prop

