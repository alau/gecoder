/* -*- mode: C++; c-basic-offset: 2; indent-tabs-mode: nil -*- */
/*
 *  Main authors:
 *     Christian Schulte <schulte@gecode.org>
 *
 *  Copyright:
 *     Christian Schulte, 2004
 *
 *  Last modified:
 *     $Date: 2008-07-11 09:33:32 +0200 (Fri, 11 Jul 2008) $ by $Author: tack $
 *     $Revision: 7290 $
 *
 *  This file is part of Gecode, the generic constraint
 *  development environment:
 *     http://www.gecode.org
 *
 *  Permission is hereby granted, free of charge, to any person obtaining
 *  a copy of this software and associated documentation files (the
 *  "Software"), to deal in the Software without restriction, including
 *  without limitation the rights to use, copy, modify, merge, publish,
 *  distribute, sublicense, and/or sell copies of the Software, and to
 *  permit persons to whom the Software is furnished to do so, subject to
 *  the following conditions:
 *
 *  The above copyright notice and this permission notice shall be
 *  included in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *  LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *  WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */

namespace Gecode { namespace Int { namespace Rel {

  /*
   * Disequality
   *
   */
  template <class View>
  forceinline
  Nq<View>::Nq(Space* home, View x0, View x1)
    : BinaryPropagator<View,PC_INT_VAL>(home,x0,x1) {}

  template <class View>
  ExecStatus
  Nq<View>::post(Space* home, View x0, View x1){
    if (x0.assigned()) {
      GECODE_ME_CHECK(x1.nq(home,x0.val()));
    } else if (x1.assigned()) {
      GECODE_ME_CHECK(x0.nq(home,x1.val()));
    } else if (same(x0,x1)) {
      return ES_FAILED;
    } else {
      (void) new (home) Nq<View>(home,x0,x1);
    }
    return ES_OK;
  }

  template <class View>
  forceinline
  Nq<View>::Nq(Space* home, bool share, Nq<View>& p)
    : BinaryPropagator<View,PC_INT_VAL>(home,share,p) {}

  template <class View>
  Actor*
  Nq<View>::copy(Space* home, bool share) {
    return new (home) Nq<View>(home,share,*this);
  }

  template <class View>
  PropCost
  Nq<View>::cost(ModEventDelta) const {
    return PC_UNARY_LO;
  }

  template <class View>
  inline Support::Symbol
  Nq<View>::ati(void) {
    return Reflection::mangle<View>("Gecode::Int::Rel::Nq");
  }

  template <class View>
  Reflection::ActorSpec
  Nq<View>::spec(const Space* home, Reflection::VarMap& m) const {
    return BinaryPropagator<View,PC_INT_VAL>::spec(home, m, ati());
  }

  template <class View>
  void
  Nq<View>::post(Space* home, Reflection::VarMap& vars,
  const Reflection::ActorSpec& spec) {
    spec.checkArity(2);
    View x0(home, vars, spec[0]);
    View x1(home, vars, spec[1]);
    (void) new (home) Nq<View>(home, x0, x1);
  }

  template <class View>
  ExecStatus
  Nq<View>::propagate(Space* home, ModEventDelta) {
    if (x0.assigned()) {
      GECODE_ME_CHECK(x1.nq(home,x0.val()));
      x1.cancel(home,this,PC_INT_VAL);
    } else {
      GECODE_ME_CHECK(x0.nq(home,x1.val()));
      x0.cancel(home,this,PC_INT_VAL);
    }
    return ES_SUBSUMED(this,sizeof(*this));
  }

}}}

// STATISTICS: int-prop
